
LabA5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004574  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004728  08004728  00005728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004870  08004870  00006080  2**0
                  CONTENTS
  4 .ARM          00000008  08004870  08004870  00005870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004878  08004878  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800487c  0800487c  0000587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08004880  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000080  08004900  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004900  000061f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058ca  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001719  00000000  00000000  0000b97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000508  00000000  00000000  0000d780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b69  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008286  00000000  00000000  000367f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a9e  00000000  00000000  0003ea77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131515  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000251c  00000000  00000000  00131558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00133a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800470c 	.word	0x0800470c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800470c 	.word	0x0800470c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <DAC_init>:
void 		DAC_init (void);
uint16_t 	DAC_volt_conv( uint16_t voltage );
void		DAC_write ( uint16_t voltage_12bit );


void DAC_init (void) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
	// enable clock for GPIOA & SPI1
	RCC->AHB2ENR |= (DAC_PORT_CLOCK);                // GPIOA: DAC NSS/SCK/SDO
 8000bbe:	4b74      	ldr	r3, [pc, #464]	@ (8000d90 <DAC_init+0x1d8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a73      	ldr	r2, [pc, #460]	@ (8000d90 <DAC_init+0x1d8>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);                 // SPI1 port
 8000bca:	4b71      	ldr	r3, [pc, #452]	@ (8000d90 <DAC_init+0x1d8>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bce:	4a70      	ldr	r2, [pc, #448]	@ (8000d90 <DAC_init+0x1d8>)
 8000bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bd4:	6613      	str	r3, [r2, #96]	@ 0x60

	/* USER ADD GPIO configuration of MODER/PUPDR/OTYPER/OSPEEDR registers HERE */


	uint32_t dac_pins[] = DAC_PINS;
 8000bd6:	4a6f      	ldr	r2, [pc, #444]	@ (8000d94 <DAC_init+0x1dc>)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < DAC_NUM ; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e087      	b.n	8000cf6 <DAC_init+0x13e>
		uint32_t pin = dac_pins[i];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	3318      	adds	r3, #24
 8000bec:	443b      	add	r3, r7
 8000bee:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000bf2:	613b      	str	r3, [r7, #16]
		DAC_PORT->MODER &= ~(0x3 << (pin * 2));
 8000bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	0052      	lsls	r2, r2, #1
 8000bfe:	2103      	movs	r1, #3
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	4611      	mov	r1, r2
 8000c08:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
		DAC_PORT->MODER |= (0x2 << (pin * 2));
 8000c10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	4611      	mov	r1, r2
 8000c22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]
		DAC_PORT->OTYPER &= ~(0x1 << pin);
 8000c2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2101      	movs	r1, #1
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c40:	400b      	ands	r3, r1
 8000c42:	6053      	str	r3, [r2, #4]
		DAC_PORT->OTYPER |= (0x0 << pin);
 8000c44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c48:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	6053      	str	r3, [r2, #4]
		DAC_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000c50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	0052      	lsls	r2, r2, #1
 8000c5a:	2103      	movs	r1, #3
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	43d2      	mvns	r2, r2
 8000c62:	4611      	mov	r1, r2
 8000c64:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c68:	400b      	ands	r3, r1
 8000c6a:	6093      	str	r3, [r2, #8]
		DAC_PORT->OSPEEDR |= (0x3 << (pin * 2));//Highest speed
 8000c6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	2103      	movs	r1, #3
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6093      	str	r3, [r2, #8]
		DAC_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000c86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	0052      	lsls	r2, r2, #1
 8000c90:	2103      	movs	r1, #3
 8000c92:	fa01 f202 	lsl.w	r2, r1, r2
 8000c96:	43d2      	mvns	r2, r2
 8000c98:	4611      	mov	r1, r2
 8000c9a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c9e:	400b      	ands	r3, r1
 8000ca0:	60d3      	str	r3, [r2, #12]
		DAC_PORT->BRR |= (0x1 << (pin * 1));	//initialize off
 8000ca2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	2101      	movs	r1, #1
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6293      	str	r3, [r2, #40]	@ 0x28
		GPIOA->AFR[0] &= ~((0x000F << (pin * 4))); // clear for 4 AF
 8000cba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cbe:	6a1b      	ldr	r3, [r3, #32]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	210f      	movs	r1, #15
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	43d2      	mvns	r2, r2
 8000ccc:	4611      	mov	r1, r2
 8000cce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=  ((0x0005 << (pin * 4))); // set A4 AF to SPI1 (fcn 5)
 8000cd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6213      	str	r3, [r2, #32]
	for (uint32_t i = 0; i < DAC_NUM ; i++) {
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	f67f af74 	bls.w	8000be6 <DAC_init+0x2e>
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE );             	// disable SPI for config
 8000cfe:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <DAC_init+0x1e0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <DAC_init+0x1e0>)
 8000d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d08:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_RXONLY );          	// recv-only OFF
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <DAC_init+0x1e0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	@ (8000d98 <DAC_init+0x1e0>)
 8000d10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d14:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST );        	// data bit order MSb:LSb
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <DAC_init+0x1e0>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000d98 <DAC_init+0x1e0>)
 8000d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d20:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0 // clock should be low in idle state
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <DAC_init+0x1e0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <DAC_init+0x1e0>)
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |=	 SPI_CR1_MSTR;              	// MCU is SPI controller
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d98 <DAC_init+0x1e0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <DAC_init+0x1e0>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <DAC_init+0x1e0>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4a16      	ldr	r2, [pc, #88]	@ (8000d98 <DAC_init+0x1e0>)
 8000d40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d44:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 8000d46:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <DAC_init+0x1e0>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4a13      	ldr	r2, [pc, #76]	@ (8000d98 <DAC_init+0x1e0>)
 8000d4c:	f023 0310 	bic.w	r3, r3, #16
 8000d50:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_NSSP;              	// auto-generate NSS pulse
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <DAC_init+0x1e0>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	4a10      	ldr	r2, [pc, #64]	@ (8000d98 <DAC_init+0x1e0>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_DS;                	// 16-bit data
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <DAC_init+0x1e0>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <DAC_init+0x1e0>)
 8000d64:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000d68:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_SSOE;              	// enable SS(slave select CS) output
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <DAC_init+0x1e0>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <DAC_init+0x1e0>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6053      	str	r3, [r2, #4]
	// CR1
	SPI1->CR1 |=	 SPI_CR1_SPE;               	// re-enable SPI for ops
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <DAC_init+0x1e0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <DAC_init+0x1e0>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d80:	6013      	str	r3, [r2, #0]
//	GPIOA->AFR[0] |=  ((0x0005 << GPIO_AFRL_AFSEL5_Pos)); // set A5 AF to SPI1 (fcn 5)
//	// Pin A7: configure AFR for SPI1_MOSI function
//	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); // clear for bit 7 AF
//	GPIOA->AFR[0] |=  ((0x0005 << GPIO_AFRL_AFSEL7_Pos)); // set A7 AF to SPI1 (fcn 5)

}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	08004728 	.word	0x08004728
 8000d98:	40013000 	.word	0x40013000

08000d9c <DAC_volt_conv>:

uint16_t DAC_volt_conv( uint16_t millivolt ) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	// Takes user entered voltage in mV, outputs 16-bit control and data code
	uint16_t data = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	81fb      	strh	r3, [r7, #14]

	if (millivolt > 3300) {
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d902      	bls.n	8000dba <DAC_volt_conv+0x1e>
		return (0x1000 + 3300*1);		// Max output (G=2)
 8000db4:	f641 43e4 	movw	r3, #7396	@ 0x1ce4
 8000db8:	e00e      	b.n	8000dd8 <DAC_volt_conv+0x3c>
	}
	else if (millivolt > 2047) {
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000dc0:	d304      	bcc.n	8000dcc <DAC_volt_conv+0x30>
		return (0x1000 + millivolt*1); 	// Gain = 2
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	e005      	b.n	8000dd8 <DAC_volt_conv+0x3c>
	}
	else {
		return (0x3000 + millivolt*2); 	// Gain = 1
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b29b      	uxth	r3, r3
	}
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DAC_write>:

void DAC_write ( uint16_t voltage_12bit ) {
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	uint16_t red = voltage_12bit;
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	81fb      	strh	r3, [r7, #14]
	while(!(SPI1->SR & SPI_SR_TXE))
 8000df2:	bf00      	nop
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <DAC_write+0x30>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f9      	beq.n	8000df4 <DAC_write+0x10>
		;	// Hold when TXE bit is zero
	//SPI1->DR = 0x36A7;
	SPI1->DR = voltage_12bit;
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <DAC_write+0x30>)
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	60d3      	str	r3, [r2, #12]

}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40013000 	.word	0x40013000

08000e18 <delay_us>:
// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.

void delay_us(const uint32_t time_us) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <delay_us+0x50>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <delay_us+0x54>)
 8000e26:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2a:	0c9b      	lsrs	r3, r3, #18
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <delay_us+0x58>)
 8000e34:	3b01      	subs	r3, #1
 8000e36:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 8000e38:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <delay_us+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <delay_us+0x58>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <delay_us+0x58>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 8000e4a:	bf00      	nop
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <delay_us+0x58>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f9      	beq.n	8000e4c <delay_us+0x34>
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <Keypad_Config>:

// Declare local variable
uint8_t debounce_state = 0;	// If key is currently pressed ==1


void Keypad_Config ( void ) {
 8000e74:	b490      	push	{r4, r7}
 8000e76:	b08c      	sub	sp, #48	@ 0x30
 8000e78:	af00      	add	r7, sp, #0
	// pins must be an array with pin numbers.
	// count(number of pins being used) must be entered manually
	RCC->AHB2ENR |= (KEYPAD_PORT_CLOCK);
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8001028 <Keypad_Config+0x1b4>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a6a      	ldr	r2, [pc, #424]	@ (8001028 <Keypad_Config+0x1b4>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set columns to outputs
	uint32_t col_pins[] = COL_PINS;
 8000e86:	4b69      	ldr	r3, [pc, #420]	@ (800102c <Keypad_Config+0x1b8>)
 8000e88:	f107 0410 	add.w	r4, r7, #16
 8000e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (uint32_t i = 0; i < NUM_COLS; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e96:	e05c      	b.n	8000f52 <Keypad_Config+0xde>
		uint32_t pin = col_pins[i];
 8000e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	3330      	adds	r3, #48	@ 0x30
 8000e9e:	443b      	add	r3, r7
 8000ea0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000ea4:	623b      	str	r3, [r7, #32]
		KEYPAD_PORT->MODER &= ~(0x3 << (pin * 2));
 8000ea6:	4b62      	ldr	r3, [pc, #392]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6a3a      	ldr	r2, [r7, #32]
 8000eac:	0052      	lsls	r2, r2, #1
 8000eae:	2103      	movs	r1, #3
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8001030 <Keypad_Config+0x1bc>)
 8000eba:	400b      	ands	r3, r1
 8000ebc:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->MODER |= (0x1 << (pin * 2));	// 01
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a3a      	ldr	r2, [r7, #32]
 8000ec4:	0052      	lsls	r2, r2, #1
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4a58      	ldr	r2, [pc, #352]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ed0:	430b      	orrs	r3, r1
 8000ed2:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->OTYPER &= ~(0x1 << pin);
 8000ed4:	4b56      	ldr	r3, [pc, #344]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6a3a      	ldr	r2, [r7, #32]
 8000edc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee0:	43d2      	mvns	r2, r2
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4a52      	ldr	r2, [pc, #328]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OTYPER |= (0x0 << pin);		// 0
 8000eea:	4b51      	ldr	r3, [pc, #324]	@ (8001030 <Keypad_Config+0x1bc>)
 8000eec:	4a50      	ldr	r2, [pc, #320]	@ (8001030 <Keypad_Config+0x1bc>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	2103      	movs	r1, #3
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a4a      	ldr	r2, [pc, #296]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f06:	400b      	ands	r3, r1
 8000f08:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->OSPEEDR |= (0x3 << (pin * 2));	// Fastest speed
 8000f0a:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	0052      	lsls	r2, r2, #1
 8000f12:	2103      	movs	r1, #3
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4a45      	ldr	r2, [pc, #276]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000f20:	4b43      	ldr	r3, [pc, #268]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	0052      	lsls	r2, r2, #1
 8000f28:	2103      	movs	r1, #3
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	43d2      	mvns	r2, r2
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a3f      	ldr	r2, [pc, #252]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f34:	400b      	ands	r3, r1
 8000f36:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->PUPDR |= (0x0 << (pin * 2));	// No PU or PD
 8000f38:	4b3d      	ldr	r3, [pc, #244]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->ODR &= ~(COL_IO);				// Start low
 8000f40:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a3a      	ldr	r2, [pc, #232]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f46:	f023 030f 	bic.w	r3, r3, #15
 8000f4a:	6153      	str	r3, [r2, #20]
	for (uint32_t i = 0; i < NUM_COLS; i++) {
 8000f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f4e:	3301      	adds	r3, #1
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d99f      	bls.n	8000e98 <Keypad_Config+0x24>
	}

	// Set rows to inputs
	uint32_t row_pins[] = ROW_PINS;
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <Keypad_Config+0x1c0>)
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (uint32_t i = 0; i < NUM_ROWS; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f66:	e056      	b.n	8001016 <Keypad_Config+0x1a2>
		uint32_t pin = row_pins[i];
 8000f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	3330      	adds	r3, #48	@ 0x30
 8000f6e:	443b      	add	r3, r7
 8000f70:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
		KEYPAD_PORT->MODER &= ~(0x3 << (pin * 2));
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f7c:	0052      	lsls	r2, r2, #1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	43d2      	mvns	r2, r2
 8000f86:	4611      	mov	r1, r2
 8000f88:	4a29      	ldr	r2, [pc, #164]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->MODER |= (0x0 << (pin * 2));
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f90:	4a27      	ldr	r2, [pc, #156]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->OTYPER &= ~(0x1 << pin);
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <Keypad_Config+0x1bc>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	43d2      	mvns	r2, r2
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fa8:	400b      	ands	r3, r1
 8000faa:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OTYPER |= (0x0 << pin);
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fae:	4a20      	ldr	r2, [pc, #128]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	43d2      	mvns	r2, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fc8:	400b      	ands	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->OSPEEDR |= (0x3 << (pin * 2));
 8000fcc:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fd2:	0052      	lsls	r2, r2, #1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <Keypad_Config+0x1bc>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fe8:	0052      	lsls	r2, r2, #1
 8000fea:	2103      	movs	r1, #3
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4a0e      	ldr	r2, [pc, #56]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->PUPDR |= (0x2 << (pin * 2));
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <Keypad_Config+0x1bc>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001000:	0052      	lsls	r2, r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4611      	mov	r1, r2
 800100a:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <Keypad_Config+0x1bc>)
 800100c:	430b      	orrs	r3, r1
 800100e:	60d3      	str	r3, [r2, #12]
	for (uint32_t i = 0; i < NUM_ROWS; i++) {
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	3301      	adds	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001018:	2b03      	cmp	r3, #3
 800101a:	d9a5      	bls.n	8000f68 <Keypad_Config+0xf4>
	}
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	@ 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bc90      	pop	{r4, r7}
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	08004734 	.word	0x08004734
 8001030:	48000800 	.word	0x48000800
 8001034:	08004744 	.word	0x08004744

08001038 <Keypad_IsAnyKeyPressed>:


int Keypad_IsAnyKeyPressed(void) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
	// drive all COLUMNS HI; see if any ROWS are HI
	// return true if a key is pressed, false if not
	// Debounce only records a single press when button held
	uint16_t settle = 1000;	// Small delay for debounce to settle
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	807b      	strh	r3, [r7, #2]
	uint16_t debounce_count = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	80fb      	strh	r3, [r7, #6]
	if ( debounce_state == 0 ) {
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <Keypad_IsAnyKeyPressed+0x90>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d124      	bne.n	800109a <Keypad_IsAnyKeyPressed+0x62>
		KEYPAD_PORT->BSRR |= COL_IO;	// set all columns HI
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <Keypad_IsAnyKeyPressed+0x94>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a1d      	ldr	r2, [pc, #116]	@ (80010cc <Keypad_IsAnyKeyPressed+0x94>)
 8001056:	f043 030f 	orr.w	r3, r3, #15
 800105a:	6193      	str	r3, [r2, #24]
		for ( uint16_t idx=0; idx<settle; idx++ )   	// let it settle
 800105c:	2300      	movs	r3, #0
 800105e:	80bb      	strh	r3, [r7, #4]
 8001060:	e002      	b.n	8001068 <Keypad_IsAnyKeyPressed+0x30>
 8001062:	88bb      	ldrh	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	80bb      	strh	r3, [r7, #4]
 8001068:	88ba      	ldrh	r2, [r7, #4]
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	429a      	cmp	r2, r3
 800106e:	d3f8      	bcc.n	8001062 <Keypad_IsAnyKeyPressed+0x2a>
			;
		while ( (KEYPAD_PORT->IDR & ROW_IO) != 0 ) {	// Button pressed
 8001070:	e00b      	b.n	800108a <Keypad_IsAnyKeyPressed+0x52>
			debounce_count++;
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	3301      	adds	r3, #1
 8001076:	80fb      	strh	r3, [r7, #6]
			if ( debounce_count > settle ) {			// Button high for awhile
 8001078:	88fa      	ldrh	r2, [r7, #6]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	429a      	cmp	r2, r3
 800107e:	d904      	bls.n	800108a <Keypad_IsAnyKeyPressed+0x52>
				debounce_state = 1;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <Keypad_IsAnyKeyPressed+0x90>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
				return 1;
 8001086:	2301      	movs	r3, #1
 8001088:	e018      	b.n	80010bc <Keypad_IsAnyKeyPressed+0x84>
		while ( (KEYPAD_PORT->IDR & ROW_IO) != 0 ) {	// Button pressed
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <Keypad_IsAnyKeyPressed+0x94>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f403 73b8 	and.w	r3, r3, #368	@ 0x170
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1ed      	bne.n	8001072 <Keypad_IsAnyKeyPressed+0x3a>
			}
		}
		return 0;
 8001096:	2300      	movs	r3, #0
 8001098:	e010      	b.n	80010bc <Keypad_IsAnyKeyPressed+0x84>
	}
	if ( debounce_state == 1 ) {	// Button was pressed
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <Keypad_IsAnyKeyPressed+0x90>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10c      	bne.n	80010bc <Keypad_IsAnyKeyPressed+0x84>
		if ( (KEYPAD_PORT->IDR & ROW_IO) == 0 ) {		// Button released
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <Keypad_IsAnyKeyPressed+0x94>)
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	f403 73b8 	and.w	r3, r3, #368	@ 0x170
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d104      	bne.n	80010b8 <Keypad_IsAnyKeyPressed+0x80>
			debounce_state = 0;
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <Keypad_IsAnyKeyPressed+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
			return 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e001      	b.n	80010bc <Keypad_IsAnyKeyPressed+0x84>
		}
		else return  0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e7ff      	b.n	80010bc <Keypad_IsAnyKeyPressed+0x84>
	}
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	2000009c 	.word	0x2000009c
 80010cc:	48000800 	.word	0x48000800

080010d0 <Keypad_WhichKeyIsPressed>:


uint8_t Keypad_WhichKeyIsPressed(void) {
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b08f      	sub	sp, #60	@ 0x3c
 80010d4:	af00      	add	r7, sp, #0
	// detect and encode a pressed key at {row,col}
	// assumes a previous call to Keypad_IsAnyKeyPressed() returned TRUE
	// verifies the Keypad_IsAnyKeyPressed() result (no debounce here),
	// determines which key is pressed and returns the encoded key ID

	int8_t iRow=0, iCol=0, iKey=0;  // keypad row & col index, key ID result
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	int8_t bGotKey = 0;             // bool for keypress, 0 = no press
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint16_t settle = 1000;			// Small delay for latching to settle
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	uint32_t col_pins[] = COL_PINS;
 80010f4:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <Keypad_WhichKeyIsPressed+0x134>)
 80010f6:	f107 0410 	add.w	r4, r7, #16
 80010fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t row_pins[] = ROW_PINS;
 8001100:	4b41      	ldr	r3, [pc, #260]	@ (8001208 <Keypad_WhichKeyIsPressed+0x138>)
 8001102:	463c      	mov	r4, r7
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	KEYPAD_PORT->ODR &= ~(COL_IO);	// Disable columns from IsAnyKeyPressed
 800110a:	4b40      	ldr	r3, [pc, #256]	@ (800120c <Keypad_WhichKeyIsPressed+0x13c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a3f      	ldr	r2, [pc, #252]	@ (800120c <Keypad_WhichKeyIsPressed+0x13c>)
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	6153      	str	r3, [r2, #20]

	for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {
 8001116:	2300      	movs	r3, #0
 8001118:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800111c:	e04c      	b.n	80011b8 <Keypad_WhichKeyIsPressed+0xe8>
		// turn column on one by one
		uint32_t pinC = col_pins[iCol];
 800111e:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	3338      	adds	r3, #56	@ 0x38
 8001126:	443b      	add	r3, r7
 8001128:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
		KEYPAD_PORT->ODR = ((KEYPAD_PORT->ODR & ~(COL_IO)) | (0x1 << pinC ));
 800112e:	4b37      	ldr	r3, [pc, #220]	@ (800120c <Keypad_WhichKeyIsPressed+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f023 030f 	bic.w	r3, r3, #15
 8001136:	2101      	movs	r1, #1
 8001138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4611      	mov	r1, r2
 8001140:	4a32      	ldr	r2, [pc, #200]	@ (800120c <Keypad_WhichKeyIsPressed+0x13c>)
 8001142:	430b      	orrs	r3, r1
 8001144:	6153      	str	r3, [r2, #20]
		for ( uint16_t idx=0; idx<settle; idx++ )   	// let it settle
 8001146:	2300      	movs	r3, #0
 8001148:	867b      	strh	r3, [r7, #50]	@ 0x32
 800114a:	e002      	b.n	8001152 <Keypad_WhichKeyIsPressed+0x82>
 800114c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800114e:	3301      	adds	r3, #1
 8001150:	867b      	strh	r3, [r7, #50]	@ 0x32
 8001152:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001154:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001156:	429a      	cmp	r2, r3
 8001158:	d3f8      	bcc.n	800114c <Keypad_WhichKeyIsPressed+0x7c>
			;
		for( iRow = 0; iRow < NUM_ROWS; iRow++ ){		// check each row
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001160:	e01b      	b.n	800119a <Keypad_WhichKeyIsPressed+0xca>
			uint32_t pinR = row_pins[iRow];
 8001162:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	3338      	adds	r3, #56	@ 0x38
 800116a:	443b      	add	r3, r7
 800116c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( KEYPAD_PORT->IDR & (0x1 << pinR) ) {	// row returned high
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <Keypad_WhichKeyIsPressed+0x13c>)
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2101      	movs	r1, #1
 8001178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <Keypad_WhichKeyIsPressed+0xbc>
				bGotKey = 1;							// key found!
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
				break;
 800118a:	e00a      	b.n	80011a2 <Keypad_WhichKeyIsPressed+0xd2>
		for( iRow = 0; iRow < NUM_ROWS; iRow++ ){		// check each row
 800118c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800119a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800119e:	2b03      	cmp	r3, #3
 80011a0:	dddf      	ble.n	8001162 <Keypad_WhichKeyIsPressed+0x92>
			}
		}
		if ( bGotKey )
 80011a2:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10b      	bne.n	80011c2 <Keypad_WhichKeyIsPressed+0xf2>
	for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {
 80011aa:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80011b8:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 80011bc:	2b03      	cmp	r3, #3
 80011be:	ddae      	ble.n	800111e <Keypad_WhichKeyIsPressed+0x4e>
 80011c0:	e000      	b.n	80011c4 <Keypad_WhichKeyIsPressed+0xf4>
			break;
 80011c2:	bf00      	nop
	}
	if ( bGotKey ) {
 80011c4:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d016      	beq.n	80011fa <Keypad_WhichKeyIsPressed+0x12a>
		iKey = ( iRow * NUM_COLS ) + iCol + 1;  		// Gives location 1-16
 80011cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80011d8:	4413      	add	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t KEY_out = Keypad_CheckKeyPressed(iKey);	// get char constant
 80011e4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f811 	bl	8001210 <Keypad_CheckKeyPressed>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		return( KEY_out );                         		// encoded keypress
 80011f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80011f8:	e000      	b.n	80011fc <Keypad_WhichKeyIsPressed+0x12c>
	}
	return( -1 );                     					// failed
 80011fa:	23ff      	movs	r3, #255	@ 0xff

}
 80011fc:	4618      	mov	r0, r3
 80011fe:	373c      	adds	r7, #60	@ 0x3c
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	08004734 	.word	0x08004734
 8001208:	08004744 	.word	0x08004744
 800120c:	48000800 	.word	0x48000800

08001210 <Keypad_CheckKeyPressed>:

uint8_t Keypad_CheckKeyPressed (uint8_t iKey){
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	// Converts keypad location to its character
	uint8_t var;

	switch (iKey) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	3b01      	subs	r3, #1
 800121e:	2b0f      	cmp	r3, #15
 8001220:	d852      	bhi.n	80012c8 <Keypad_CheckKeyPressed+0xb8>
 8001222:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <Keypad_CheckKeyPressed+0x18>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001269 	.word	0x08001269
 800122c:	0800126f 	.word	0x0800126f
 8001230:	08001275 	.word	0x08001275
 8001234:	0800127b 	.word	0x0800127b
 8001238:	08001281 	.word	0x08001281
 800123c:	08001287 	.word	0x08001287
 8001240:	0800128d 	.word	0x0800128d
 8001244:	08001293 	.word	0x08001293
 8001248:	08001299 	.word	0x08001299
 800124c:	0800129f 	.word	0x0800129f
 8001250:	080012a5 	.word	0x080012a5
 8001254:	080012ab 	.word	0x080012ab
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012b7 	.word	0x080012b7
 8001260:	080012bd 	.word	0x080012bd
 8001264:	080012c3 	.word	0x080012c3
	case 0x01: //Column 1, Row 1
		var = ('1');
 8001268:	2331      	movs	r3, #49	@ 0x31
 800126a:	73fb      	strb	r3, [r7, #15]
		break;
 800126c:	e02f      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>
	case 0x02: //Column 2, Row 1
		var = ('2');
 800126e:	2332      	movs	r3, #50	@ 0x32
 8001270:	73fb      	strb	r3, [r7, #15]
		break;
 8001272:	e02c      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x03: //Column 3, Row 1
		var = ('3');
 8001274:	2333      	movs	r3, #51	@ 0x33
 8001276:	73fb      	strb	r3, [r7, #15]
		break;
 8001278:	e029      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x04: //Column 4, Row 1
		var = ('A');
 800127a:	2341      	movs	r3, #65	@ 0x41
 800127c:	73fb      	strb	r3, [r7, #15]
		break;
 800127e:	e026      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x05: //Column 1, Row 2
		var = ('4');
 8001280:	2334      	movs	r3, #52	@ 0x34
 8001282:	73fb      	strb	r3, [r7, #15]
		break;
 8001284:	e023      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x06: //Column 2, Row 2
		var = ('5');
 8001286:	2335      	movs	r3, #53	@ 0x35
 8001288:	73fb      	strb	r3, [r7, #15]
		break;
 800128a:	e020      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x07: //Column 3, Row 2
		var = ('6');
 800128c:	2336      	movs	r3, #54	@ 0x36
 800128e:	73fb      	strb	r3, [r7, #15]
		break;
 8001290:	e01d      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x08: //Column 4, Row 2
		var = ('B');
 8001292:	2342      	movs	r3, #66	@ 0x42
 8001294:	73fb      	strb	r3, [r7, #15]
		break;
 8001296:	e01a      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x09: //Column 1, Row 3
		var = ('7');
 8001298:	2337      	movs	r3, #55	@ 0x37
 800129a:	73fb      	strb	r3, [r7, #15]
		break;
 800129c:	e017      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0A: //Column 2, Row 3
		var = ('8');
 800129e:	2338      	movs	r3, #56	@ 0x38
 80012a0:	73fb      	strb	r3, [r7, #15]
		break;
 80012a2:	e014      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0B: //Column 3, Row 3
		var = ('9');
 80012a4:	2339      	movs	r3, #57	@ 0x39
 80012a6:	73fb      	strb	r3, [r7, #15]
		break;
 80012a8:	e011      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0C: //Column 4, Row 3
		var = ('C');
 80012aa:	2343      	movs	r3, #67	@ 0x43
 80012ac:	73fb      	strb	r3, [r7, #15]
		break;
 80012ae:	e00e      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0D: //Column 3, Row 1
		var = ('*');
 80012b0:	232a      	movs	r3, #42	@ 0x2a
 80012b2:	73fb      	strb	r3, [r7, #15]
		break;
 80012b4:	e00b      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0E: //Column 3, Row 2
		var = ('0');
 80012b6:	2330      	movs	r3, #48	@ 0x30
 80012b8:	73fb      	strb	r3, [r7, #15]
		break;
 80012ba:	e008      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x0F: //Column 3, Row 3
		var = ('#');
 80012bc:	2323      	movs	r3, #35	@ 0x23
 80012be:	73fb      	strb	r3, [r7, #15]
		break;
 80012c0:	e005      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	case 0x10: //Column 3, Row 4
		var = ('D');
 80012c2:	2344      	movs	r3, #68	@ 0x44
 80012c4:	73fb      	strb	r3, [r7, #15]
		break;
 80012c6:	e002      	b.n	80012ce <Keypad_CheckKeyPressed+0xbe>

	default:
		var = ('.'); // period for no press (error)
 80012c8:	232e      	movs	r3, #46	@ 0x2e
 80012ca:	73fb      	strb	r3, [r7, #15]
		break;
 80012cc:	bf00      	nop
	}

	return var;
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LCD_init>:


//COMMANDS ONLY WORK IF GPIO LCD DB PINS ARE 0,1,2,3


void LCD_init( void )  {
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b08a      	sub	sp, #40	@ 0x28
 80012e0:	af00      	add	r7, sp, #0
	// RCC & GPIO config for LCD port and pins
	RCC->AHB2ENR |= (LCD_PORT_CLOCK);
 80012e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001418 <LCD_init+0x13c>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001418 <LCD_init+0x13c>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Set pins to outputs
	uint32_t lcd_pins[] = LCD_PINS;
 80012ee:	4b4b      	ldr	r3, [pc, #300]	@ (800141c <LCD_init+0x140>)
 80012f0:	1d3c      	adds	r4, r7, #4
 80012f2:	461d      	mov	r5, r3
 80012f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012fc:	e884 0003 	stmia.w	r4, {r0, r1}
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
 8001304:	e05c      	b.n	80013c0 <LCD_init+0xe4>
		uint32_t pin = lcd_pins[i];
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	3328      	adds	r3, #40	@ 0x28
 800130c:	443b      	add	r3, r7
 800130e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001312:	61fb      	str	r3, [r7, #28]
		LCD_PORT->MODER &= ~(0x3 << (pin * 2));
 8001314:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <LCD_init+0x144>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	0052      	lsls	r2, r2, #1
 800131c:	2103      	movs	r1, #3
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	43d2      	mvns	r2, r2
 8001324:	4611      	mov	r1, r2
 8001326:	4a3e      	ldr	r2, [pc, #248]	@ (8001420 <LCD_init+0x144>)
 8001328:	400b      	ands	r3, r1
 800132a:	6013      	str	r3, [r2, #0]
		LCD_PORT->MODER |= (0x1 << (pin * 2));	//Output 01
 800132c:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <LCD_init+0x144>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4611      	mov	r1, r2
 800133c:	4a38      	ldr	r2, [pc, #224]	@ (8001420 <LCD_init+0x144>)
 800133e:	430b      	orrs	r3, r1
 8001340:	6013      	str	r3, [r2, #0]
		LCD_PORT->OTYPER &= ~(0x1 << pin);
 8001342:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <LCD_init+0x144>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2101      	movs	r1, #1
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	43d2      	mvns	r2, r2
 8001350:	4611      	mov	r1, r2
 8001352:	4a33      	ldr	r2, [pc, #204]	@ (8001420 <LCD_init+0x144>)
 8001354:	400b      	ands	r3, r1
 8001356:	6053      	str	r3, [r2, #4]
		LCD_PORT->OTYPER |= (0x0 << pin);		//0
 8001358:	4b31      	ldr	r3, [pc, #196]	@ (8001420 <LCD_init+0x144>)
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <LCD_init+0x144>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	6053      	str	r3, [r2, #4]
		LCD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8001360:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <LCD_init+0x144>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	2103      	movs	r1, #3
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	43d2      	mvns	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4a2b      	ldr	r2, [pc, #172]	@ (8001420 <LCD_init+0x144>)
 8001374:	400b      	ands	r3, r1
 8001376:	6093      	str	r3, [r2, #8]
		LCD_PORT->OSPEEDR |= (0x3 << (pin * 2));//Highest speed
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <LCD_init+0x144>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	0052      	lsls	r2, r2, #1
 8001380:	2103      	movs	r1, #3
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4611      	mov	r1, r2
 8001388:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <LCD_init+0x144>)
 800138a:	430b      	orrs	r3, r1
 800138c:	6093      	str	r3, [r2, #8]
		LCD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <LCD_init+0x144>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	2103      	movs	r1, #3
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	43d2      	mvns	r2, r2
 800139e:	4611      	mov	r1, r2
 80013a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <LCD_init+0x144>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	60d3      	str	r3, [r2, #12]
		//LCD_PORT->PUPDR |= (0x2 << (pin * 2));	//PULL DOWN (no false highs)
		LCD_PORT->BRR |= (0x1 << (pin * 1));	//initialize off
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <LCD_init+0x144>)
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	2101      	movs	r1, #1
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	4611      	mov	r1, r2
 80013b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001420 <LCD_init+0x144>)
 80013b6:	430b      	orrs	r3, r1
 80013b8:	6293      	str	r3, [r2, #40]	@ 0x28
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d99f      	bls.n	8001306 <LCD_init+0x2a>
	}

	delay_us( 40000 );                     	// power-up wait 40 ms
 80013c6:	f649 4040 	movw	r0, #40000	@ 0x9c40
 80013ca:	f7ff fd25 	bl	8000e18 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	e008      	b.n	80013e6 <LCD_init+0x10a>
		LCD_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 80013d4:	2030      	movs	r0, #48	@ 0x30
 80013d6:	f000 f83d 	bl	8001454 <LCD_4b_command>
		delay_us( 200 );
 80013da:	20c8      	movs	r0, #200	@ 0xc8
 80013dc:	f7ff fd1c 	bl	8000e18 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	3301      	adds	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	ddf3      	ble.n	80013d4 <LCD_init+0xf8>
	}
	LCD_4b_command( 0x20 ); 		// fcn set #4: 4b cmd set 4b mode
 80013ec:	2020      	movs	r0, #32
 80013ee:	f000 f831 	bl	8001454 <LCD_4b_command>
	delay_us( 40 );         		// remainder of LCD init removed
 80013f2:	2028      	movs	r0, #40	@ 0x28
 80013f4:	f7ff fd10 	bl	8000e18 <delay_us>
	LCD_command( 0x28 );			//Selects 2-line mode instead of 1-line
 80013f8:	2028      	movs	r0, #40	@ 0x28
 80013fa:	f000 f84b 	bl	8001494 <LCD_command>
	LCD_command( CURSOR_SHIFT_L );			//Shift cursor to the left
 80013fe:	2010      	movs	r0, #16
 8001400:	f000 f848 	bl	8001494 <LCD_command>
	LCD_command( CURSOR_ON );		//Display, cursor, cursor position on
 8001404:	200f      	movs	r0, #15
 8001406:	f000 f845 	bl	8001494 <LCD_command>
	LCD_command( CURSOR_RIGHT );	//Cursor moves right, no shift
 800140a:	2006      	movs	r0, #6
 800140c:	f000 f842 	bl	8001494 <LCD_command>
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bdb0      	pop	{r4, r5, r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	08004754 	.word	0x08004754
 8001420:	48000c00 	.word	0x48000c00

08001424 <LCD_pulse_ENA>:

void LCD_pulse_ENA( void )  {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	// ENAble line sends command on falling edge
	// set to restore default then clear to trigger
	LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <LCD_pulse_ENA+0x2c>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <LCD_pulse_ENA+0x2c>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // TDDR > 320 ns
 8001434:	2064      	movs	r0, #100	@ 0x64
 8001436:	f7ff fcef 	bl	8000e18 <delay_us>
	LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 800143a:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <LCD_pulse_ENA+0x2c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <LCD_pulse_ENA+0x2c>)
 8001440:	f023 0310 	bic.w	r3, r3, #16
 8001444:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // low values flakey, see A3:p.1
 8001446:	2064      	movs	r0, #100	@ 0x64
 8001448:	f7ff fce6 	bl	8000e18 <delay_us>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	48000c00 	.word	0x48000c00

08001454 <LCD_4b_command>:

void LCD_4b_command( uint8_t command )  {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	// LCD command using high nibble only - used for 'wake-up' 0x30 commands
	LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <LCD_4b_command+0x3c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <LCD_4b_command+0x3c>)
 8001464:	f023 030f 	bic.w	r3, r3, #15
 8001468:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command >> 4 );   	// DATA = command
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <LCD_4b_command+0x3c>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	0912      	lsrs	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	4611      	mov	r1, r2
 8001476:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <LCD_4b_command+0x3c>)
 8001478:	430b      	orrs	r3, r1
 800147a:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 800147c:	2064      	movs	r0, #100	@ 0x64
 800147e:	f7ff fccb 	bl	8000e18 <delay_us>
	LCD_pulse_ENA( );						//send
 8001482:	f7ff ffcf 	bl	8001424 <LCD_pulse_ENA>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	48000c00 	.word	0x48000c00

08001494 <LCD_command>:

void LCD_command( uint8_t command )  {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	// send command to LCD in 4-bit instruction mode
	// HIGH nibble then LOW nibble, timing sensitive

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <LCD_command+0x78>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a1a      	ldr	r2, [pc, #104]	@ (800150c <LCD_command+0x78>)
 80014a4:	f023 030f 	bic.w	r3, r3, #15
 80014a8:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <LCD_command+0x78>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4914      	ldr	r1, [pc, #80]	@ (800150c <LCD_command+0x78>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 80014be:	2064      	movs	r0, #100	@ 0x64
 80014c0:	f7ff fcaa 	bl	8000e18 <delay_us>

	LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 80014c4:	f7ff ffae 	bl	8001424 <LCD_pulse_ENA>

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <LCD_command+0x78>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <LCD_command+0x78>)
 80014ce:	f023 030f 	bic.w	r3, r3, #15
 80014d2:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <LCD_command+0x78>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490b      	ldr	r1, [pc, #44]	@ (800150c <LCD_command+0x78>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 80014e4:	2064      	movs	r0, #100	@ 0x64
 80014e6:	f7ff fc97 	bl	8000e18 <delay_us>
	LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 80014ea:	f7ff ff9b 	bl	8001424 <LCD_pulse_ENA>
	if ( (command == CLEAR_HOME) || (command == RETURN_HOME) ) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d002      	beq.n	80014fa <LCD_command+0x66>
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d103      	bne.n	8001502 <LCD_command+0x6e>
		delay_us( 1000 );	// These commands need more time
 80014fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fe:	f7ff fc8b 	bl	8000e18 <delay_us>
	}
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	48000c00 	.word	0x48000c00

08001510 <LCD_write_char>:

void LCD_write_char( uint8_t letter )  { //0x41 is A
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	// calls LCD_command() w/char data
	LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 800151a:	4b0d      	ldr	r3, [pc, #52]	@ (8001550 <LCD_write_char+0x40>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <LCD_write_char+0x40>)
 8001520:	f043 0320 	orr.w	r3, r3, #32
 8001524:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 8001526:	2064      	movs	r0, #100	@ 0x64
 8001528:	f7ff fc76 	bl	8000e18 <delay_us>
	LCD_command( letter );             // character to print
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ffb0 	bl	8001494 <LCD_command>
	LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <LCD_write_char+0x40>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <LCD_write_char+0x40>)
 800153a:	f023 0320 	bic.w	r3, r3, #32
 800153e:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f7ff fc69 	bl	8000e18 <delay_us>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	48000c00 	.word	0x48000c00

08001554 <LCD_write_string>:

void LCD_write_string( uint8_t sentence[] ) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	// extracts each character from a string and passes it to LCD_write_char()
	uint8_t len = strlen(sentence);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7fe fe47 	bl	80001f0 <strlen>
 8001562:	4603      	mov	r3, r0
 8001564:	73bb      	strb	r3, [r7, #14]
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e009      	b.n	8001580 <LCD_write_string+0x2c>
		LCD_write_char( sentence[i] );	// Write each character to LCD
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffcb 	bl	8001510 <LCD_write_char>
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	3301      	adds	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3f1      	bcc.n	800156c <LCD_write_string+0x18>
	}
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800159a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800159e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015aa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015ae:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80015b2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015ba:	e000      	b.n	80015be <ITM_SendChar+0x2c>
    {
      __NOP();
 80015bc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015be:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f9      	beq.n	80015bc <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80015d2:	687b      	ldr	r3, [r7, #4]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <main>:
uint8_t digit_count = 3;
uint16_t millivolt = 0;
//uint16_t dac_command = 0;

void main(void)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	af00      	add	r7, sp, #0

    /* Configure the system clock */

	HAL_Init();
 80015e4:	f000 fa3f 	bl	8001a66 <HAL_Init>
	SystemClock_Config();
 80015e8:	f000 f8be 	bl	8001768 <SystemClock_Config>
  Keypad_Config();
 80015ec:	f7ff fc42 	bl	8000e74 <Keypad_Config>
  LCD_init();
 80015f0:	f7ff fe74 	bl	80012dc <LCD_init>
  DAC_init();
 80015f4:	f7ff fae0 	bl	8000bb8 <DAC_init>

  delay_us(2000);
 80015f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015fc:	f7ff fc0c 	bl	8000e18 <delay_us>
	LCD_command( CURSOR_SHIFT_L );		// Shift cursor to the left
 8001600:	2010      	movs	r0, #16
 8001602:	f7ff ff47 	bl	8001494 <LCD_command>
	LCD_command( CURSOR_OFF );			// Display, cursor, position on
 8001606:	200c      	movs	r0, #12
 8001608:	f7ff ff44 	bl	8001494 <LCD_command>
	LCD_command( CURSOR_RIGHT );		// Cursor moves right, no shift
 800160c:	2006      	movs	r0, #6
 800160e:	f7ff ff41 	bl	8001494 <LCD_command>
	LCD_command( CLEAR_HOME );
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff ff3e 	bl	8001494 <LCD_command>
	LCD_write_string("EE 329 A5 DAC");
 8001618:	484b      	ldr	r0, [pc, #300]	@ (8001748 <main+0x168>)
 800161a:	f7ff ff9b 	bl	8001554 <LCD_write_string>
	LCD_command(LINE_TWO);
 800161e:	20c0      	movs	r0, #192	@ 0xc0
 8001620:	f7ff ff38 	bl	8001494 <LCD_command>
	LCD_write_string("*=reset V=0.00V");
 8001624:	4849      	ldr	r0, [pc, #292]	@ (800174c <main+0x16c>)
 8001626:	f7ff ff95 	bl	8001554 <LCD_write_string>
  while (1)
  {



	  if (Keypad_IsAnyKeyPressed()) {
 800162a:	f7ff fd05 	bl	8001038 <Keypad_IsAnyKeyPressed>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d065      	beq.n	8001700 <main+0x120>
		  pad = Keypad_WhichKeyIsPressed();
 8001634:	f7ff fd4c 	bl	80010d0 <Keypad_WhichKeyIsPressed>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b44      	ldr	r3, [pc, #272]	@ (8001750 <main+0x170>)
 800163e:	701a      	strb	r2, [r3, #0]
		  printf("Key pressed is %d\n", pad);
 8001640:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <main+0x170>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	4843      	ldr	r0, [pc, #268]	@ (8001754 <main+0x174>)
 8001648:	f001 fa94 	bl	8002b74 <iprintf>
		  if ( pad == 42 ) {
 800164c:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <main+0x170>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b2a      	cmp	r3, #42	@ 0x2a
 8001652:	d106      	bne.n	8001662 <main+0x82>
			  millivolt = 0;
 8001654:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <main+0x178>)
 8001656:	2200      	movs	r2, #0
 8001658:	801a      	strh	r2, [r3, #0]
			  digit_count = 3;
 800165a:	4b40      	ldr	r3, [pc, #256]	@ (800175c <main+0x17c>)
 800165c:	2203      	movs	r2, #3
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e04e      	b.n	8001700 <main+0x120>
		  }
		  else if ( (pad > 57) || (pad < 46) ) {
 8001662:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <main+0x170>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b39      	cmp	r3, #57	@ 0x39
 8001668:	d84a      	bhi.n	8001700 <main+0x120>
 800166a:	4b39      	ldr	r3, [pc, #228]	@ (8001750 <main+0x170>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001670:	d946      	bls.n	8001700 <main+0x120>
			  ; // ignore key press
		  }
		  else {
			  printf("Key pressed is %d\n", (pad-'0'));
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <main+0x170>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b30      	subs	r3, #48	@ 0x30
 8001678:	4619      	mov	r1, r3
 800167a:	4836      	ldr	r0, [pc, #216]	@ (8001754 <main+0x174>)
 800167c:	f001 fa7a 	bl	8002b74 <iprintf>
			  millivolt += ((pad - '0') * (pow(10, digit_count)));
 8001680:	4b33      	ldr	r3, [pc, #204]	@ (8001750 <main+0x170>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3b30      	subs	r3, #48	@ 0x30
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff5c 	bl	8000544 <__aeabi_i2d>
 800168c:	4604      	mov	r4, r0
 800168e:	460d      	mov	r5, r1
 8001690:	4b32      	ldr	r3, [pc, #200]	@ (800175c <main+0x17c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_ui2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	ec43 2b11 	vmov	d1, r2, r3
 80016a2:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8001740 <main+0x160>
 80016a6:	f002 f8d3 	bl	8003850 <pow>
 80016aa:	ec53 2b10 	vmov	r2, r3, d0
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe ffb1 	bl	8000618 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4614      	mov	r4, r2
 80016bc:	461d      	mov	r5, r3
 80016be:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <main+0x178>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff3e 	bl	8000544 <__aeabi_i2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdec 	bl	80002ac <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa4c 	bl	8000b78 <__aeabi_d2uiz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <main+0x178>)
 80016e6:	801a      	strh	r2, [r3, #0]
			  digit_count --;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <main+0x17c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <main+0x17c>)
 80016f2:	701a      	strb	r2, [r3, #0]
			  printf("Millivolt is %d\n", millivolt);
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <main+0x178>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4819      	ldr	r0, [pc, #100]	@ (8001760 <main+0x180>)
 80016fc:	f001 fa3a 	bl	8002b74 <iprintf>

		  }
	  }
	  if (digit_count == 0) {
 8001700:	4b16      	ldr	r3, [pc, #88]	@ (800175c <main+0x17c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d190      	bne.n	800162a <main+0x4a>
		  DAC_write( DAC_volt_conv( millivolt ) );
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <main+0x178>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb45 	bl	8000d9c <DAC_volt_conv>
 8001712:	4603      	mov	r3, r0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb65 	bl	8000de4 <DAC_write>
		  printf("Command sent is %d\n", DAC_volt_conv( millivolt ));
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <main+0x178>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fb3c 	bl	8000d9c <DAC_volt_conv>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	480e      	ldr	r0, [pc, #56]	@ (8001764 <main+0x184>)
 800172a:	f001 fa23 	bl	8002b74 <iprintf>
		  digit_count = 3;
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <main+0x17c>)
 8001730:	2203      	movs	r2, #3
 8001732:	701a      	strb	r2, [r3, #0]
		  millivolt = 0;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <main+0x178>)
 8001736:	2200      	movs	r2, #0
 8001738:	801a      	strh	r2, [r3, #0]
	  if (Keypad_IsAnyKeyPressed()) {
 800173a:	e776      	b.n	800162a <main+0x4a>
 800173c:	f3af 8000 	nop.w
 8001740:	00000000 	.word	0x00000000
 8001744:	40240000 	.word	0x40240000
 8001748:	0800476c 	.word	0x0800476c
 800174c:	0800477c 	.word	0x0800477c
 8001750:	2000009d 	.word	0x2000009d
 8001754:	0800478c 	.word	0x0800478c
 8001758:	2000009e 	.word	0x2000009e
 800175c:	20000000 	.word	0x20000000
 8001760:	080047a0 	.word	0x080047a0
 8001764:	080047b4 	.word	0x080047b4

08001768 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b096      	sub	sp, #88	@ 0x58
 800176c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	2244      	movs	r2, #68	@ 0x44
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f001 fa51 	bl	8002c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177c:	463b      	mov	r3, r7
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800178a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800178e:	f000 fad3 	bl	8001d38 <HAL_PWREx_ControlVoltageScaling>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001798:	f000 f849 	bl	800182e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800179c:	2310      	movs	r3, #16
 800179e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017a8:	2360      	movs	r3, #96	@ 0x60
 80017aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fb15 	bl	8001de4 <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80017c0:	f000 f835 	bl	800182e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017da:	463b      	mov	r3, r7
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 ff1a 	bl	8002618 <HAL_RCC_ClockConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <SystemClock_Config+0x86>
  {
    Error_Handler();
 80017ea:	f000 f820 	bl	800182e <Error_Handler>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3758      	adds	r7, #88	@ 0x58
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff febe 	bl	8001592 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
	}
	return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001832:	b672      	cpsid	i
}
 8001834:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001836:	bf00      	nop
 8001838:	e7fd      	b.n	8001836 <Error_Handler+0x8>
	...

0800183c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	@ (8001880 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	4a0e      	ldr	r2, [pc, #56]	@ (8001880 <HAL_MspInit+0x44>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6613      	str	r3, [r2, #96]	@ 0x60
 800184e:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_MspInit+0x44>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6593      	str	r3, [r2, #88]	@ 0x58
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_MspInit+0x44>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <NMI_Handler+0x4>

0800188c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <MemManage_Handler+0x4>

0800189c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <UsageFault_Handler+0x4>

080018ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018da:	f000 f919 	bl	8001b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b086      	sub	sp, #24
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e00a      	b.n	800190a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f4:	f3af 8000 	nop.w
 80018f8:	4601      	mov	r1, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	60ba      	str	r2, [r7, #8]
 8001900:	b2ca      	uxtb	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf0      	blt.n	80018f4 <_read+0x12>
  }

  return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:
  }
  return len;
}

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	605a      	str	r2, [r3, #4]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f001 f982 	bl	8002cbc <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20050000 	.word	0x20050000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	200000a0 	.word	0x200000a0
 80019ec:	200001f8 	.word	0x200001f8

080019f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a18:	f7ff ffea 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a1e:	490d      	ldr	r1, [pc, #52]	@ (8001a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <LoopForever+0xe>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a34:	4c0a      	ldr	r4, [pc, #40]	@ (8001a60 <LoopForever+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a42:	f001 f941 	bl	8002cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a46:	f7ff fdcb 	bl	80015e0 <main>

08001a4a <LoopForever>:

LoopForever:
    b LoopForever
 8001a4a:	e7fe      	b.n	8001a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a54:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a58:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 8001a5c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a60:	200001f4 	.word	0x200001f4

08001a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a64:	e7fe      	b.n	8001a64 <ADC1_2_IRQHandler>

08001a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f91f 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 f80e 	bl	8001a98 <HAL_InitTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e001      	b.n	8001a8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a88:	f7ff fed8 	bl	800183c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_InitTick+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_InitTick+0x70>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_InitTick+0x6c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f91d 	bl	8001d02 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d809      	bhi.n	8001ae8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f000 f8f5 	bl	8001cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_InitTick+0x74>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e007      	b.n	8001af8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
 8001aec:	e004      	b.n	8001af8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e001      	b.n	8001af8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c
 8001b34:	200000a4 	.word	0x200000a4

08001b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	200000a4 	.word	0x200000a4

08001b50 <__NVIC_SetPriorityGrouping>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_SetPriority>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff47 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff5c 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffb0 	bl	8001c70 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40007000 	.word	0x40007000

08001d38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d46:	d130      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d48:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d54:	d038      	beq.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2232      	movs	r2, #50	@ 0x32
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7c:	e002      	b.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d84:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d90:	d102      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f2      	bne.n	8001d7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da4:	d110      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e00f      	b.n	8001dca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db6:	d007      	beq.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dc0:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	431bde83 	.word	0x431bde83

08001de4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f000 bc08 	b.w	8002608 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df8:	4b96      	ldr	r3, [pc, #600]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e02:	4b94      	ldr	r3, [pc, #592]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80e4 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4c>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b0c      	cmp	r3, #12
 8001e24:	f040 808b 	bne.w	8001f3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	f040 8087 	bne.w	8001f3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e30:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_OscConfig+0x64>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e3df      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_RCC_OscConfig+0x7e>
 8001e58:	4b7e      	ldr	r3, [pc, #504]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_OscConfig+0x8a>
 8001e62:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d223      	bcs.n	8001eba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fd5a 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e3c0      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e86:	4b73      	ldr	r3, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b70      	ldr	r3, [pc, #448]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	496d      	ldr	r1, [pc, #436]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	4968      	ldr	r1, [pc, #416]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e025      	b.n	8001f06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eba:	4b66      	ldr	r3, [pc, #408]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a65      	ldr	r2, [pc, #404]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b63      	ldr	r3, [pc, #396]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4960      	ldr	r1, [pc, #384]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	495b      	ldr	r1, [pc, #364]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fd1a 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e380      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f06:	f000 fc87 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	4950      	ldr	r1, [pc, #320]	@ (8002058 <HAL_RCC_OscConfig+0x274>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	4a4e      	ldr	r2, [pc, #312]	@ (800205c <HAL_RCC_OscConfig+0x278>)
 8001f24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fdb4 	bl	8001a98 <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d052      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	e364      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d032      	beq.n	8001fac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f46:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a42      	ldr	r2, [pc, #264]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fdf1 	bl	8001b38 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5a:	f7ff fded 	bl	8001b38 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e34d      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f78:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a35      	ldr	r2, [pc, #212]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f043 0308 	orr.w	r3, r3, #8
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4930      	ldr	r1, [pc, #192]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f96:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	492b      	ldr	r1, [pc, #172]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e01a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fac:	4b29      	ldr	r3, [pc, #164]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fdbe 	bl	8001b38 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fdba 	bl	8001b38 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e31a      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1dc>
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d073      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_OscConfig+0x21c>
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d10e      	bne.n	8002018 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d063      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d15f      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e2f7      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x24c>
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a0b      	ldr	r2, [pc, #44]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e025      	b.n	800207c <HAL_RCC_OscConfig+0x298>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002038:	d114      	bne.n	8002064 <HAL_RCC_OscConfig+0x280>
 800203a:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a02      	ldr	r2, [pc, #8]	@ (8002054 <HAL_RCC_OscConfig+0x270>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e013      	b.n	800207c <HAL_RCC_OscConfig+0x298>
 8002054:	40021000 	.word	0x40021000
 8002058:	080047c8 	.word	0x080047c8
 800205c:	20000004 	.word	0x20000004
 8002060:	20000008 	.word	0x20000008
 8002064:	4ba0      	ldr	r3, [pc, #640]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a9f      	ldr	r2, [pc, #636]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b9d      	ldr	r3, [pc, #628]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a9c      	ldr	r2, [pc, #624]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fd58 	bl	8001b38 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fd54 	bl	8001b38 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e2b4      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209e:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x2a8>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff fd44 	bl	8001b38 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff fd40 	bl	8001b38 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2a0      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c6:	4b88      	ldr	r3, [pc, #544]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2d0>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d060      	beq.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_OscConfig+0x310>
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d116      	bne.n	8002122 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f4:	4b7c      	ldr	r3, [pc, #496]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_OscConfig+0x328>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e27d      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b76      	ldr	r3, [pc, #472]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	4973      	ldr	r1, [pc, #460]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	e040      	b.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d023      	beq.n	8002172 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212a:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7ff fcff 	bl	8001b38 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7ff fcfb 	bl	8001b38 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e25b      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002150:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b62      	ldr	r3, [pc, #392]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	495f      	ldr	r1, [pc, #380]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
 8002170:	e018      	b.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b5d      	ldr	r3, [pc, #372]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a5c      	ldr	r2, [pc, #368]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002178:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800217c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7ff fcdb 	bl	8001b38 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff fcd7 	bl	8001b38 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e237      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002198:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d03c      	beq.n	800222a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b8:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021be:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7ff fcb6 	bl	8001b38 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7ff fcb2 	bl	8001b38 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e212      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e2:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ef      	beq.n	80021d0 <HAL_RCC_OscConfig+0x3ec>
 80021f0:	e01b      	b.n	800222a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f8:	4a3b      	ldr	r2, [pc, #236]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fc99 	bl	8001b38 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff fc95 	bl	8001b38 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1f5      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800221c:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ef      	bne.n	800220a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a6 	beq.w	8002384 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800223c:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	4a26      	ldr	r2, [pc, #152]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 800224e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002252:	6593      	str	r3, [r2, #88]	@ 0x58
 8002254:	4b24      	ldr	r3, [pc, #144]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002260:	2301      	movs	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <HAL_RCC_OscConfig+0x508>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d118      	bne.n	80022a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_RCC_OscConfig+0x508>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_RCC_OscConfig+0x508>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227c:	f7ff fc5c 	bl	8001b38 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002284:	f7ff fc58 	bl	8001b38 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1b8      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_RCC_OscConfig+0x508>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x4d8>
 80022aa:	4b0f      	ldr	r3, [pc, #60]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b0:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ba:	e029      	b.n	8002310 <HAL_RCC_OscConfig+0x52c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d115      	bne.n	80022f0 <HAL_RCC_OscConfig+0x50c>
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022da:	4a03      	ldr	r2, [pc, #12]	@ (80022e8 <HAL_RCC_OscConfig+0x504>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022e4:	e014      	b.n	8002310 <HAL_RCC_OscConfig+0x52c>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002300:	4b99      	ldr	r3, [pc, #612]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a98      	ldr	r2, [pc, #608]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fc0e 	bl	8001b38 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7ff fc0a 	bl	8001b38 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e168      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002336:	4b8c      	ldr	r3, [pc, #560]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ed      	beq.n	8002320 <HAL_RCC_OscConfig+0x53c>
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff fbf7 	bl	8001b38 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7ff fbf3 	bl	8001b38 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e151      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002364:	4b80      	ldr	r3, [pc, #512]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ed      	bne.n	800234e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b7b      	ldr	r3, [pc, #492]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a7a      	ldr	r2, [pc, #488]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03c      	beq.n	800240a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002398:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 800239a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800239e:	4a72      	ldr	r2, [pc, #456]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7ff fbc6 	bl	8001b38 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b0:	f7ff fbc2 	bl	8001b38 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e122      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023c2:	4b69      	ldr	r3, [pc, #420]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80023c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCC_OscConfig+0x5cc>
 80023d0:	e01b      	b.n	800240a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80023d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d8:	4a63      	ldr	r2, [pc, #396]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff fba9 	bl	8001b38 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ea:	f7ff fba5 	bl	8001b38 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e105      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80023fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ef      	bne.n	80023ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 80f9 	beq.w	8002606 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	2b02      	cmp	r3, #2
 800241a:	f040 80cf 	bne.w	80025bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800241e:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	429a      	cmp	r2, r3
 8002430:	d12c      	bne.n	800248c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	3b01      	subs	r3, #1
 800243e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d123      	bne.n	800248c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d11b      	bne.n	800248c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d113      	bne.n	800248c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	3b01      	subs	r3, #1
 8002472:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d109      	bne.n	800248c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	3b01      	subs	r3, #1
 8002486:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d071      	beq.n	8002570 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d068      	beq.n	8002564 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002492:	4b35      	ldr	r3, [pc, #212]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800249e:	4b32      	ldr	r3, [pc, #200]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0ac      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80024b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ba:	f7ff fb3d 	bl	8001b38 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff fb39 	bl	8001b38 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e099      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d4:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f0      	bne.n	80024c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <HAL_RCC_OscConfig+0x788>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024fa:	0212      	lsls	r2, r2, #8
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002502:	0852      	lsrs	r2, r2, #1
 8002504:	3a01      	subs	r2, #1
 8002506:	0552      	lsls	r2, r2, #21
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800250e:	0852      	lsrs	r2, r2, #1
 8002510:	3a01      	subs	r2, #1
 8002512:	0652      	lsls	r2, r2, #25
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800251a:	06d2      	lsls	r2, r2, #27
 800251c:	430a      	orrs	r2, r1
 800251e:	4912      	ldr	r1, [pc, #72]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002520:	4313      	orrs	r3, r2
 8002522:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a0f      	ldr	r2, [pc, #60]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a0c      	ldr	r2, [pc, #48]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800253a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800253c:	f7ff fafc 	bl	8001b38 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff faf8 	bl	8001b38 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e058      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HAL_RCC_OscConfig+0x784>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002562:	e050      	b.n	8002606 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e04f      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
 8002568:	40021000 	.word	0x40021000
 800256c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002570:	4b27      	ldr	r3, [pc, #156]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d144      	bne.n	8002606 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800257c:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a23      	ldr	r2, [pc, #140]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 8002582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002588:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 800258e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002592:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002594:	f7ff fad0 	bl	8001b38 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7ff facc 	bl	8001b38 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e02c      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x7b8>
 80025ba:	e024      	b.n	8002606 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d01f      	beq.n	8002602 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7ff fab3 	bl	8001b38 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff faaf 	bl	8001b38 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4905      	ldr	r1, [pc, #20]	@ (8002610 <HAL_RCC_OscConfig+0x82c>)
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <HAL_RCC_OscConfig+0x830>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e001      	b.n	8002606 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	feeefffc 	.word	0xfeeefffc

08002618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0e7      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b72      	ldr	r3, [pc, #456]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4970      	ldr	r1, [pc, #448]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b6e      	ldr	r3, [pc, #440]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0cf      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002674:	429a      	cmp	r2, r3
 8002676:	d908      	bls.n	800268a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b63      	ldr	r3, [pc, #396]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4960      	ldr	r1, [pc, #384]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04c      	beq.n	8002730 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269e:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0a6      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	4b54      	ldr	r3, [pc, #336]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d115      	bne.n	80026ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e09a      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e08e      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026de:	4b4a      	ldr	r3, [pc, #296]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e086      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b46      	ldr	r3, [pc, #280]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4943      	ldr	r1, [pc, #268]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7ff fa1a 	bl	8001b38 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	e00a      	b.n	800271e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002708:	f7ff fa16 	bl	8001b38 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e06e      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	4b3a      	ldr	r3, [pc, #232]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 020c 	and.w	r2, r3, #12
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	429a      	cmp	r2, r3
 800272e:	d1eb      	bne.n	8002708 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	4b31      	ldr	r3, [pc, #196]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002748:	429a      	cmp	r2, r3
 800274a:	d208      	bcs.n	800275e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	492b      	ldr	r1, [pc, #172]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800275e:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d210      	bcs.n	800278e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276c:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f023 0207 	bic.w	r2, r3, #7
 8002774:	4923      	ldr	r1, [pc, #140]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277c:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCC_ClockConfig+0x1ec>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e036      	b.n	80027fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279a:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4918      	ldr	r1, [pc, #96]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4910      	ldr	r1, [pc, #64]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027cc:	f000 f824 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	490b      	ldr	r1, [pc, #44]	@ (800280c <HAL_RCC_ClockConfig+0x1f4>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_RCC_ClockConfig+0x1f8>)
 80027ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x1fc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f951 	bl	8001a98 <HAL_InitTick>
 80027f6:	4603      	mov	r3, r0
 80027f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80027fa:	7afb      	ldrb	r3, [r7, #11]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40022000 	.word	0x40022000
 8002808:	40021000 	.word	0x40021000
 800280c:	080047c8 	.word	0x080047c8
 8002810:	20000004 	.word	0x20000004
 8002814:	20000008 	.word	0x20000008

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002826:	4b3e      	ldr	r3, [pc, #248]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002830:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x34>
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d121      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d11e      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800284c:	4b34      	ldr	r3, [pc, #208]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d107      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002858:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 800285a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e005      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002868:	4b2d      	ldr	r3, [pc, #180]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002874:	4a2b      	ldr	r2, [pc, #172]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10d      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d102      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002890:	4b25      	ldr	r3, [pc, #148]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x110>)
 8002892:	61bb      	str	r3, [r7, #24]
 8002894:	e004      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800289c:	4b23      	ldr	r3, [pc, #140]	@ (800292c <HAL_RCC_GetSysClockFreq+0x114>)
 800289e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d134      	bne.n	8002910 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d003      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0xa6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0xac>
 80028bc:	e005      	b.n	80028ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028be:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x110>)
 80028c0:	617b      	str	r3, [r7, #20]
      break;
 80028c2:	e005      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_GetSysClockFreq+0x114>)
 80028c6:	617b      	str	r3, [r7, #20]
      break;
 80028c8:	e002      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	617b      	str	r3, [r7, #20]
      break;
 80028ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d0:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	3301      	adds	r3, #1
 80028dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028de:	4b10      	ldr	r3, [pc, #64]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	fb03 f202 	mul.w	r2, r3, r2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	0e5b      	lsrs	r3, r3, #25
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	3301      	adds	r3, #1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002910:	69bb      	ldr	r3, [r7, #24]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	080047d8 	.word	0x080047d8
 8002928:	00f42400 	.word	0x00f42400
 800292c:	007a1200 	.word	0x007a1200

08002930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800293c:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002948:	f7ff f9e8 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 800294c:	6178      	str	r0, [r7, #20]
 800294e:	e014      	b.n	800297a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	4a24      	ldr	r2, [pc, #144]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	@ 0x58
 800295c:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002968:	f7ff f9d8 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 800296c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002980:	d10b      	bne.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b80      	cmp	r3, #128	@ 0x80
 8002986:	d919      	bls.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2ba0      	cmp	r3, #160	@ 0xa0
 800298c:	d902      	bls.n	8002994 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800298e:	2302      	movs	r3, #2
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e013      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002994:	2301      	movs	r3, #1
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e010      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	@ 0x80
 800299e:	d902      	bls.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029a0:	2303      	movs	r3, #3
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e00a      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b80      	cmp	r3, #128	@ 0x80
 80029aa:	d102      	bne.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029ac:	2302      	movs	r3, #2
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e004      	b.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b70      	cmp	r3, #112	@ 0x70
 80029b6:	d101      	bne.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4909      	ldr	r1, [pc, #36]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029cc:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <std>:
 80029f0:	2300      	movs	r3, #0
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	e9c0 3300 	strd	r3, r3, [r0]
 80029fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029fe:	6083      	str	r3, [r0, #8]
 8002a00:	8181      	strh	r1, [r0, #12]
 8002a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a04:	81c2      	strh	r2, [r0, #14]
 8002a06:	6183      	str	r3, [r0, #24]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	305c      	adds	r0, #92	@ 0x5c
 8002a0e:	f000 f906 	bl	8002c1e <memset>
 8002a12:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <std+0x58>)
 8002a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <std+0x5c>)
 8002a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <std+0x60>)
 8002a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <std+0x64>)
 8002a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <std+0x68>)
 8002a24:	6224      	str	r4, [r4, #32]
 8002a26:	429c      	cmp	r4, r3
 8002a28:	d006      	beq.n	8002a38 <std+0x48>
 8002a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a2e:	4294      	cmp	r4, r2
 8002a30:	d002      	beq.n	8002a38 <std+0x48>
 8002a32:	33d0      	adds	r3, #208	@ 0xd0
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d105      	bne.n	8002a44 <std+0x54>
 8002a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a40:	f000 b966 	b.w	8002d10 <__retarget_lock_init_recursive>
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	bf00      	nop
 8002a48:	08002b99 	.word	0x08002b99
 8002a4c:	08002bbb 	.word	0x08002bbb
 8002a50:	08002bf3 	.word	0x08002bf3
 8002a54:	08002c17 	.word	0x08002c17
 8002a58:	200000a8 	.word	0x200000a8

08002a5c <stdio_exit_handler>:
 8002a5c:	4a02      	ldr	r2, [pc, #8]	@ (8002a68 <stdio_exit_handler+0xc>)
 8002a5e:	4903      	ldr	r1, [pc, #12]	@ (8002a6c <stdio_exit_handler+0x10>)
 8002a60:	4803      	ldr	r0, [pc, #12]	@ (8002a70 <stdio_exit_handler+0x14>)
 8002a62:	f000 b869 	b.w	8002b38 <_fwalk_sglue>
 8002a66:	bf00      	nop
 8002a68:	20000010 	.word	0x20000010
 8002a6c:	080035b1 	.word	0x080035b1
 8002a70:	20000020 	.word	0x20000020

08002a74 <cleanup_stdio>:
 8002a74:	6841      	ldr	r1, [r0, #4]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <cleanup_stdio+0x34>)
 8002a78:	4299      	cmp	r1, r3
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	d001      	beq.n	8002a84 <cleanup_stdio+0x10>
 8002a80:	f000 fd96 	bl	80035b0 <_fflush_r>
 8002a84:	68a1      	ldr	r1, [r4, #8]
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <cleanup_stdio+0x38>)
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d002      	beq.n	8002a92 <cleanup_stdio+0x1e>
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f000 fd8f 	bl	80035b0 <_fflush_r>
 8002a92:	68e1      	ldr	r1, [r4, #12]
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <cleanup_stdio+0x3c>)
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d004      	beq.n	8002aa4 <cleanup_stdio+0x30>
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa0:	f000 bd86 	b.w	80035b0 <_fflush_r>
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200000a8 	.word	0x200000a8
 8002aac:	20000110 	.word	0x20000110
 8002ab0:	20000178 	.word	0x20000178

08002ab4 <global_stdio_init.part.0>:
 8002ab4:	b510      	push	{r4, lr}
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <global_stdio_init.part.0+0x30>)
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8002ae8 <global_stdio_init.part.0+0x34>)
 8002aba:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <global_stdio_init.part.0+0x38>)
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	4620      	mov	r0, r4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	f7ff ff94 	bl	80029f0 <std>
 8002ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002acc:	2201      	movs	r2, #1
 8002ace:	2109      	movs	r1, #9
 8002ad0:	f7ff ff8e 	bl	80029f0 <std>
 8002ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ad8:	2202      	movs	r2, #2
 8002ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ade:	2112      	movs	r1, #18
 8002ae0:	f7ff bf86 	b.w	80029f0 <std>
 8002ae4:	200001e0 	.word	0x200001e0
 8002ae8:	200000a8 	.word	0x200000a8
 8002aec:	08002a5d 	.word	0x08002a5d

08002af0 <__sfp_lock_acquire>:
 8002af0:	4801      	ldr	r0, [pc, #4]	@ (8002af8 <__sfp_lock_acquire+0x8>)
 8002af2:	f000 b90e 	b.w	8002d12 <__retarget_lock_acquire_recursive>
 8002af6:	bf00      	nop
 8002af8:	200001e9 	.word	0x200001e9

08002afc <__sfp_lock_release>:
 8002afc:	4801      	ldr	r0, [pc, #4]	@ (8002b04 <__sfp_lock_release+0x8>)
 8002afe:	f000 b909 	b.w	8002d14 <__retarget_lock_release_recursive>
 8002b02:	bf00      	nop
 8002b04:	200001e9 	.word	0x200001e9

08002b08 <__sinit>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f7ff fff0 	bl	8002af0 <__sfp_lock_acquire>
 8002b10:	6a23      	ldr	r3, [r4, #32]
 8002b12:	b11b      	cbz	r3, 8002b1c <__sinit+0x14>
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b18:	f7ff bff0 	b.w	8002afc <__sfp_lock_release>
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <__sinit+0x28>)
 8002b1e:	6223      	str	r3, [r4, #32]
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <__sinit+0x2c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f5      	bne.n	8002b14 <__sinit+0xc>
 8002b28:	f7ff ffc4 	bl	8002ab4 <global_stdio_init.part.0>
 8002b2c:	e7f2      	b.n	8002b14 <__sinit+0xc>
 8002b2e:	bf00      	nop
 8002b30:	08002a75 	.word	0x08002a75
 8002b34:	200001e0 	.word	0x200001e0

08002b38 <_fwalk_sglue>:
 8002b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	4688      	mov	r8, r1
 8002b40:	4614      	mov	r4, r2
 8002b42:	2600      	movs	r6, #0
 8002b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b48:	f1b9 0901 	subs.w	r9, r9, #1
 8002b4c:	d505      	bpl.n	8002b5a <_fwalk_sglue+0x22>
 8002b4e:	6824      	ldr	r4, [r4, #0]
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	d1f7      	bne.n	8002b44 <_fwalk_sglue+0xc>
 8002b54:	4630      	mov	r0, r6
 8002b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5a:	89ab      	ldrh	r3, [r5, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d907      	bls.n	8002b70 <_fwalk_sglue+0x38>
 8002b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b64:	3301      	adds	r3, #1
 8002b66:	d003      	beq.n	8002b70 <_fwalk_sglue+0x38>
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	47c0      	blx	r8
 8002b6e:	4306      	orrs	r6, r0
 8002b70:	3568      	adds	r5, #104	@ 0x68
 8002b72:	e7e9      	b.n	8002b48 <_fwalk_sglue+0x10>

08002b74 <iprintf>:
 8002b74:	b40f      	push	{r0, r1, r2, r3}
 8002b76:	b507      	push	{r0, r1, r2, lr}
 8002b78:	4906      	ldr	r1, [pc, #24]	@ (8002b94 <iprintf+0x20>)
 8002b7a:	ab04      	add	r3, sp, #16
 8002b7c:	6808      	ldr	r0, [r1, #0]
 8002b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b82:	6881      	ldr	r1, [r0, #8]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	f000 f9e9 	bl	8002f5c <_vfiprintf_r>
 8002b8a:	b003      	add	sp, #12
 8002b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b90:	b004      	add	sp, #16
 8002b92:	4770      	bx	lr
 8002b94:	2000001c 	.word	0x2000001c

08002b98 <__sread>:
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ba0:	f000 f868 	bl	8002c74 <_read_r>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	bfab      	itete	ge
 8002ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002baa:	89a3      	ldrhlt	r3, [r4, #12]
 8002bac:	181b      	addge	r3, r3, r0
 8002bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bb2:	bfac      	ite	ge
 8002bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002bb6:	81a3      	strhlt	r3, [r4, #12]
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <__swrite>:
 8002bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bbe:	461f      	mov	r7, r3
 8002bc0:	898b      	ldrh	r3, [r1, #12]
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	4605      	mov	r5, r0
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	4616      	mov	r6, r2
 8002bca:	d505      	bpl.n	8002bd8 <__swrite+0x1e>
 8002bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f000 f83c 	bl	8002c50 <_lseek_r>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002be2:	81a3      	strh	r3, [r4, #12]
 8002be4:	4632      	mov	r2, r6
 8002be6:	463b      	mov	r3, r7
 8002be8:	4628      	mov	r0, r5
 8002bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	f000 b853 	b.w	8002c98 <_write_r>

08002bf2 <__sseek>:
 8002bf2:	b510      	push	{r4, lr}
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfa:	f000 f829 	bl	8002c50 <_lseek_r>
 8002bfe:	1c43      	adds	r3, r0, #1
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	bf15      	itete	ne
 8002c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c0e:	81a3      	strheq	r3, [r4, #12]
 8002c10:	bf18      	it	ne
 8002c12:	81a3      	strhne	r3, [r4, #12]
 8002c14:	bd10      	pop	{r4, pc}

08002c16 <__sclose>:
 8002c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c1a:	f000 b809 	b.w	8002c30 <_close_r>

08002c1e <memset>:
 8002c1e:	4402      	add	r2, r0
 8002c20:	4603      	mov	r3, r0
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d100      	bne.n	8002c28 <memset+0xa>
 8002c26:	4770      	bx	lr
 8002c28:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2c:	e7f9      	b.n	8002c22 <memset+0x4>
	...

08002c30 <_close_r>:
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	4d06      	ldr	r5, [pc, #24]	@ (8002c4c <_close_r+0x1c>)
 8002c34:	2300      	movs	r3, #0
 8002c36:	4604      	mov	r4, r0
 8002c38:	4608      	mov	r0, r1
 8002c3a:	602b      	str	r3, [r5, #0]
 8002c3c:	f7fe fe6e 	bl	800191c <_close>
 8002c40:	1c43      	adds	r3, r0, #1
 8002c42:	d102      	bne.n	8002c4a <_close_r+0x1a>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	b103      	cbz	r3, 8002c4a <_close_r+0x1a>
 8002c48:	6023      	str	r3, [r4, #0]
 8002c4a:	bd38      	pop	{r3, r4, r5, pc}
 8002c4c:	200001e4 	.word	0x200001e4

08002c50 <_lseek_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4d07      	ldr	r5, [pc, #28]	@ (8002c70 <_lseek_r+0x20>)
 8002c54:	4604      	mov	r4, r0
 8002c56:	4608      	mov	r0, r1
 8002c58:	4611      	mov	r1, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	602a      	str	r2, [r5, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7fe fe83 	bl	800196a <_lseek>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_lseek_r+0x1e>
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_lseek_r+0x1e>
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	200001e4 	.word	0x200001e4

08002c74 <_read_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4d07      	ldr	r5, [pc, #28]	@ (8002c94 <_read_r+0x20>)
 8002c78:	4604      	mov	r4, r0
 8002c7a:	4608      	mov	r0, r1
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	602a      	str	r2, [r5, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f7fe fe2d 	bl	80018e2 <_read>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d102      	bne.n	8002c92 <_read_r+0x1e>
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	b103      	cbz	r3, 8002c92 <_read_r+0x1e>
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	200001e4 	.word	0x200001e4

08002c98 <_write_r>:
 8002c98:	b538      	push	{r3, r4, r5, lr}
 8002c9a:	4d07      	ldr	r5, [pc, #28]	@ (8002cb8 <_write_r+0x20>)
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	602a      	str	r2, [r5, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f7fe fda5 	bl	80017f6 <_write>
 8002cac:	1c43      	adds	r3, r0, #1
 8002cae:	d102      	bne.n	8002cb6 <_write_r+0x1e>
 8002cb0:	682b      	ldr	r3, [r5, #0]
 8002cb2:	b103      	cbz	r3, 8002cb6 <_write_r+0x1e>
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	200001e4 	.word	0x200001e4

08002cbc <__errno>:
 8002cbc:	4b01      	ldr	r3, [pc, #4]	@ (8002cc4 <__errno+0x8>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	2000001c 	.word	0x2000001c

08002cc8 <__libc_init_array>:
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	4d0d      	ldr	r5, [pc, #52]	@ (8002d00 <__libc_init_array+0x38>)
 8002ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8002d04 <__libc_init_array+0x3c>)
 8002cce:	1b64      	subs	r4, r4, r5
 8002cd0:	10a4      	asrs	r4, r4, #2
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	42a6      	cmp	r6, r4
 8002cd6:	d109      	bne.n	8002cec <__libc_init_array+0x24>
 8002cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8002d08 <__libc_init_array+0x40>)
 8002cda:	4c0c      	ldr	r4, [pc, #48]	@ (8002d0c <__libc_init_array+0x44>)
 8002cdc:	f001 fd16 	bl	800470c <_init>
 8002ce0:	1b64      	subs	r4, r4, r5
 8002ce2:	10a4      	asrs	r4, r4, #2
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	42a6      	cmp	r6, r4
 8002ce8:	d105      	bne.n	8002cf6 <__libc_init_array+0x2e>
 8002cea:	bd70      	pop	{r4, r5, r6, pc}
 8002cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf0:	4798      	blx	r3
 8002cf2:	3601      	adds	r6, #1
 8002cf4:	e7ee      	b.n	8002cd4 <__libc_init_array+0xc>
 8002cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfa:	4798      	blx	r3
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	e7f2      	b.n	8002ce6 <__libc_init_array+0x1e>
 8002d00:	08004878 	.word	0x08004878
 8002d04:	08004878 	.word	0x08004878
 8002d08:	08004878 	.word	0x08004878
 8002d0c:	0800487c 	.word	0x0800487c

08002d10 <__retarget_lock_init_recursive>:
 8002d10:	4770      	bx	lr

08002d12 <__retarget_lock_acquire_recursive>:
 8002d12:	4770      	bx	lr

08002d14 <__retarget_lock_release_recursive>:
 8002d14:	4770      	bx	lr
	...

08002d18 <_free_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4605      	mov	r5, r0
 8002d1c:	2900      	cmp	r1, #0
 8002d1e:	d041      	beq.n	8002da4 <_free_r+0x8c>
 8002d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d24:	1f0c      	subs	r4, r1, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bfb8      	it	lt
 8002d2a:	18e4      	addlt	r4, r4, r3
 8002d2c:	f000 f8e0 	bl	8002ef0 <__malloc_lock>
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <_free_r+0x90>)
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	b933      	cbnz	r3, 8002d44 <_free_r+0x2c>
 8002d36:	6063      	str	r3, [r4, #4]
 8002d38:	6014      	str	r4, [r2, #0]
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d40:	f000 b8dc 	b.w	8002efc <__malloc_unlock>
 8002d44:	42a3      	cmp	r3, r4
 8002d46:	d908      	bls.n	8002d5a <_free_r+0x42>
 8002d48:	6820      	ldr	r0, [r4, #0]
 8002d4a:	1821      	adds	r1, r4, r0
 8002d4c:	428b      	cmp	r3, r1
 8002d4e:	bf01      	itttt	eq
 8002d50:	6819      	ldreq	r1, [r3, #0]
 8002d52:	685b      	ldreq	r3, [r3, #4]
 8002d54:	1809      	addeq	r1, r1, r0
 8002d56:	6021      	streq	r1, [r4, #0]
 8002d58:	e7ed      	b.n	8002d36 <_free_r+0x1e>
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	b10b      	cbz	r3, 8002d64 <_free_r+0x4c>
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	d9fa      	bls.n	8002d5a <_free_r+0x42>
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	1850      	adds	r0, r2, r1
 8002d68:	42a0      	cmp	r0, r4
 8002d6a:	d10b      	bne.n	8002d84 <_free_r+0x6c>
 8002d6c:	6820      	ldr	r0, [r4, #0]
 8002d6e:	4401      	add	r1, r0
 8002d70:	1850      	adds	r0, r2, r1
 8002d72:	4283      	cmp	r3, r0
 8002d74:	6011      	str	r1, [r2, #0]
 8002d76:	d1e0      	bne.n	8002d3a <_free_r+0x22>
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	6053      	str	r3, [r2, #4]
 8002d7e:	4408      	add	r0, r1
 8002d80:	6010      	str	r0, [r2, #0]
 8002d82:	e7da      	b.n	8002d3a <_free_r+0x22>
 8002d84:	d902      	bls.n	8002d8c <_free_r+0x74>
 8002d86:	230c      	movs	r3, #12
 8002d88:	602b      	str	r3, [r5, #0]
 8002d8a:	e7d6      	b.n	8002d3a <_free_r+0x22>
 8002d8c:	6820      	ldr	r0, [r4, #0]
 8002d8e:	1821      	adds	r1, r4, r0
 8002d90:	428b      	cmp	r3, r1
 8002d92:	bf04      	itt	eq
 8002d94:	6819      	ldreq	r1, [r3, #0]
 8002d96:	685b      	ldreq	r3, [r3, #4]
 8002d98:	6063      	str	r3, [r4, #4]
 8002d9a:	bf04      	itt	eq
 8002d9c:	1809      	addeq	r1, r1, r0
 8002d9e:	6021      	streq	r1, [r4, #0]
 8002da0:	6054      	str	r4, [r2, #4]
 8002da2:	e7ca      	b.n	8002d3a <_free_r+0x22>
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
 8002da6:	bf00      	nop
 8002da8:	200001f0 	.word	0x200001f0

08002dac <sbrk_aligned>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4e0f      	ldr	r6, [pc, #60]	@ (8002dec <sbrk_aligned+0x40>)
 8002db0:	460c      	mov	r4, r1
 8002db2:	6831      	ldr	r1, [r6, #0]
 8002db4:	4605      	mov	r5, r0
 8002db6:	b911      	cbnz	r1, 8002dbe <sbrk_aligned+0x12>
 8002db8:	f000 fcb6 	bl	8003728 <_sbrk_r>
 8002dbc:	6030      	str	r0, [r6, #0]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 fcb1 	bl	8003728 <_sbrk_r>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	d103      	bne.n	8002dd2 <sbrk_aligned+0x26>
 8002dca:	f04f 34ff 	mov.w	r4, #4294967295
 8002dce:	4620      	mov	r0, r4
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	1cc4      	adds	r4, r0, #3
 8002dd4:	f024 0403 	bic.w	r4, r4, #3
 8002dd8:	42a0      	cmp	r0, r4
 8002dda:	d0f8      	beq.n	8002dce <sbrk_aligned+0x22>
 8002ddc:	1a21      	subs	r1, r4, r0
 8002dde:	4628      	mov	r0, r5
 8002de0:	f000 fca2 	bl	8003728 <_sbrk_r>
 8002de4:	3001      	adds	r0, #1
 8002de6:	d1f2      	bne.n	8002dce <sbrk_aligned+0x22>
 8002de8:	e7ef      	b.n	8002dca <sbrk_aligned+0x1e>
 8002dea:	bf00      	nop
 8002dec:	200001ec 	.word	0x200001ec

08002df0 <_malloc_r>:
 8002df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df4:	1ccd      	adds	r5, r1, #3
 8002df6:	f025 0503 	bic.w	r5, r5, #3
 8002dfa:	3508      	adds	r5, #8
 8002dfc:	2d0c      	cmp	r5, #12
 8002dfe:	bf38      	it	cc
 8002e00:	250c      	movcc	r5, #12
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	4606      	mov	r6, r0
 8002e06:	db01      	blt.n	8002e0c <_malloc_r+0x1c>
 8002e08:	42a9      	cmp	r1, r5
 8002e0a:	d904      	bls.n	8002e16 <_malloc_r+0x26>
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	6033      	str	r3, [r6, #0]
 8002e10:	2000      	movs	r0, #0
 8002e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002eec <_malloc_r+0xfc>
 8002e1a:	f000 f869 	bl	8002ef0 <__malloc_lock>
 8002e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e22:	461c      	mov	r4, r3
 8002e24:	bb44      	cbnz	r4, 8002e78 <_malloc_r+0x88>
 8002e26:	4629      	mov	r1, r5
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f7ff ffbf 	bl	8002dac <sbrk_aligned>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	4604      	mov	r4, r0
 8002e32:	d158      	bne.n	8002ee6 <_malloc_r+0xf6>
 8002e34:	f8d8 4000 	ldr.w	r4, [r8]
 8002e38:	4627      	mov	r7, r4
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d143      	bne.n	8002ec6 <_malloc_r+0xd6>
 8002e3e:	2c00      	cmp	r4, #0
 8002e40:	d04b      	beq.n	8002eda <_malloc_r+0xea>
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	4639      	mov	r1, r7
 8002e46:	4630      	mov	r0, r6
 8002e48:	eb04 0903 	add.w	r9, r4, r3
 8002e4c:	f000 fc6c 	bl	8003728 <_sbrk_r>
 8002e50:	4581      	cmp	r9, r0
 8002e52:	d142      	bne.n	8002eda <_malloc_r+0xea>
 8002e54:	6821      	ldr	r1, [r4, #0]
 8002e56:	1a6d      	subs	r5, r5, r1
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7ff ffa6 	bl	8002dac <sbrk_aligned>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d03a      	beq.n	8002eda <_malloc_r+0xea>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	442b      	add	r3, r5
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	bb62      	cbnz	r2, 8002ecc <_malloc_r+0xdc>
 8002e72:	f8c8 7000 	str.w	r7, [r8]
 8002e76:	e00f      	b.n	8002e98 <_malloc_r+0xa8>
 8002e78:	6822      	ldr	r2, [r4, #0]
 8002e7a:	1b52      	subs	r2, r2, r5
 8002e7c:	d420      	bmi.n	8002ec0 <_malloc_r+0xd0>
 8002e7e:	2a0b      	cmp	r2, #11
 8002e80:	d917      	bls.n	8002eb2 <_malloc_r+0xc2>
 8002e82:	1961      	adds	r1, r4, r5
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	6025      	str	r5, [r4, #0]
 8002e88:	bf18      	it	ne
 8002e8a:	6059      	strne	r1, [r3, #4]
 8002e8c:	6863      	ldr	r3, [r4, #4]
 8002e8e:	bf08      	it	eq
 8002e90:	f8c8 1000 	streq.w	r1, [r8]
 8002e94:	5162      	str	r2, [r4, r5]
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 f82f 	bl	8002efc <__malloc_unlock>
 8002e9e:	f104 000b 	add.w	r0, r4, #11
 8002ea2:	1d23      	adds	r3, r4, #4
 8002ea4:	f020 0007 	bic.w	r0, r0, #7
 8002ea8:	1ac2      	subs	r2, r0, r3
 8002eaa:	bf1c      	itt	ne
 8002eac:	1a1b      	subne	r3, r3, r0
 8002eae:	50a3      	strne	r3, [r4, r2]
 8002eb0:	e7af      	b.n	8002e12 <_malloc_r+0x22>
 8002eb2:	6862      	ldr	r2, [r4, #4]
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	bf0c      	ite	eq
 8002eb8:	f8c8 2000 	streq.w	r2, [r8]
 8002ebc:	605a      	strne	r2, [r3, #4]
 8002ebe:	e7eb      	b.n	8002e98 <_malloc_r+0xa8>
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	6864      	ldr	r4, [r4, #4]
 8002ec4:	e7ae      	b.n	8002e24 <_malloc_r+0x34>
 8002ec6:	463c      	mov	r4, r7
 8002ec8:	687f      	ldr	r7, [r7, #4]
 8002eca:	e7b6      	b.n	8002e3a <_malloc_r+0x4a>
 8002ecc:	461a      	mov	r2, r3
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d1fb      	bne.n	8002ecc <_malloc_r+0xdc>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6053      	str	r3, [r2, #4]
 8002ed8:	e7de      	b.n	8002e98 <_malloc_r+0xa8>
 8002eda:	230c      	movs	r3, #12
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 f80c 	bl	8002efc <__malloc_unlock>
 8002ee4:	e794      	b.n	8002e10 <_malloc_r+0x20>
 8002ee6:	6005      	str	r5, [r0, #0]
 8002ee8:	e7d6      	b.n	8002e98 <_malloc_r+0xa8>
 8002eea:	bf00      	nop
 8002eec:	200001f0 	.word	0x200001f0

08002ef0 <__malloc_lock>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	@ (8002ef8 <__malloc_lock+0x8>)
 8002ef2:	f7ff bf0e 	b.w	8002d12 <__retarget_lock_acquire_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	200001e8 	.word	0x200001e8

08002efc <__malloc_unlock>:
 8002efc:	4801      	ldr	r0, [pc, #4]	@ (8002f04 <__malloc_unlock+0x8>)
 8002efe:	f7ff bf09 	b.w	8002d14 <__retarget_lock_release_recursive>
 8002f02:	bf00      	nop
 8002f04:	200001e8 	.word	0x200001e8

08002f08 <__sfputc_r>:
 8002f08:	6893      	ldr	r3, [r2, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	b410      	push	{r4}
 8002f10:	6093      	str	r3, [r2, #8]
 8002f12:	da08      	bge.n	8002f26 <__sfputc_r+0x1e>
 8002f14:	6994      	ldr	r4, [r2, #24]
 8002f16:	42a3      	cmp	r3, r4
 8002f18:	db01      	blt.n	8002f1e <__sfputc_r+0x16>
 8002f1a:	290a      	cmp	r1, #10
 8002f1c:	d103      	bne.n	8002f26 <__sfputc_r+0x1e>
 8002f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f22:	f000 bb6d 	b.w	8003600 <__swbuf_r>
 8002f26:	6813      	ldr	r3, [r2, #0]
 8002f28:	1c58      	adds	r0, r3, #1
 8002f2a:	6010      	str	r0, [r2, #0]
 8002f2c:	7019      	strb	r1, [r3, #0]
 8002f2e:	4608      	mov	r0, r1
 8002f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <__sfputs_r>:
 8002f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f38:	4606      	mov	r6, r0
 8002f3a:	460f      	mov	r7, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	18d5      	adds	r5, r2, r3
 8002f40:	42ac      	cmp	r4, r5
 8002f42:	d101      	bne.n	8002f48 <__sfputs_r+0x12>
 8002f44:	2000      	movs	r0, #0
 8002f46:	e007      	b.n	8002f58 <__sfputs_r+0x22>
 8002f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f4c:	463a      	mov	r2, r7
 8002f4e:	4630      	mov	r0, r6
 8002f50:	f7ff ffda 	bl	8002f08 <__sfputc_r>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d1f3      	bne.n	8002f40 <__sfputs_r+0xa>
 8002f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f5c <_vfiprintf_r>:
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f60:	460d      	mov	r5, r1
 8002f62:	b09d      	sub	sp, #116	@ 0x74
 8002f64:	4614      	mov	r4, r2
 8002f66:	4698      	mov	r8, r3
 8002f68:	4606      	mov	r6, r0
 8002f6a:	b118      	cbz	r0, 8002f74 <_vfiprintf_r+0x18>
 8002f6c:	6a03      	ldr	r3, [r0, #32]
 8002f6e:	b90b      	cbnz	r3, 8002f74 <_vfiprintf_r+0x18>
 8002f70:	f7ff fdca 	bl	8002b08 <__sinit>
 8002f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f76:	07d9      	lsls	r1, r3, #31
 8002f78:	d405      	bmi.n	8002f86 <_vfiprintf_r+0x2a>
 8002f7a:	89ab      	ldrh	r3, [r5, #12]
 8002f7c:	059a      	lsls	r2, r3, #22
 8002f7e:	d402      	bmi.n	8002f86 <_vfiprintf_r+0x2a>
 8002f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f82:	f7ff fec6 	bl	8002d12 <__retarget_lock_acquire_recursive>
 8002f86:	89ab      	ldrh	r3, [r5, #12]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	d501      	bpl.n	8002f90 <_vfiprintf_r+0x34>
 8002f8c:	692b      	ldr	r3, [r5, #16]
 8002f8e:	b99b      	cbnz	r3, 8002fb8 <_vfiprintf_r+0x5c>
 8002f90:	4629      	mov	r1, r5
 8002f92:	4630      	mov	r0, r6
 8002f94:	f000 fb72 	bl	800367c <__swsetup_r>
 8002f98:	b170      	cbz	r0, 8002fb8 <_vfiprintf_r+0x5c>
 8002f9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f9c:	07dc      	lsls	r4, r3, #31
 8002f9e:	d504      	bpl.n	8002faa <_vfiprintf_r+0x4e>
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	b01d      	add	sp, #116	@ 0x74
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002faa:	89ab      	ldrh	r3, [r5, #12]
 8002fac:	0598      	lsls	r0, r3, #22
 8002fae:	d4f7      	bmi.n	8002fa0 <_vfiprintf_r+0x44>
 8002fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fb2:	f7ff feaf 	bl	8002d14 <__retarget_lock_release_recursive>
 8002fb6:	e7f3      	b.n	8002fa0 <_vfiprintf_r+0x44>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fc6:	2330      	movs	r3, #48	@ 0x30
 8002fc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003178 <_vfiprintf_r+0x21c>
 8002fcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fd0:	f04f 0901 	mov.w	r9, #1
 8002fd4:	4623      	mov	r3, r4
 8002fd6:	469a      	mov	sl, r3
 8002fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fdc:	b10a      	cbz	r2, 8002fe2 <_vfiprintf_r+0x86>
 8002fde:	2a25      	cmp	r2, #37	@ 0x25
 8002fe0:	d1f9      	bne.n	8002fd6 <_vfiprintf_r+0x7a>
 8002fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe6:	d00b      	beq.n	8003000 <_vfiprintf_r+0xa4>
 8002fe8:	465b      	mov	r3, fp
 8002fea:	4622      	mov	r2, r4
 8002fec:	4629      	mov	r1, r5
 8002fee:	4630      	mov	r0, r6
 8002ff0:	f7ff ffa1 	bl	8002f36 <__sfputs_r>
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	f000 80a7 	beq.w	8003148 <_vfiprintf_r+0x1ec>
 8002ffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ffc:	445a      	add	r2, fp
 8002ffe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003000:	f89a 3000 	ldrb.w	r3, [sl]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 809f 	beq.w	8003148 <_vfiprintf_r+0x1ec>
 800300a:	2300      	movs	r3, #0
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003014:	f10a 0a01 	add.w	sl, sl, #1
 8003018:	9304      	str	r3, [sp, #16]
 800301a:	9307      	str	r3, [sp, #28]
 800301c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003020:	931a      	str	r3, [sp, #104]	@ 0x68
 8003022:	4654      	mov	r4, sl
 8003024:	2205      	movs	r2, #5
 8003026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302a:	4853      	ldr	r0, [pc, #332]	@ (8003178 <_vfiprintf_r+0x21c>)
 800302c:	f7fd f8e8 	bl	8000200 <memchr>
 8003030:	9a04      	ldr	r2, [sp, #16]
 8003032:	b9d8      	cbnz	r0, 800306c <_vfiprintf_r+0x110>
 8003034:	06d1      	lsls	r1, r2, #27
 8003036:	bf44      	itt	mi
 8003038:	2320      	movmi	r3, #32
 800303a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800303e:	0713      	lsls	r3, r2, #28
 8003040:	bf44      	itt	mi
 8003042:	232b      	movmi	r3, #43	@ 0x2b
 8003044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003048:	f89a 3000 	ldrb.w	r3, [sl]
 800304c:	2b2a      	cmp	r3, #42	@ 0x2a
 800304e:	d015      	beq.n	800307c <_vfiprintf_r+0x120>
 8003050:	9a07      	ldr	r2, [sp, #28]
 8003052:	4654      	mov	r4, sl
 8003054:	2000      	movs	r0, #0
 8003056:	f04f 0c0a 	mov.w	ip, #10
 800305a:	4621      	mov	r1, r4
 800305c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003060:	3b30      	subs	r3, #48	@ 0x30
 8003062:	2b09      	cmp	r3, #9
 8003064:	d94b      	bls.n	80030fe <_vfiprintf_r+0x1a2>
 8003066:	b1b0      	cbz	r0, 8003096 <_vfiprintf_r+0x13a>
 8003068:	9207      	str	r2, [sp, #28]
 800306a:	e014      	b.n	8003096 <_vfiprintf_r+0x13a>
 800306c:	eba0 0308 	sub.w	r3, r0, r8
 8003070:	fa09 f303 	lsl.w	r3, r9, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	46a2      	mov	sl, r4
 800307a:	e7d2      	b.n	8003022 <_vfiprintf_r+0xc6>
 800307c:	9b03      	ldr	r3, [sp, #12]
 800307e:	1d19      	adds	r1, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	9103      	str	r1, [sp, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	bfbb      	ittet	lt
 8003088:	425b      	neglt	r3, r3
 800308a:	f042 0202 	orrlt.w	r2, r2, #2
 800308e:	9307      	strge	r3, [sp, #28]
 8003090:	9307      	strlt	r3, [sp, #28]
 8003092:	bfb8      	it	lt
 8003094:	9204      	strlt	r2, [sp, #16]
 8003096:	7823      	ldrb	r3, [r4, #0]
 8003098:	2b2e      	cmp	r3, #46	@ 0x2e
 800309a:	d10a      	bne.n	80030b2 <_vfiprintf_r+0x156>
 800309c:	7863      	ldrb	r3, [r4, #1]
 800309e:	2b2a      	cmp	r3, #42	@ 0x2a
 80030a0:	d132      	bne.n	8003108 <_vfiprintf_r+0x1ac>
 80030a2:	9b03      	ldr	r3, [sp, #12]
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	9203      	str	r2, [sp, #12]
 80030aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030ae:	3402      	adds	r4, #2
 80030b0:	9305      	str	r3, [sp, #20]
 80030b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003188 <_vfiprintf_r+0x22c>
 80030b6:	7821      	ldrb	r1, [r4, #0]
 80030b8:	2203      	movs	r2, #3
 80030ba:	4650      	mov	r0, sl
 80030bc:	f7fd f8a0 	bl	8000200 <memchr>
 80030c0:	b138      	cbz	r0, 80030d2 <_vfiprintf_r+0x176>
 80030c2:	9b04      	ldr	r3, [sp, #16]
 80030c4:	eba0 000a 	sub.w	r0, r0, sl
 80030c8:	2240      	movs	r2, #64	@ 0x40
 80030ca:	4082      	lsls	r2, r0
 80030cc:	4313      	orrs	r3, r2
 80030ce:	3401      	adds	r4, #1
 80030d0:	9304      	str	r3, [sp, #16]
 80030d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d6:	4829      	ldr	r0, [pc, #164]	@ (800317c <_vfiprintf_r+0x220>)
 80030d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030dc:	2206      	movs	r2, #6
 80030de:	f7fd f88f 	bl	8000200 <memchr>
 80030e2:	2800      	cmp	r0, #0
 80030e4:	d03f      	beq.n	8003166 <_vfiprintf_r+0x20a>
 80030e6:	4b26      	ldr	r3, [pc, #152]	@ (8003180 <_vfiprintf_r+0x224>)
 80030e8:	bb1b      	cbnz	r3, 8003132 <_vfiprintf_r+0x1d6>
 80030ea:	9b03      	ldr	r3, [sp, #12]
 80030ec:	3307      	adds	r3, #7
 80030ee:	f023 0307 	bic.w	r3, r3, #7
 80030f2:	3308      	adds	r3, #8
 80030f4:	9303      	str	r3, [sp, #12]
 80030f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030f8:	443b      	add	r3, r7
 80030fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80030fc:	e76a      	b.n	8002fd4 <_vfiprintf_r+0x78>
 80030fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003102:	460c      	mov	r4, r1
 8003104:	2001      	movs	r0, #1
 8003106:	e7a8      	b.n	800305a <_vfiprintf_r+0xfe>
 8003108:	2300      	movs	r3, #0
 800310a:	3401      	adds	r4, #1
 800310c:	9305      	str	r3, [sp, #20]
 800310e:	4619      	mov	r1, r3
 8003110:	f04f 0c0a 	mov.w	ip, #10
 8003114:	4620      	mov	r0, r4
 8003116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800311a:	3a30      	subs	r2, #48	@ 0x30
 800311c:	2a09      	cmp	r2, #9
 800311e:	d903      	bls.n	8003128 <_vfiprintf_r+0x1cc>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0c6      	beq.n	80030b2 <_vfiprintf_r+0x156>
 8003124:	9105      	str	r1, [sp, #20]
 8003126:	e7c4      	b.n	80030b2 <_vfiprintf_r+0x156>
 8003128:	fb0c 2101 	mla	r1, ip, r1, r2
 800312c:	4604      	mov	r4, r0
 800312e:	2301      	movs	r3, #1
 8003130:	e7f0      	b.n	8003114 <_vfiprintf_r+0x1b8>
 8003132:	ab03      	add	r3, sp, #12
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	462a      	mov	r2, r5
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <_vfiprintf_r+0x228>)
 800313a:	a904      	add	r1, sp, #16
 800313c:	4630      	mov	r0, r6
 800313e:	f3af 8000 	nop.w
 8003142:	4607      	mov	r7, r0
 8003144:	1c78      	adds	r0, r7, #1
 8003146:	d1d6      	bne.n	80030f6 <_vfiprintf_r+0x19a>
 8003148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800314a:	07d9      	lsls	r1, r3, #31
 800314c:	d405      	bmi.n	800315a <_vfiprintf_r+0x1fe>
 800314e:	89ab      	ldrh	r3, [r5, #12]
 8003150:	059a      	lsls	r2, r3, #22
 8003152:	d402      	bmi.n	800315a <_vfiprintf_r+0x1fe>
 8003154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003156:	f7ff fddd 	bl	8002d14 <__retarget_lock_release_recursive>
 800315a:	89ab      	ldrh	r3, [r5, #12]
 800315c:	065b      	lsls	r3, r3, #25
 800315e:	f53f af1f 	bmi.w	8002fa0 <_vfiprintf_r+0x44>
 8003162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003164:	e71e      	b.n	8002fa4 <_vfiprintf_r+0x48>
 8003166:	ab03      	add	r3, sp, #12
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	462a      	mov	r2, r5
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <_vfiprintf_r+0x228>)
 800316e:	a904      	add	r1, sp, #16
 8003170:	4630      	mov	r0, r6
 8003172:	f000 f879 	bl	8003268 <_printf_i>
 8003176:	e7e4      	b.n	8003142 <_vfiprintf_r+0x1e6>
 8003178:	08004808 	.word	0x08004808
 800317c:	08004812 	.word	0x08004812
 8003180:	00000000 	.word	0x00000000
 8003184:	08002f37 	.word	0x08002f37
 8003188:	0800480e 	.word	0x0800480e

0800318c <_printf_common>:
 800318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003190:	4616      	mov	r6, r2
 8003192:	4698      	mov	r8, r3
 8003194:	688a      	ldr	r2, [r1, #8]
 8003196:	690b      	ldr	r3, [r1, #16]
 8003198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800319c:	4293      	cmp	r3, r2
 800319e:	bfb8      	it	lt
 80031a0:	4613      	movlt	r3, r2
 80031a2:	6033      	str	r3, [r6, #0]
 80031a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031a8:	4607      	mov	r7, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	b10a      	cbz	r2, 80031b2 <_printf_common+0x26>
 80031ae:	3301      	adds	r3, #1
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	0699      	lsls	r1, r3, #26
 80031b6:	bf42      	ittt	mi
 80031b8:	6833      	ldrmi	r3, [r6, #0]
 80031ba:	3302      	addmi	r3, #2
 80031bc:	6033      	strmi	r3, [r6, #0]
 80031be:	6825      	ldr	r5, [r4, #0]
 80031c0:	f015 0506 	ands.w	r5, r5, #6
 80031c4:	d106      	bne.n	80031d4 <_printf_common+0x48>
 80031c6:	f104 0a19 	add.w	sl, r4, #25
 80031ca:	68e3      	ldr	r3, [r4, #12]
 80031cc:	6832      	ldr	r2, [r6, #0]
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	42ab      	cmp	r3, r5
 80031d2:	dc26      	bgt.n	8003222 <_printf_common+0x96>
 80031d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031d8:	6822      	ldr	r2, [r4, #0]
 80031da:	3b00      	subs	r3, #0
 80031dc:	bf18      	it	ne
 80031de:	2301      	movne	r3, #1
 80031e0:	0692      	lsls	r2, r2, #26
 80031e2:	d42b      	bmi.n	800323c <_printf_common+0xb0>
 80031e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031e8:	4641      	mov	r1, r8
 80031ea:	4638      	mov	r0, r7
 80031ec:	47c8      	blx	r9
 80031ee:	3001      	adds	r0, #1
 80031f0:	d01e      	beq.n	8003230 <_printf_common+0xa4>
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	6922      	ldr	r2, [r4, #16]
 80031f6:	f003 0306 	and.w	r3, r3, #6
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf02      	ittt	eq
 80031fe:	68e5      	ldreq	r5, [r4, #12]
 8003200:	6833      	ldreq	r3, [r6, #0]
 8003202:	1aed      	subeq	r5, r5, r3
 8003204:	68a3      	ldr	r3, [r4, #8]
 8003206:	bf0c      	ite	eq
 8003208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800320c:	2500      	movne	r5, #0
 800320e:	4293      	cmp	r3, r2
 8003210:	bfc4      	itt	gt
 8003212:	1a9b      	subgt	r3, r3, r2
 8003214:	18ed      	addgt	r5, r5, r3
 8003216:	2600      	movs	r6, #0
 8003218:	341a      	adds	r4, #26
 800321a:	42b5      	cmp	r5, r6
 800321c:	d11a      	bne.n	8003254 <_printf_common+0xc8>
 800321e:	2000      	movs	r0, #0
 8003220:	e008      	b.n	8003234 <_printf_common+0xa8>
 8003222:	2301      	movs	r3, #1
 8003224:	4652      	mov	r2, sl
 8003226:	4641      	mov	r1, r8
 8003228:	4638      	mov	r0, r7
 800322a:	47c8      	blx	r9
 800322c:	3001      	adds	r0, #1
 800322e:	d103      	bne.n	8003238 <_printf_common+0xac>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003238:	3501      	adds	r5, #1
 800323a:	e7c6      	b.n	80031ca <_printf_common+0x3e>
 800323c:	18e1      	adds	r1, r4, r3
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	2030      	movs	r0, #48	@ 0x30
 8003242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003246:	4422      	add	r2, r4
 8003248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800324c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003250:	3302      	adds	r3, #2
 8003252:	e7c7      	b.n	80031e4 <_printf_common+0x58>
 8003254:	2301      	movs	r3, #1
 8003256:	4622      	mov	r2, r4
 8003258:	4641      	mov	r1, r8
 800325a:	4638      	mov	r0, r7
 800325c:	47c8      	blx	r9
 800325e:	3001      	adds	r0, #1
 8003260:	d0e6      	beq.n	8003230 <_printf_common+0xa4>
 8003262:	3601      	adds	r6, #1
 8003264:	e7d9      	b.n	800321a <_printf_common+0x8e>
	...

08003268 <_printf_i>:
 8003268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	7e0f      	ldrb	r7, [r1, #24]
 800326e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003270:	2f78      	cmp	r7, #120	@ 0x78
 8003272:	4691      	mov	r9, r2
 8003274:	4680      	mov	r8, r0
 8003276:	460c      	mov	r4, r1
 8003278:	469a      	mov	sl, r3
 800327a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800327e:	d807      	bhi.n	8003290 <_printf_i+0x28>
 8003280:	2f62      	cmp	r7, #98	@ 0x62
 8003282:	d80a      	bhi.n	800329a <_printf_i+0x32>
 8003284:	2f00      	cmp	r7, #0
 8003286:	f000 80d2 	beq.w	800342e <_printf_i+0x1c6>
 800328a:	2f58      	cmp	r7, #88	@ 0x58
 800328c:	f000 80b9 	beq.w	8003402 <_printf_i+0x19a>
 8003290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003298:	e03a      	b.n	8003310 <_printf_i+0xa8>
 800329a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800329e:	2b15      	cmp	r3, #21
 80032a0:	d8f6      	bhi.n	8003290 <_printf_i+0x28>
 80032a2:	a101      	add	r1, pc, #4	@ (adr r1, 80032a8 <_printf_i+0x40>)
 80032a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a8:	08003301 	.word	0x08003301
 80032ac:	08003315 	.word	0x08003315
 80032b0:	08003291 	.word	0x08003291
 80032b4:	08003291 	.word	0x08003291
 80032b8:	08003291 	.word	0x08003291
 80032bc:	08003291 	.word	0x08003291
 80032c0:	08003315 	.word	0x08003315
 80032c4:	08003291 	.word	0x08003291
 80032c8:	08003291 	.word	0x08003291
 80032cc:	08003291 	.word	0x08003291
 80032d0:	08003291 	.word	0x08003291
 80032d4:	08003415 	.word	0x08003415
 80032d8:	0800333f 	.word	0x0800333f
 80032dc:	080033cf 	.word	0x080033cf
 80032e0:	08003291 	.word	0x08003291
 80032e4:	08003291 	.word	0x08003291
 80032e8:	08003437 	.word	0x08003437
 80032ec:	08003291 	.word	0x08003291
 80032f0:	0800333f 	.word	0x0800333f
 80032f4:	08003291 	.word	0x08003291
 80032f8:	08003291 	.word	0x08003291
 80032fc:	080033d7 	.word	0x080033d7
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	1d1a      	adds	r2, r3, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6032      	str	r2, [r6, #0]
 8003308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800330c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003310:	2301      	movs	r3, #1
 8003312:	e09d      	b.n	8003450 <_printf_i+0x1e8>
 8003314:	6833      	ldr	r3, [r6, #0]
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	1d19      	adds	r1, r3, #4
 800331a:	6031      	str	r1, [r6, #0]
 800331c:	0606      	lsls	r6, r0, #24
 800331e:	d501      	bpl.n	8003324 <_printf_i+0xbc>
 8003320:	681d      	ldr	r5, [r3, #0]
 8003322:	e003      	b.n	800332c <_printf_i+0xc4>
 8003324:	0645      	lsls	r5, r0, #25
 8003326:	d5fb      	bpl.n	8003320 <_printf_i+0xb8>
 8003328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800332c:	2d00      	cmp	r5, #0
 800332e:	da03      	bge.n	8003338 <_printf_i+0xd0>
 8003330:	232d      	movs	r3, #45	@ 0x2d
 8003332:	426d      	negs	r5, r5
 8003334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003338:	4859      	ldr	r0, [pc, #356]	@ (80034a0 <_printf_i+0x238>)
 800333a:	230a      	movs	r3, #10
 800333c:	e011      	b.n	8003362 <_printf_i+0xfa>
 800333e:	6821      	ldr	r1, [r4, #0]
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	0608      	lsls	r0, r1, #24
 8003344:	f853 5b04 	ldr.w	r5, [r3], #4
 8003348:	d402      	bmi.n	8003350 <_printf_i+0xe8>
 800334a:	0649      	lsls	r1, r1, #25
 800334c:	bf48      	it	mi
 800334e:	b2ad      	uxthmi	r5, r5
 8003350:	2f6f      	cmp	r7, #111	@ 0x6f
 8003352:	4853      	ldr	r0, [pc, #332]	@ (80034a0 <_printf_i+0x238>)
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	bf14      	ite	ne
 8003358:	230a      	movne	r3, #10
 800335a:	2308      	moveq	r3, #8
 800335c:	2100      	movs	r1, #0
 800335e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003362:	6866      	ldr	r6, [r4, #4]
 8003364:	60a6      	str	r6, [r4, #8]
 8003366:	2e00      	cmp	r6, #0
 8003368:	bfa2      	ittt	ge
 800336a:	6821      	ldrge	r1, [r4, #0]
 800336c:	f021 0104 	bicge.w	r1, r1, #4
 8003370:	6021      	strge	r1, [r4, #0]
 8003372:	b90d      	cbnz	r5, 8003378 <_printf_i+0x110>
 8003374:	2e00      	cmp	r6, #0
 8003376:	d04b      	beq.n	8003410 <_printf_i+0x1a8>
 8003378:	4616      	mov	r6, r2
 800337a:	fbb5 f1f3 	udiv	r1, r5, r3
 800337e:	fb03 5711 	mls	r7, r3, r1, r5
 8003382:	5dc7      	ldrb	r7, [r0, r7]
 8003384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003388:	462f      	mov	r7, r5
 800338a:	42bb      	cmp	r3, r7
 800338c:	460d      	mov	r5, r1
 800338e:	d9f4      	bls.n	800337a <_printf_i+0x112>
 8003390:	2b08      	cmp	r3, #8
 8003392:	d10b      	bne.n	80033ac <_printf_i+0x144>
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	07df      	lsls	r7, r3, #31
 8003398:	d508      	bpl.n	80033ac <_printf_i+0x144>
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	6861      	ldr	r1, [r4, #4]
 800339e:	4299      	cmp	r1, r3
 80033a0:	bfde      	ittt	le
 80033a2:	2330      	movle	r3, #48	@ 0x30
 80033a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033ac:	1b92      	subs	r2, r2, r6
 80033ae:	6122      	str	r2, [r4, #16]
 80033b0:	f8cd a000 	str.w	sl, [sp]
 80033b4:	464b      	mov	r3, r9
 80033b6:	aa03      	add	r2, sp, #12
 80033b8:	4621      	mov	r1, r4
 80033ba:	4640      	mov	r0, r8
 80033bc:	f7ff fee6 	bl	800318c <_printf_common>
 80033c0:	3001      	adds	r0, #1
 80033c2:	d14a      	bne.n	800345a <_printf_i+0x1f2>
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	b004      	add	sp, #16
 80033ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	f043 0320 	orr.w	r3, r3, #32
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	4833      	ldr	r0, [pc, #204]	@ (80034a4 <_printf_i+0x23c>)
 80033d8:	2778      	movs	r7, #120	@ 0x78
 80033da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	6831      	ldr	r1, [r6, #0]
 80033e2:	061f      	lsls	r7, r3, #24
 80033e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80033e8:	d402      	bmi.n	80033f0 <_printf_i+0x188>
 80033ea:	065f      	lsls	r7, r3, #25
 80033ec:	bf48      	it	mi
 80033ee:	b2ad      	uxthmi	r5, r5
 80033f0:	6031      	str	r1, [r6, #0]
 80033f2:	07d9      	lsls	r1, r3, #31
 80033f4:	bf44      	itt	mi
 80033f6:	f043 0320 	orrmi.w	r3, r3, #32
 80033fa:	6023      	strmi	r3, [r4, #0]
 80033fc:	b11d      	cbz	r5, 8003406 <_printf_i+0x19e>
 80033fe:	2310      	movs	r3, #16
 8003400:	e7ac      	b.n	800335c <_printf_i+0xf4>
 8003402:	4827      	ldr	r0, [pc, #156]	@ (80034a0 <_printf_i+0x238>)
 8003404:	e7e9      	b.n	80033da <_printf_i+0x172>
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	f023 0320 	bic.w	r3, r3, #32
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	e7f6      	b.n	80033fe <_printf_i+0x196>
 8003410:	4616      	mov	r6, r2
 8003412:	e7bd      	b.n	8003390 <_printf_i+0x128>
 8003414:	6833      	ldr	r3, [r6, #0]
 8003416:	6825      	ldr	r5, [r4, #0]
 8003418:	6961      	ldr	r1, [r4, #20]
 800341a:	1d18      	adds	r0, r3, #4
 800341c:	6030      	str	r0, [r6, #0]
 800341e:	062e      	lsls	r6, r5, #24
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	d501      	bpl.n	8003428 <_printf_i+0x1c0>
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	e002      	b.n	800342e <_printf_i+0x1c6>
 8003428:	0668      	lsls	r0, r5, #25
 800342a:	d5fb      	bpl.n	8003424 <_printf_i+0x1bc>
 800342c:	8019      	strh	r1, [r3, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	6123      	str	r3, [r4, #16]
 8003432:	4616      	mov	r6, r2
 8003434:	e7bc      	b.n	80033b0 <_printf_i+0x148>
 8003436:	6833      	ldr	r3, [r6, #0]
 8003438:	1d1a      	adds	r2, r3, #4
 800343a:	6032      	str	r2, [r6, #0]
 800343c:	681e      	ldr	r6, [r3, #0]
 800343e:	6862      	ldr	r2, [r4, #4]
 8003440:	2100      	movs	r1, #0
 8003442:	4630      	mov	r0, r6
 8003444:	f7fc fedc 	bl	8000200 <memchr>
 8003448:	b108      	cbz	r0, 800344e <_printf_i+0x1e6>
 800344a:	1b80      	subs	r0, r0, r6
 800344c:	6060      	str	r0, [r4, #4]
 800344e:	6863      	ldr	r3, [r4, #4]
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	2300      	movs	r3, #0
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003458:	e7aa      	b.n	80033b0 <_printf_i+0x148>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	4632      	mov	r2, r6
 800345e:	4649      	mov	r1, r9
 8003460:	4640      	mov	r0, r8
 8003462:	47d0      	blx	sl
 8003464:	3001      	adds	r0, #1
 8003466:	d0ad      	beq.n	80033c4 <_printf_i+0x15c>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	079b      	lsls	r3, r3, #30
 800346c:	d413      	bmi.n	8003496 <_printf_i+0x22e>
 800346e:	68e0      	ldr	r0, [r4, #12]
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	4298      	cmp	r0, r3
 8003474:	bfb8      	it	lt
 8003476:	4618      	movlt	r0, r3
 8003478:	e7a6      	b.n	80033c8 <_printf_i+0x160>
 800347a:	2301      	movs	r3, #1
 800347c:	4632      	mov	r2, r6
 800347e:	4649      	mov	r1, r9
 8003480:	4640      	mov	r0, r8
 8003482:	47d0      	blx	sl
 8003484:	3001      	adds	r0, #1
 8003486:	d09d      	beq.n	80033c4 <_printf_i+0x15c>
 8003488:	3501      	adds	r5, #1
 800348a:	68e3      	ldr	r3, [r4, #12]
 800348c:	9903      	ldr	r1, [sp, #12]
 800348e:	1a5b      	subs	r3, r3, r1
 8003490:	42ab      	cmp	r3, r5
 8003492:	dcf2      	bgt.n	800347a <_printf_i+0x212>
 8003494:	e7eb      	b.n	800346e <_printf_i+0x206>
 8003496:	2500      	movs	r5, #0
 8003498:	f104 0619 	add.w	r6, r4, #25
 800349c:	e7f5      	b.n	800348a <_printf_i+0x222>
 800349e:	bf00      	nop
 80034a0:	08004819 	.word	0x08004819
 80034a4:	0800482a 	.word	0x0800482a

080034a8 <__sflush_r>:
 80034a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b0:	0716      	lsls	r6, r2, #28
 80034b2:	4605      	mov	r5, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	d454      	bmi.n	8003562 <__sflush_r+0xba>
 80034b8:	684b      	ldr	r3, [r1, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc02      	bgt.n	80034c4 <__sflush_r+0x1c>
 80034be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	dd48      	ble.n	8003556 <__sflush_r+0xae>
 80034c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d045      	beq.n	8003556 <__sflush_r+0xae>
 80034ca:	2300      	movs	r3, #0
 80034cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034d0:	682f      	ldr	r7, [r5, #0]
 80034d2:	6a21      	ldr	r1, [r4, #32]
 80034d4:	602b      	str	r3, [r5, #0]
 80034d6:	d030      	beq.n	800353a <__sflush_r+0x92>
 80034d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034da:	89a3      	ldrh	r3, [r4, #12]
 80034dc:	0759      	lsls	r1, r3, #29
 80034de:	d505      	bpl.n	80034ec <__sflush_r+0x44>
 80034e0:	6863      	ldr	r3, [r4, #4]
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034e6:	b10b      	cbz	r3, 80034ec <__sflush_r+0x44>
 80034e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034ea:	1ad2      	subs	r2, r2, r3
 80034ec:	2300      	movs	r3, #0
 80034ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034f0:	6a21      	ldr	r1, [r4, #32]
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b0      	blx	r6
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	d106      	bne.n	800350a <__sflush_r+0x62>
 80034fc:	6829      	ldr	r1, [r5, #0]
 80034fe:	291d      	cmp	r1, #29
 8003500:	d82b      	bhi.n	800355a <__sflush_r+0xb2>
 8003502:	4a2a      	ldr	r2, [pc, #168]	@ (80035ac <__sflush_r+0x104>)
 8003504:	410a      	asrs	r2, r1
 8003506:	07d6      	lsls	r6, r2, #31
 8003508:	d427      	bmi.n	800355a <__sflush_r+0xb2>
 800350a:	2200      	movs	r2, #0
 800350c:	6062      	str	r2, [r4, #4]
 800350e:	04d9      	lsls	r1, r3, #19
 8003510:	6922      	ldr	r2, [r4, #16]
 8003512:	6022      	str	r2, [r4, #0]
 8003514:	d504      	bpl.n	8003520 <__sflush_r+0x78>
 8003516:	1c42      	adds	r2, r0, #1
 8003518:	d101      	bne.n	800351e <__sflush_r+0x76>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	b903      	cbnz	r3, 8003520 <__sflush_r+0x78>
 800351e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003522:	602f      	str	r7, [r5, #0]
 8003524:	b1b9      	cbz	r1, 8003556 <__sflush_r+0xae>
 8003526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800352a:	4299      	cmp	r1, r3
 800352c:	d002      	beq.n	8003534 <__sflush_r+0x8c>
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff fbf2 	bl	8002d18 <_free_r>
 8003534:	2300      	movs	r3, #0
 8003536:	6363      	str	r3, [r4, #52]	@ 0x34
 8003538:	e00d      	b.n	8003556 <__sflush_r+0xae>
 800353a:	2301      	movs	r3, #1
 800353c:	4628      	mov	r0, r5
 800353e:	47b0      	blx	r6
 8003540:	4602      	mov	r2, r0
 8003542:	1c50      	adds	r0, r2, #1
 8003544:	d1c9      	bne.n	80034da <__sflush_r+0x32>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0c6      	beq.n	80034da <__sflush_r+0x32>
 800354c:	2b1d      	cmp	r3, #29
 800354e:	d001      	beq.n	8003554 <__sflush_r+0xac>
 8003550:	2b16      	cmp	r3, #22
 8003552:	d11e      	bne.n	8003592 <__sflush_r+0xea>
 8003554:	602f      	str	r7, [r5, #0]
 8003556:	2000      	movs	r0, #0
 8003558:	e022      	b.n	80035a0 <__sflush_r+0xf8>
 800355a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800355e:	b21b      	sxth	r3, r3
 8003560:	e01b      	b.n	800359a <__sflush_r+0xf2>
 8003562:	690f      	ldr	r7, [r1, #16]
 8003564:	2f00      	cmp	r7, #0
 8003566:	d0f6      	beq.n	8003556 <__sflush_r+0xae>
 8003568:	0793      	lsls	r3, r2, #30
 800356a:	680e      	ldr	r6, [r1, #0]
 800356c:	bf08      	it	eq
 800356e:	694b      	ldreq	r3, [r1, #20]
 8003570:	600f      	str	r7, [r1, #0]
 8003572:	bf18      	it	ne
 8003574:	2300      	movne	r3, #0
 8003576:	eba6 0807 	sub.w	r8, r6, r7
 800357a:	608b      	str	r3, [r1, #8]
 800357c:	f1b8 0f00 	cmp.w	r8, #0
 8003580:	dde9      	ble.n	8003556 <__sflush_r+0xae>
 8003582:	6a21      	ldr	r1, [r4, #32]
 8003584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003586:	4643      	mov	r3, r8
 8003588:	463a      	mov	r2, r7
 800358a:	4628      	mov	r0, r5
 800358c:	47b0      	blx	r6
 800358e:	2800      	cmp	r0, #0
 8003590:	dc08      	bgt.n	80035a4 <__sflush_r+0xfc>
 8003592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800359a:	81a3      	strh	r3, [r4, #12]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035a4:	4407      	add	r7, r0
 80035a6:	eba8 0800 	sub.w	r8, r8, r0
 80035aa:	e7e7      	b.n	800357c <__sflush_r+0xd4>
 80035ac:	dfbffffe 	.word	0xdfbffffe

080035b0 <_fflush_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	4605      	mov	r5, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	b913      	cbnz	r3, 80035c0 <_fflush_r+0x10>
 80035ba:	2500      	movs	r5, #0
 80035bc:	4628      	mov	r0, r5
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	b118      	cbz	r0, 80035ca <_fflush_r+0x1a>
 80035c2:	6a03      	ldr	r3, [r0, #32]
 80035c4:	b90b      	cbnz	r3, 80035ca <_fflush_r+0x1a>
 80035c6:	f7ff fa9f 	bl	8002b08 <__sinit>
 80035ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f3      	beq.n	80035ba <_fflush_r+0xa>
 80035d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035d4:	07d0      	lsls	r0, r2, #31
 80035d6:	d404      	bmi.n	80035e2 <_fflush_r+0x32>
 80035d8:	0599      	lsls	r1, r3, #22
 80035da:	d402      	bmi.n	80035e2 <_fflush_r+0x32>
 80035dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035de:	f7ff fb98 	bl	8002d12 <__retarget_lock_acquire_recursive>
 80035e2:	4628      	mov	r0, r5
 80035e4:	4621      	mov	r1, r4
 80035e6:	f7ff ff5f 	bl	80034a8 <__sflush_r>
 80035ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035ec:	07da      	lsls	r2, r3, #31
 80035ee:	4605      	mov	r5, r0
 80035f0:	d4e4      	bmi.n	80035bc <_fflush_r+0xc>
 80035f2:	89a3      	ldrh	r3, [r4, #12]
 80035f4:	059b      	lsls	r3, r3, #22
 80035f6:	d4e1      	bmi.n	80035bc <_fflush_r+0xc>
 80035f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035fa:	f7ff fb8b 	bl	8002d14 <__retarget_lock_release_recursive>
 80035fe:	e7dd      	b.n	80035bc <_fflush_r+0xc>

08003600 <__swbuf_r>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	460e      	mov	r6, r1
 8003604:	4614      	mov	r4, r2
 8003606:	4605      	mov	r5, r0
 8003608:	b118      	cbz	r0, 8003612 <__swbuf_r+0x12>
 800360a:	6a03      	ldr	r3, [r0, #32]
 800360c:	b90b      	cbnz	r3, 8003612 <__swbuf_r+0x12>
 800360e:	f7ff fa7b 	bl	8002b08 <__sinit>
 8003612:	69a3      	ldr	r3, [r4, #24]
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	071a      	lsls	r2, r3, #28
 800361a:	d501      	bpl.n	8003620 <__swbuf_r+0x20>
 800361c:	6923      	ldr	r3, [r4, #16]
 800361e:	b943      	cbnz	r3, 8003632 <__swbuf_r+0x32>
 8003620:	4621      	mov	r1, r4
 8003622:	4628      	mov	r0, r5
 8003624:	f000 f82a 	bl	800367c <__swsetup_r>
 8003628:	b118      	cbz	r0, 8003632 <__swbuf_r+0x32>
 800362a:	f04f 37ff 	mov.w	r7, #4294967295
 800362e:	4638      	mov	r0, r7
 8003630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	6922      	ldr	r2, [r4, #16]
 8003636:	1a98      	subs	r0, r3, r2
 8003638:	6963      	ldr	r3, [r4, #20]
 800363a:	b2f6      	uxtb	r6, r6
 800363c:	4283      	cmp	r3, r0
 800363e:	4637      	mov	r7, r6
 8003640:	dc05      	bgt.n	800364e <__swbuf_r+0x4e>
 8003642:	4621      	mov	r1, r4
 8003644:	4628      	mov	r0, r5
 8003646:	f7ff ffb3 	bl	80035b0 <_fflush_r>
 800364a:	2800      	cmp	r0, #0
 800364c:	d1ed      	bne.n	800362a <__swbuf_r+0x2a>
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	3b01      	subs	r3, #1
 8003652:	60a3      	str	r3, [r4, #8]
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	6022      	str	r2, [r4, #0]
 800365a:	701e      	strb	r6, [r3, #0]
 800365c:	6962      	ldr	r2, [r4, #20]
 800365e:	1c43      	adds	r3, r0, #1
 8003660:	429a      	cmp	r2, r3
 8003662:	d004      	beq.n	800366e <__swbuf_r+0x6e>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	07db      	lsls	r3, r3, #31
 8003668:	d5e1      	bpl.n	800362e <__swbuf_r+0x2e>
 800366a:	2e0a      	cmp	r6, #10
 800366c:	d1df      	bne.n	800362e <__swbuf_r+0x2e>
 800366e:	4621      	mov	r1, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f7ff ff9d 	bl	80035b0 <_fflush_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	d0d9      	beq.n	800362e <__swbuf_r+0x2e>
 800367a:	e7d6      	b.n	800362a <__swbuf_r+0x2a>

0800367c <__swsetup_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <__swsetup_r+0xa8>)
 8003680:	4605      	mov	r5, r0
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	460c      	mov	r4, r1
 8003686:	b118      	cbz	r0, 8003690 <__swsetup_r+0x14>
 8003688:	6a03      	ldr	r3, [r0, #32]
 800368a:	b90b      	cbnz	r3, 8003690 <__swsetup_r+0x14>
 800368c:	f7ff fa3c 	bl	8002b08 <__sinit>
 8003690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003694:	0719      	lsls	r1, r3, #28
 8003696:	d422      	bmi.n	80036de <__swsetup_r+0x62>
 8003698:	06da      	lsls	r2, r3, #27
 800369a:	d407      	bmi.n	80036ac <__swsetup_r+0x30>
 800369c:	2209      	movs	r2, #9
 800369e:	602a      	str	r2, [r5, #0]
 80036a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	f04f 30ff 	mov.w	r0, #4294967295
 80036aa:	e033      	b.n	8003714 <__swsetup_r+0x98>
 80036ac:	0758      	lsls	r0, r3, #29
 80036ae:	d512      	bpl.n	80036d6 <__swsetup_r+0x5a>
 80036b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036b2:	b141      	cbz	r1, 80036c6 <__swsetup_r+0x4a>
 80036b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036b8:	4299      	cmp	r1, r3
 80036ba:	d002      	beq.n	80036c2 <__swsetup_r+0x46>
 80036bc:	4628      	mov	r0, r5
 80036be:	f7ff fb2b 	bl	8002d18 <_free_r>
 80036c2:	2300      	movs	r3, #0
 80036c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036cc:	81a3      	strh	r3, [r4, #12]
 80036ce:	2300      	movs	r3, #0
 80036d0:	6063      	str	r3, [r4, #4]
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	b94b      	cbnz	r3, 80036f6 <__swsetup_r+0x7a>
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ec:	d003      	beq.n	80036f6 <__swsetup_r+0x7a>
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 f84f 	bl	8003794 <__smakebuf_r>
 80036f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036fa:	f013 0201 	ands.w	r2, r3, #1
 80036fe:	d00a      	beq.n	8003716 <__swsetup_r+0x9a>
 8003700:	2200      	movs	r2, #0
 8003702:	60a2      	str	r2, [r4, #8]
 8003704:	6962      	ldr	r2, [r4, #20]
 8003706:	4252      	negs	r2, r2
 8003708:	61a2      	str	r2, [r4, #24]
 800370a:	6922      	ldr	r2, [r4, #16]
 800370c:	b942      	cbnz	r2, 8003720 <__swsetup_r+0xa4>
 800370e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003712:	d1c5      	bne.n	80036a0 <__swsetup_r+0x24>
 8003714:	bd38      	pop	{r3, r4, r5, pc}
 8003716:	0799      	lsls	r1, r3, #30
 8003718:	bf58      	it	pl
 800371a:	6962      	ldrpl	r2, [r4, #20]
 800371c:	60a2      	str	r2, [r4, #8]
 800371e:	e7f4      	b.n	800370a <__swsetup_r+0x8e>
 8003720:	2000      	movs	r0, #0
 8003722:	e7f7      	b.n	8003714 <__swsetup_r+0x98>
 8003724:	2000001c 	.word	0x2000001c

08003728 <_sbrk_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4d06      	ldr	r5, [pc, #24]	@ (8003744 <_sbrk_r+0x1c>)
 800372c:	2300      	movs	r3, #0
 800372e:	4604      	mov	r4, r0
 8003730:	4608      	mov	r0, r1
 8003732:	602b      	str	r3, [r5, #0]
 8003734:	f7fe f926 	bl	8001984 <_sbrk>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d102      	bne.n	8003742 <_sbrk_r+0x1a>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	b103      	cbz	r3, 8003742 <_sbrk_r+0x1a>
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	bd38      	pop	{r3, r4, r5, pc}
 8003744:	200001e4 	.word	0x200001e4

08003748 <__swhatbuf_r>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	460c      	mov	r4, r1
 800374c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003750:	2900      	cmp	r1, #0
 8003752:	b096      	sub	sp, #88	@ 0x58
 8003754:	4615      	mov	r5, r2
 8003756:	461e      	mov	r6, r3
 8003758:	da0d      	bge.n	8003776 <__swhatbuf_r+0x2e>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003760:	f04f 0100 	mov.w	r1, #0
 8003764:	bf14      	ite	ne
 8003766:	2340      	movne	r3, #64	@ 0x40
 8003768:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800376c:	2000      	movs	r0, #0
 800376e:	6031      	str	r1, [r6, #0]
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	b016      	add	sp, #88	@ 0x58
 8003774:	bd70      	pop	{r4, r5, r6, pc}
 8003776:	466a      	mov	r2, sp
 8003778:	f000 f848 	bl	800380c <_fstat_r>
 800377c:	2800      	cmp	r0, #0
 800377e:	dbec      	blt.n	800375a <__swhatbuf_r+0x12>
 8003780:	9901      	ldr	r1, [sp, #4]
 8003782:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003786:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800378a:	4259      	negs	r1, r3
 800378c:	4159      	adcs	r1, r3
 800378e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003792:	e7eb      	b.n	800376c <__swhatbuf_r+0x24>

08003794 <__smakebuf_r>:
 8003794:	898b      	ldrh	r3, [r1, #12]
 8003796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003798:	079d      	lsls	r5, r3, #30
 800379a:	4606      	mov	r6, r0
 800379c:	460c      	mov	r4, r1
 800379e:	d507      	bpl.n	80037b0 <__smakebuf_r+0x1c>
 80037a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037a4:	6023      	str	r3, [r4, #0]
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	2301      	movs	r3, #1
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	b003      	add	sp, #12
 80037ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b0:	ab01      	add	r3, sp, #4
 80037b2:	466a      	mov	r2, sp
 80037b4:	f7ff ffc8 	bl	8003748 <__swhatbuf_r>
 80037b8:	9f00      	ldr	r7, [sp, #0]
 80037ba:	4605      	mov	r5, r0
 80037bc:	4639      	mov	r1, r7
 80037be:	4630      	mov	r0, r6
 80037c0:	f7ff fb16 	bl	8002df0 <_malloc_r>
 80037c4:	b948      	cbnz	r0, 80037da <__smakebuf_r+0x46>
 80037c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ca:	059a      	lsls	r2, r3, #22
 80037cc:	d4ee      	bmi.n	80037ac <__smakebuf_r+0x18>
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	81a3      	strh	r3, [r4, #12]
 80037d8:	e7e2      	b.n	80037a0 <__smakebuf_r+0xc>
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	6020      	str	r0, [r4, #0]
 80037de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80037ea:	b15b      	cbz	r3, 8003804 <__smakebuf_r+0x70>
 80037ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 f81d 	bl	8003830 <_isatty_r>
 80037f6:	b128      	cbz	r0, 8003804 <__smakebuf_r+0x70>
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	431d      	orrs	r5, r3
 8003808:	81a5      	strh	r5, [r4, #12]
 800380a:	e7cf      	b.n	80037ac <__smakebuf_r+0x18>

0800380c <_fstat_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	4d07      	ldr	r5, [pc, #28]	@ (800382c <_fstat_r+0x20>)
 8003810:	2300      	movs	r3, #0
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	f7fe f88b 	bl	8001934 <_fstat>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d102      	bne.n	8003828 <_fstat_r+0x1c>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b103      	cbz	r3, 8003828 <_fstat_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd38      	pop	{r3, r4, r5, pc}
 800382a:	bf00      	nop
 800382c:	200001e4 	.word	0x200001e4

08003830 <_isatty_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	@ (800384c <_isatty_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fe f88a 	bl	8001954 <_isatty>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_isatty_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_isatty_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	200001e4 	.word	0x200001e4

08003850 <pow>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	ed2d 8b02 	vpush	{d8}
 8003856:	eeb0 8a40 	vmov.f32	s16, s0
 800385a:	eef0 8a60 	vmov.f32	s17, s1
 800385e:	ec55 4b11 	vmov	r4, r5, d1
 8003862:	f000 f871 	bl	8003948 <__ieee754_pow>
 8003866:	4622      	mov	r2, r4
 8003868:	462b      	mov	r3, r5
 800386a:	4620      	mov	r0, r4
 800386c:	4629      	mov	r1, r5
 800386e:	ec57 6b10 	vmov	r6, r7, d0
 8003872:	f7fd f96b 	bl	8000b4c <__aeabi_dcmpun>
 8003876:	2800      	cmp	r0, #0
 8003878:	d13b      	bne.n	80038f2 <pow+0xa2>
 800387a:	ec51 0b18 	vmov	r0, r1, d8
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	f7fd f931 	bl	8000ae8 <__aeabi_dcmpeq>
 8003886:	b1b8      	cbz	r0, 80038b8 <pow+0x68>
 8003888:	2200      	movs	r2, #0
 800388a:	2300      	movs	r3, #0
 800388c:	4620      	mov	r0, r4
 800388e:	4629      	mov	r1, r5
 8003890:	f7fd f92a 	bl	8000ae8 <__aeabi_dcmpeq>
 8003894:	2800      	cmp	r0, #0
 8003896:	d146      	bne.n	8003926 <pow+0xd6>
 8003898:	ec45 4b10 	vmov	d0, r4, r5
 800389c:	f000 f848 	bl	8003930 <finite>
 80038a0:	b338      	cbz	r0, 80038f2 <pow+0xa2>
 80038a2:	2200      	movs	r2, #0
 80038a4:	2300      	movs	r3, #0
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fd f927 	bl	8000afc <__aeabi_dcmplt>
 80038ae:	b300      	cbz	r0, 80038f2 <pow+0xa2>
 80038b0:	f7ff fa04 	bl	8002cbc <__errno>
 80038b4:	2322      	movs	r3, #34	@ 0x22
 80038b6:	e01b      	b.n	80038f0 <pow+0xa0>
 80038b8:	ec47 6b10 	vmov	d0, r6, r7
 80038bc:	f000 f838 	bl	8003930 <finite>
 80038c0:	b9e0      	cbnz	r0, 80038fc <pow+0xac>
 80038c2:	eeb0 0a48 	vmov.f32	s0, s16
 80038c6:	eef0 0a68 	vmov.f32	s1, s17
 80038ca:	f000 f831 	bl	8003930 <finite>
 80038ce:	b1a8      	cbz	r0, 80038fc <pow+0xac>
 80038d0:	ec45 4b10 	vmov	d0, r4, r5
 80038d4:	f000 f82c 	bl	8003930 <finite>
 80038d8:	b180      	cbz	r0, 80038fc <pow+0xac>
 80038da:	4632      	mov	r2, r6
 80038dc:	463b      	mov	r3, r7
 80038de:	4630      	mov	r0, r6
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fd f933 	bl	8000b4c <__aeabi_dcmpun>
 80038e6:	2800      	cmp	r0, #0
 80038e8:	d0e2      	beq.n	80038b0 <pow+0x60>
 80038ea:	f7ff f9e7 	bl	8002cbc <__errno>
 80038ee:	2321      	movs	r3, #33	@ 0x21
 80038f0:	6003      	str	r3, [r0, #0]
 80038f2:	ecbd 8b02 	vpop	{d8}
 80038f6:	ec47 6b10 	vmov	d0, r6, r7
 80038fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038fc:	2200      	movs	r2, #0
 80038fe:	2300      	movs	r3, #0
 8003900:	4630      	mov	r0, r6
 8003902:	4639      	mov	r1, r7
 8003904:	f7fd f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 8003908:	2800      	cmp	r0, #0
 800390a:	d0f2      	beq.n	80038f2 <pow+0xa2>
 800390c:	eeb0 0a48 	vmov.f32	s0, s16
 8003910:	eef0 0a68 	vmov.f32	s1, s17
 8003914:	f000 f80c 	bl	8003930 <finite>
 8003918:	2800      	cmp	r0, #0
 800391a:	d0ea      	beq.n	80038f2 <pow+0xa2>
 800391c:	ec45 4b10 	vmov	d0, r4, r5
 8003920:	f000 f806 	bl	8003930 <finite>
 8003924:	e7c3      	b.n	80038ae <pow+0x5e>
 8003926:	4f01      	ldr	r7, [pc, #4]	@ (800392c <pow+0xdc>)
 8003928:	2600      	movs	r6, #0
 800392a:	e7e2      	b.n	80038f2 <pow+0xa2>
 800392c:	3ff00000 	.word	0x3ff00000

08003930 <finite>:
 8003930:	b082      	sub	sp, #8
 8003932:	ed8d 0b00 	vstr	d0, [sp]
 8003936:	9801      	ldr	r0, [sp, #4]
 8003938:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800393c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003940:	0fc0      	lsrs	r0, r0, #31
 8003942:	b002      	add	sp, #8
 8003944:	4770      	bx	lr
	...

08003948 <__ieee754_pow>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	b091      	sub	sp, #68	@ 0x44
 800394e:	ed8d 1b00 	vstr	d1, [sp]
 8003952:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003956:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800395a:	ea5a 0001 	orrs.w	r0, sl, r1
 800395e:	ec57 6b10 	vmov	r6, r7, d0
 8003962:	d113      	bne.n	800398c <__ieee754_pow+0x44>
 8003964:	19b3      	adds	r3, r6, r6
 8003966:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800396a:	4152      	adcs	r2, r2
 800396c:	4298      	cmp	r0, r3
 800396e:	4b98      	ldr	r3, [pc, #608]	@ (8003bd0 <__ieee754_pow+0x288>)
 8003970:	4193      	sbcs	r3, r2
 8003972:	f080 84ea 	bcs.w	800434a <__ieee754_pow+0xa02>
 8003976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800397a:	4630      	mov	r0, r6
 800397c:	4639      	mov	r1, r7
 800397e:	f7fc fc95 	bl	80002ac <__adddf3>
 8003982:	ec41 0b10 	vmov	d0, r0, r1
 8003986:	b011      	add	sp, #68	@ 0x44
 8003988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398c:	4a91      	ldr	r2, [pc, #580]	@ (8003bd4 <__ieee754_pow+0x28c>)
 800398e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003992:	4590      	cmp	r8, r2
 8003994:	463d      	mov	r5, r7
 8003996:	4633      	mov	r3, r6
 8003998:	d806      	bhi.n	80039a8 <__ieee754_pow+0x60>
 800399a:	d101      	bne.n	80039a0 <__ieee754_pow+0x58>
 800399c:	2e00      	cmp	r6, #0
 800399e:	d1ea      	bne.n	8003976 <__ieee754_pow+0x2e>
 80039a0:	4592      	cmp	sl, r2
 80039a2:	d801      	bhi.n	80039a8 <__ieee754_pow+0x60>
 80039a4:	d10e      	bne.n	80039c4 <__ieee754_pow+0x7c>
 80039a6:	b169      	cbz	r1, 80039c4 <__ieee754_pow+0x7c>
 80039a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80039ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80039b0:	431d      	orrs	r5, r3
 80039b2:	d1e0      	bne.n	8003976 <__ieee754_pow+0x2e>
 80039b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80039b8:	18db      	adds	r3, r3, r3
 80039ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80039be:	4152      	adcs	r2, r2
 80039c0:	429d      	cmp	r5, r3
 80039c2:	e7d4      	b.n	800396e <__ieee754_pow+0x26>
 80039c4:	2d00      	cmp	r5, #0
 80039c6:	46c3      	mov	fp, r8
 80039c8:	da3a      	bge.n	8003a40 <__ieee754_pow+0xf8>
 80039ca:	4a83      	ldr	r2, [pc, #524]	@ (8003bd8 <__ieee754_pow+0x290>)
 80039cc:	4592      	cmp	sl, r2
 80039ce:	d84d      	bhi.n	8003a6c <__ieee754_pow+0x124>
 80039d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80039d4:	4592      	cmp	sl, r2
 80039d6:	f240 84c7 	bls.w	8004368 <__ieee754_pow+0xa20>
 80039da:	ea4f 522a 	mov.w	r2, sl, asr #20
 80039de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80039e2:	2a14      	cmp	r2, #20
 80039e4:	dd0f      	ble.n	8003a06 <__ieee754_pow+0xbe>
 80039e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80039ea:	fa21 f402 	lsr.w	r4, r1, r2
 80039ee:	fa04 f202 	lsl.w	r2, r4, r2
 80039f2:	428a      	cmp	r2, r1
 80039f4:	f040 84b8 	bne.w	8004368 <__ieee754_pow+0xa20>
 80039f8:	f004 0401 	and.w	r4, r4, #1
 80039fc:	f1c4 0402 	rsb	r4, r4, #2
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d158      	bne.n	8003ab6 <__ieee754_pow+0x16e>
 8003a04:	e00e      	b.n	8003a24 <__ieee754_pow+0xdc>
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d154      	bne.n	8003ab4 <__ieee754_pow+0x16c>
 8003a0a:	f1c2 0214 	rsb	r2, r2, #20
 8003a0e:	fa4a f402 	asr.w	r4, sl, r2
 8003a12:	fa04 f202 	lsl.w	r2, r4, r2
 8003a16:	4552      	cmp	r2, sl
 8003a18:	f040 84a3 	bne.w	8004362 <__ieee754_pow+0xa1a>
 8003a1c:	f004 0401 	and.w	r4, r4, #1
 8003a20:	f1c4 0402 	rsb	r4, r4, #2
 8003a24:	4a6d      	ldr	r2, [pc, #436]	@ (8003bdc <__ieee754_pow+0x294>)
 8003a26:	4592      	cmp	sl, r2
 8003a28:	d12e      	bne.n	8003a88 <__ieee754_pow+0x140>
 8003a2a:	f1b9 0f00 	cmp.w	r9, #0
 8003a2e:	f280 8494 	bge.w	800435a <__ieee754_pow+0xa12>
 8003a32:	496a      	ldr	r1, [pc, #424]	@ (8003bdc <__ieee754_pow+0x294>)
 8003a34:	4632      	mov	r2, r6
 8003a36:	463b      	mov	r3, r7
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fc ff17 	bl	800086c <__aeabi_ddiv>
 8003a3e:	e7a0      	b.n	8003982 <__ieee754_pow+0x3a>
 8003a40:	2400      	movs	r4, #0
 8003a42:	bbc1      	cbnz	r1, 8003ab6 <__ieee754_pow+0x16e>
 8003a44:	4a63      	ldr	r2, [pc, #396]	@ (8003bd4 <__ieee754_pow+0x28c>)
 8003a46:	4592      	cmp	sl, r2
 8003a48:	d1ec      	bne.n	8003a24 <__ieee754_pow+0xdc>
 8003a4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8003a4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f000 8479 	beq.w	800434a <__ieee754_pow+0xa02>
 8003a58:	4b61      	ldr	r3, [pc, #388]	@ (8003be0 <__ieee754_pow+0x298>)
 8003a5a:	4598      	cmp	r8, r3
 8003a5c:	d908      	bls.n	8003a70 <__ieee754_pow+0x128>
 8003a5e:	f1b9 0f00 	cmp.w	r9, #0
 8003a62:	f2c0 8476 	blt.w	8004352 <__ieee754_pow+0xa0a>
 8003a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a6a:	e78a      	b.n	8003982 <__ieee754_pow+0x3a>
 8003a6c:	2402      	movs	r4, #2
 8003a6e:	e7e8      	b.n	8003a42 <__ieee754_pow+0xfa>
 8003a70:	f1b9 0f00 	cmp.w	r9, #0
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	da81      	bge.n	8003982 <__ieee754_pow+0x3a>
 8003a7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003a82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003a86:	e77c      	b.n	8003982 <__ieee754_pow+0x3a>
 8003a88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003a8c:	d106      	bne.n	8003a9c <__ieee754_pow+0x154>
 8003a8e:	4632      	mov	r2, r6
 8003a90:	463b      	mov	r3, r7
 8003a92:	4630      	mov	r0, r6
 8003a94:	4639      	mov	r1, r7
 8003a96:	f7fc fdbf 	bl	8000618 <__aeabi_dmul>
 8003a9a:	e772      	b.n	8003982 <__ieee754_pow+0x3a>
 8003a9c:	4a51      	ldr	r2, [pc, #324]	@ (8003be4 <__ieee754_pow+0x29c>)
 8003a9e:	4591      	cmp	r9, r2
 8003aa0:	d109      	bne.n	8003ab6 <__ieee754_pow+0x16e>
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	db07      	blt.n	8003ab6 <__ieee754_pow+0x16e>
 8003aa6:	ec47 6b10 	vmov	d0, r6, r7
 8003aaa:	b011      	add	sp, #68	@ 0x44
 8003aac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	f000 bd52 	b.w	8004558 <__ieee754_sqrt>
 8003ab4:	2400      	movs	r4, #0
 8003ab6:	ec47 6b10 	vmov	d0, r6, r7
 8003aba:	9302      	str	r3, [sp, #8]
 8003abc:	f000 fc88 	bl	80043d0 <fabs>
 8003ac0:	9b02      	ldr	r3, [sp, #8]
 8003ac2:	ec51 0b10 	vmov	r0, r1, d0
 8003ac6:	bb53      	cbnz	r3, 8003b1e <__ieee754_pow+0x1d6>
 8003ac8:	4b44      	ldr	r3, [pc, #272]	@ (8003bdc <__ieee754_pow+0x294>)
 8003aca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d002      	beq.n	8003ad8 <__ieee754_pow+0x190>
 8003ad2:	f1b8 0f00 	cmp.w	r8, #0
 8003ad6:	d122      	bne.n	8003b1e <__ieee754_pow+0x1d6>
 8003ad8:	f1b9 0f00 	cmp.w	r9, #0
 8003adc:	da05      	bge.n	8003aea <__ieee754_pow+0x1a2>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	493d      	ldr	r1, [pc, #244]	@ (8003bdc <__ieee754_pow+0x294>)
 8003ae6:	f7fc fec1 	bl	800086c <__aeabi_ddiv>
 8003aea:	2d00      	cmp	r5, #0
 8003aec:	f6bf af49 	bge.w	8003982 <__ieee754_pow+0x3a>
 8003af0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8003af4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003af8:	ea58 0804 	orrs.w	r8, r8, r4
 8003afc:	d108      	bne.n	8003b10 <__ieee754_pow+0x1c8>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7fc fbcf 	bl	80002a8 <__aeabi_dsub>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	e794      	b.n	8003a3a <__ieee754_pow+0xf2>
 8003b10:	2c01      	cmp	r4, #1
 8003b12:	f47f af36 	bne.w	8003982 <__ieee754_pow+0x3a>
 8003b16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	e731      	b.n	8003982 <__ieee754_pow+0x3a>
 8003b1e:	0feb      	lsrs	r3, r5, #31
 8003b20:	3b01      	subs	r3, #1
 8003b22:	ea53 0204 	orrs.w	r2, r3, r4
 8003b26:	d102      	bne.n	8003b2e <__ieee754_pow+0x1e6>
 8003b28:	4632      	mov	r2, r6
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	e7e9      	b.n	8003b02 <__ieee754_pow+0x1ba>
 8003b2e:	3c01      	subs	r4, #1
 8003b30:	431c      	orrs	r4, r3
 8003b32:	d016      	beq.n	8003b62 <__ieee754_pow+0x21a>
 8003b34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003bc0 <__ieee754_pow+0x278>
 8003b38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003b3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b40:	f240 8112 	bls.w	8003d68 <__ieee754_pow+0x420>
 8003b44:	4b28      	ldr	r3, [pc, #160]	@ (8003be8 <__ieee754_pow+0x2a0>)
 8003b46:	459a      	cmp	sl, r3
 8003b48:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <__ieee754_pow+0x298>)
 8003b4a:	d916      	bls.n	8003b7a <__ieee754_pow+0x232>
 8003b4c:	4598      	cmp	r8, r3
 8003b4e:	d80b      	bhi.n	8003b68 <__ieee754_pow+0x220>
 8003b50:	f1b9 0f00 	cmp.w	r9, #0
 8003b54:	da0b      	bge.n	8003b6e <__ieee754_pow+0x226>
 8003b56:	2000      	movs	r0, #0
 8003b58:	b011      	add	sp, #68	@ 0x44
 8003b5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5e:	f000 bcf3 	b.w	8004548 <__math_oflow>
 8003b62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003bc8 <__ieee754_pow+0x280>
 8003b66:	e7e7      	b.n	8003b38 <__ieee754_pow+0x1f0>
 8003b68:	f1b9 0f00 	cmp.w	r9, #0
 8003b6c:	dcf3      	bgt.n	8003b56 <__ieee754_pow+0x20e>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	b011      	add	sp, #68	@ 0x44
 8003b72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b76:	f000 bcdf 	b.w	8004538 <__math_uflow>
 8003b7a:	4598      	cmp	r8, r3
 8003b7c:	d20c      	bcs.n	8003b98 <__ieee754_pow+0x250>
 8003b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2300      	movs	r3, #0
 8003b86:	f7fc ffb9 	bl	8000afc <__aeabi_dcmplt>
 8003b8a:	3800      	subs	r0, #0
 8003b8c:	bf18      	it	ne
 8003b8e:	2001      	movne	r0, #1
 8003b90:	f1b9 0f00 	cmp.w	r9, #0
 8003b94:	daec      	bge.n	8003b70 <__ieee754_pow+0x228>
 8003b96:	e7df      	b.n	8003b58 <__ieee754_pow+0x210>
 8003b98:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <__ieee754_pow+0x294>)
 8003b9a:	4598      	cmp	r8, r3
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	d924      	bls.n	8003bec <__ieee754_pow+0x2a4>
 8003ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f7fc ffa8 	bl	8000afc <__aeabi_dcmplt>
 8003bac:	3800      	subs	r0, #0
 8003bae:	bf18      	it	ne
 8003bb0:	2001      	movne	r0, #1
 8003bb2:	f1b9 0f00 	cmp.w	r9, #0
 8003bb6:	dccf      	bgt.n	8003b58 <__ieee754_pow+0x210>
 8003bb8:	e7da      	b.n	8003b70 <__ieee754_pow+0x228>
 8003bba:	bf00      	nop
 8003bbc:	f3af 8000 	nop.w
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	3ff00000 	.word	0x3ff00000
 8003bc8:	00000000 	.word	0x00000000
 8003bcc:	bff00000 	.word	0xbff00000
 8003bd0:	fff00000 	.word	0xfff00000
 8003bd4:	7ff00000 	.word	0x7ff00000
 8003bd8:	433fffff 	.word	0x433fffff
 8003bdc:	3ff00000 	.word	0x3ff00000
 8003be0:	3fefffff 	.word	0x3fefffff
 8003be4:	3fe00000 	.word	0x3fe00000
 8003be8:	43f00000 	.word	0x43f00000
 8003bec:	4b5a      	ldr	r3, [pc, #360]	@ (8003d58 <__ieee754_pow+0x410>)
 8003bee:	f7fc fb5b 	bl	80002a8 <__aeabi_dsub>
 8003bf2:	a351      	add	r3, pc, #324	@ (adr r3, 8003d38 <__ieee754_pow+0x3f0>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	460d      	mov	r5, r1
 8003bfc:	f7fc fd0c 	bl	8000618 <__aeabi_dmul>
 8003c00:	a34f      	add	r3, pc, #316	@ (adr r3, 8003d40 <__ieee754_pow+0x3f8>)
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	4606      	mov	r6, r0
 8003c08:	460f      	mov	r7, r1
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc fd03 	bl	8000618 <__aeabi_dmul>
 8003c12:	4b52      	ldr	r3, [pc, #328]	@ (8003d5c <__ieee754_pow+0x414>)
 8003c14:	4682      	mov	sl, r0
 8003c16:	468b      	mov	fp, r1
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc fcfb 	bl	8000618 <__aeabi_dmul>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	a148      	add	r1, pc, #288	@ (adr r1, 8003d48 <__ieee754_pow+0x400>)
 8003c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c2c:	f7fc fb3c 	bl	80002a8 <__aeabi_dsub>
 8003c30:	4622      	mov	r2, r4
 8003c32:	462b      	mov	r3, r5
 8003c34:	f7fc fcf0 	bl	8000618 <__aeabi_dmul>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	4948      	ldr	r1, [pc, #288]	@ (8003d60 <__ieee754_pow+0x418>)
 8003c40:	f7fc fb32 	bl	80002a8 <__aeabi_dsub>
 8003c44:	4622      	mov	r2, r4
 8003c46:	4680      	mov	r8, r0
 8003c48:	4689      	mov	r9, r1
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fce2 	bl	8000618 <__aeabi_dmul>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4640      	mov	r0, r8
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc fcdc 	bl	8000618 <__aeabi_dmul>
 8003c60:	a33b      	add	r3, pc, #236	@ (adr r3, 8003d50 <__ieee754_pow+0x408>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fcd7 	bl	8000618 <__aeabi_dmul>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4650      	mov	r0, sl
 8003c70:	4659      	mov	r1, fp
 8003c72:	f7fc fb19 	bl	80002a8 <__aeabi_dsub>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4680      	mov	r8, r0
 8003c7c:	4689      	mov	r9, r1
 8003c7e:	4630      	mov	r0, r6
 8003c80:	4639      	mov	r1, r7
 8003c82:	f7fc fb13 	bl	80002ac <__adddf3>
 8003c86:	2400      	movs	r4, #0
 8003c88:	4632      	mov	r2, r6
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	460d      	mov	r5, r1
 8003c90:	f7fc fb0a 	bl	80002a8 <__aeabi_dsub>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	f7fc fb04 	bl	80002a8 <__aeabi_dsub>
 8003ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9304      	str	r3, [sp, #16]
 8003cac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	460f      	mov	r7, r1
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	465b      	mov	r3, fp
 8003cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cbc:	f7fc faf4 	bl	80002a8 <__aeabi_dsub>
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	f7fc fca8 	bl	8000618 <__aeabi_dmul>
 8003cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ccc:	4680      	mov	r8, r0
 8003cce:	4689      	mov	r9, r1
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	f7fc fca0 	bl	8000618 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4640      	mov	r0, r8
 8003cde:	4649      	mov	r1, r9
 8003ce0:	f7fc fae4 	bl	80002ac <__adddf3>
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	465b      	mov	r3, fp
 8003ce8:	4606      	mov	r6, r0
 8003cea:	460f      	mov	r7, r1
 8003cec:	4620      	mov	r0, r4
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fc fc92 	bl	8000618 <__aeabi_dmul>
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4680      	mov	r8, r0
 8003cfa:	4689      	mov	r9, r1
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc fad4 	bl	80002ac <__adddf3>
 8003d04:	4b17      	ldr	r3, [pc, #92]	@ (8003d64 <__ieee754_pow+0x41c>)
 8003d06:	4299      	cmp	r1, r3
 8003d08:	4604      	mov	r4, r0
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	468a      	mov	sl, r1
 8003d0e:	468b      	mov	fp, r1
 8003d10:	f340 82ef 	ble.w	80042f2 <__ieee754_pow+0x9aa>
 8003d14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003d18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003d1c:	4303      	orrs	r3, r0
 8003d1e:	f000 81e8 	beq.w	80040f2 <__ieee754_pow+0x7aa>
 8003d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f7fc fee7 	bl	8000afc <__aeabi_dcmplt>
 8003d2e:	3800      	subs	r0, #0
 8003d30:	bf18      	it	ne
 8003d32:	2001      	movne	r0, #1
 8003d34:	e710      	b.n	8003b58 <__ieee754_pow+0x210>
 8003d36:	bf00      	nop
 8003d38:	60000000 	.word	0x60000000
 8003d3c:	3ff71547 	.word	0x3ff71547
 8003d40:	f85ddf44 	.word	0xf85ddf44
 8003d44:	3e54ae0b 	.word	0x3e54ae0b
 8003d48:	55555555 	.word	0x55555555
 8003d4c:	3fd55555 	.word	0x3fd55555
 8003d50:	652b82fe 	.word	0x652b82fe
 8003d54:	3ff71547 	.word	0x3ff71547
 8003d58:	3ff00000 	.word	0x3ff00000
 8003d5c:	3fd00000 	.word	0x3fd00000
 8003d60:	3fe00000 	.word	0x3fe00000
 8003d64:	408fffff 	.word	0x408fffff
 8003d68:	4bd5      	ldr	r3, [pc, #852]	@ (80040c0 <__ieee754_pow+0x778>)
 8003d6a:	402b      	ands	r3, r5
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	b92b      	cbnz	r3, 8003d7c <__ieee754_pow+0x434>
 8003d70:	4bd4      	ldr	r3, [pc, #848]	@ (80040c4 <__ieee754_pow+0x77c>)
 8003d72:	f7fc fc51 	bl	8000618 <__aeabi_dmul>
 8003d76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003d7a:	468b      	mov	fp, r1
 8003d7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003d80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003d84:	4413      	add	r3, r2
 8003d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d88:	4bcf      	ldr	r3, [pc, #828]	@ (80040c8 <__ieee754_pow+0x780>)
 8003d8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003d8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003d92:	459b      	cmp	fp, r3
 8003d94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003d98:	dd08      	ble.n	8003dac <__ieee754_pow+0x464>
 8003d9a:	4bcc      	ldr	r3, [pc, #816]	@ (80040cc <__ieee754_pow+0x784>)
 8003d9c:	459b      	cmp	fp, r3
 8003d9e:	f340 81a5 	ble.w	80040ec <__ieee754_pow+0x7a4>
 8003da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003da4:	3301      	adds	r3, #1
 8003da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003da8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003dac:	f04f 0a00 	mov.w	sl, #0
 8003db0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003db6:	4bc6      	ldr	r3, [pc, #792]	@ (80040d0 <__ieee754_pow+0x788>)
 8003db8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003dbc:	ed93 7b00 	vldr	d7, [r3]
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	ec53 2b17 	vmov	r2, r3, d7
 8003dc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003dca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dce:	f7fc fa6b 	bl	80002a8 <__aeabi_dsub>
 8003dd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460f      	mov	r7, r1
 8003dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dde:	f7fc fa65 	bl	80002ac <__adddf3>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	2000      	movs	r0, #0
 8003de8:	49ba      	ldr	r1, [pc, #744]	@ (80040d4 <__ieee754_pow+0x78c>)
 8003dea:	f7fc fd3f 	bl	800086c <__aeabi_ddiv>
 8003dee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4630      	mov	r0, r6
 8003df8:	4639      	mov	r1, r7
 8003dfa:	f7fc fc0d 	bl	8000618 <__aeabi_dmul>
 8003dfe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003e06:	106d      	asrs	r5, r5, #1
 8003e08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003e0c:	f04f 0b00 	mov.w	fp, #0
 8003e10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003e14:	4661      	mov	r1, ip
 8003e16:	2200      	movs	r2, #0
 8003e18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003e1c:	4658      	mov	r0, fp
 8003e1e:	46e1      	mov	r9, ip
 8003e20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003e24:	4614      	mov	r4, r2
 8003e26:	461d      	mov	r5, r3
 8003e28:	f7fc fbf6 	bl	8000618 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4630      	mov	r0, r6
 8003e32:	4639      	mov	r1, r7
 8003e34:	f7fc fa38 	bl	80002a8 <__aeabi_dsub>
 8003e38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	460f      	mov	r7, r1
 8003e40:	4620      	mov	r0, r4
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7fc fa30 	bl	80002a8 <__aeabi_dsub>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e50:	f7fc fa2a 	bl	80002a8 <__aeabi_dsub>
 8003e54:	465a      	mov	r2, fp
 8003e56:	464b      	mov	r3, r9
 8003e58:	f7fc fbde 	bl	8000618 <__aeabi_dmul>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4630      	mov	r0, r6
 8003e62:	4639      	mov	r1, r7
 8003e64:	f7fc fa20 	bl	80002a8 <__aeabi_dsub>
 8003e68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e6c:	f7fc fbd4 	bl	8000618 <__aeabi_dmul>
 8003e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fbcc 	bl	8000618 <__aeabi_dmul>
 8003e80:	a37d      	add	r3, pc, #500	@ (adr r3, 8004078 <__ieee754_pow+0x730>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	4604      	mov	r4, r0
 8003e88:	460d      	mov	r5, r1
 8003e8a:	f7fc fbc5 	bl	8000618 <__aeabi_dmul>
 8003e8e:	a37c      	add	r3, pc, #496	@ (adr r3, 8004080 <__ieee754_pow+0x738>)
 8003e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e94:	f7fc fa0a 	bl	80002ac <__adddf3>
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	f7fc fbbc 	bl	8000618 <__aeabi_dmul>
 8003ea0:	a379      	add	r3, pc, #484	@ (adr r3, 8004088 <__ieee754_pow+0x740>)
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f7fc fa01 	bl	80002ac <__adddf3>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f7fc fbb3 	bl	8000618 <__aeabi_dmul>
 8003eb2:	a377      	add	r3, pc, #476	@ (adr r3, 8004090 <__ieee754_pow+0x748>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f7fc f9f8 	bl	80002ac <__adddf3>
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	f7fc fbaa 	bl	8000618 <__aeabi_dmul>
 8003ec4:	a374      	add	r3, pc, #464	@ (adr r3, 8004098 <__ieee754_pow+0x750>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc f9ef 	bl	80002ac <__adddf3>
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f7fc fba1 	bl	8000618 <__aeabi_dmul>
 8003ed6:	a372      	add	r3, pc, #456	@ (adr r3, 80040a0 <__ieee754_pow+0x758>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc f9e6 	bl	80002ac <__adddf3>
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	460f      	mov	r7, r1
 8003ee6:	462b      	mov	r3, r5
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc fb94 	bl	8000618 <__aeabi_dmul>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	4639      	mov	r1, r7
 8003ef8:	f7fc fb8e 	bl	8000618 <__aeabi_dmul>
 8003efc:	465a      	mov	r2, fp
 8003efe:	4604      	mov	r4, r0
 8003f00:	460d      	mov	r5, r1
 8003f02:	464b      	mov	r3, r9
 8003f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f08:	f7fc f9d0 	bl	80002ac <__adddf3>
 8003f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f10:	f7fc fb82 	bl	8000618 <__aeabi_dmul>
 8003f14:	4622      	mov	r2, r4
 8003f16:	462b      	mov	r3, r5
 8003f18:	f7fc f9c8 	bl	80002ac <__adddf3>
 8003f1c:	465a      	mov	r2, fp
 8003f1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003f22:	464b      	mov	r3, r9
 8003f24:	4658      	mov	r0, fp
 8003f26:	4649      	mov	r1, r9
 8003f28:	f7fc fb76 	bl	8000618 <__aeabi_dmul>
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <__ieee754_pow+0x790>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	4606      	mov	r6, r0
 8003f32:	460f      	mov	r7, r1
 8003f34:	f7fc f9ba 	bl	80002ac <__adddf3>
 8003f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f3c:	f7fc f9b6 	bl	80002ac <__adddf3>
 8003f40:	46d8      	mov	r8, fp
 8003f42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003f46:	460d      	mov	r5, r1
 8003f48:	465a      	mov	r2, fp
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	4649      	mov	r1, r9
 8003f50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003f54:	f7fc fb60 	bl	8000618 <__aeabi_dmul>
 8003f58:	465c      	mov	r4, fp
 8003f5a:	4680      	mov	r8, r0
 8003f5c:	4689      	mov	r9, r1
 8003f5e:	4b5e      	ldr	r3, [pc, #376]	@ (80040d8 <__ieee754_pow+0x790>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc f99f 	bl	80002a8 <__aeabi_dsub>
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	f7fc f99b 	bl	80002a8 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003f7a:	f7fc f995 	bl	80002a8 <__aeabi_dsub>
 8003f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f82:	f7fc fb49 	bl	8000618 <__aeabi_dmul>
 8003f86:	4622      	mov	r2, r4
 8003f88:	4606      	mov	r6, r0
 8003f8a:	460f      	mov	r7, r1
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f92:	f7fc fb41 	bl	8000618 <__aeabi_dmul>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc f985 	bl	80002ac <__adddf3>
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460f      	mov	r7, r1
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc f97d 	bl	80002ac <__adddf3>
 8003fb2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003fb6:	a33c      	add	r3, pc, #240	@ (adr r3, 80040a8 <__ieee754_pow+0x760>)
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	4658      	mov	r0, fp
 8003fbe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	f7fc fb28 	bl	8000618 <__aeabi_dmul>
 8003fc8:	465c      	mov	r4, fp
 8003fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fce:	4642      	mov	r2, r8
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	f7fc f967 	bl	80002a8 <__aeabi_dsub>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4630      	mov	r0, r6
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	f7fc f961 	bl	80002a8 <__aeabi_dsub>
 8003fe6:	a332      	add	r3, pc, #200	@ (adr r3, 80040b0 <__ieee754_pow+0x768>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fb14 	bl	8000618 <__aeabi_dmul>
 8003ff0:	a331      	add	r3, pc, #196	@ (adr r3, 80040b8 <__ieee754_pow+0x770>)
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	460f      	mov	r7, r1
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f7fc fb0b 	bl	8000618 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc f94f 	bl	80002ac <__adddf3>
 800400e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004010:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <__ieee754_pow+0x794>)
 8004012:	4413      	add	r3, r2
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc f948 	bl	80002ac <__adddf3>
 800401c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004020:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004022:	f7fc fa8f 	bl	8000544 <__aeabi_i2d>
 8004026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004028:	4b2d      	ldr	r3, [pc, #180]	@ (80040e0 <__ieee754_pow+0x798>)
 800402a:	4413      	add	r3, r2
 800402c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004030:	4606      	mov	r6, r0
 8004032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004036:	460f      	mov	r7, r1
 8004038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800403c:	f7fc f936 	bl	80002ac <__adddf3>
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	f7fc f932 	bl	80002ac <__adddf3>
 8004048:	4632      	mov	r2, r6
 800404a:	463b      	mov	r3, r7
 800404c:	f7fc f92e 	bl	80002ac <__adddf3>
 8004050:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004054:	4632      	mov	r2, r6
 8004056:	463b      	mov	r3, r7
 8004058:	4658      	mov	r0, fp
 800405a:	460d      	mov	r5, r1
 800405c:	f7fc f924 	bl	80002a8 <__aeabi_dsub>
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	f7fc f920 	bl	80002a8 <__aeabi_dsub>
 8004068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800406c:	f7fc f91c 	bl	80002a8 <__aeabi_dsub>
 8004070:	465c      	mov	r4, fp
 8004072:	4602      	mov	r2, r0
 8004074:	e036      	b.n	80040e4 <__ieee754_pow+0x79c>
 8004076:	bf00      	nop
 8004078:	4a454eef 	.word	0x4a454eef
 800407c:	3fca7e28 	.word	0x3fca7e28
 8004080:	93c9db65 	.word	0x93c9db65
 8004084:	3fcd864a 	.word	0x3fcd864a
 8004088:	a91d4101 	.word	0xa91d4101
 800408c:	3fd17460 	.word	0x3fd17460
 8004090:	518f264d 	.word	0x518f264d
 8004094:	3fd55555 	.word	0x3fd55555
 8004098:	db6fabff 	.word	0xdb6fabff
 800409c:	3fdb6db6 	.word	0x3fdb6db6
 80040a0:	33333303 	.word	0x33333303
 80040a4:	3fe33333 	.word	0x3fe33333
 80040a8:	e0000000 	.word	0xe0000000
 80040ac:	3feec709 	.word	0x3feec709
 80040b0:	dc3a03fd 	.word	0xdc3a03fd
 80040b4:	3feec709 	.word	0x3feec709
 80040b8:	145b01f5 	.word	0x145b01f5
 80040bc:	be3e2fe0 	.word	0xbe3e2fe0
 80040c0:	7ff00000 	.word	0x7ff00000
 80040c4:	43400000 	.word	0x43400000
 80040c8:	0003988e 	.word	0x0003988e
 80040cc:	000bb679 	.word	0x000bb679
 80040d0:	08004860 	.word	0x08004860
 80040d4:	3ff00000 	.word	0x3ff00000
 80040d8:	40080000 	.word	0x40080000
 80040dc:	08004840 	.word	0x08004840
 80040e0:	08004850 	.word	0x08004850
 80040e4:	460b      	mov	r3, r1
 80040e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ea:	e5d7      	b.n	8003c9c <__ieee754_pow+0x354>
 80040ec:	f04f 0a01 	mov.w	sl, #1
 80040f0:	e65e      	b.n	8003db0 <__ieee754_pow+0x468>
 80040f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 80043c4 <__ieee754_pow+0xa7c>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	4630      	mov	r0, r6
 80040fa:	4639      	mov	r1, r7
 80040fc:	f7fc f8d6 	bl	80002ac <__adddf3>
 8004100:	4642      	mov	r2, r8
 8004102:	e9cd 0100 	strd	r0, r1, [sp]
 8004106:	464b      	mov	r3, r9
 8004108:	4620      	mov	r0, r4
 800410a:	4629      	mov	r1, r5
 800410c:	f7fc f8cc 	bl	80002a8 <__aeabi_dsub>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004118:	f7fc fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 800411c:	2800      	cmp	r0, #0
 800411e:	f47f ae00 	bne.w	8003d22 <__ieee754_pow+0x3da>
 8004122:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8004126:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800412a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800412e:	fa43 fa0a 	asr.w	sl, r3, sl
 8004132:	44da      	add	sl, fp
 8004134:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004138:	489d      	ldr	r0, [pc, #628]	@ (80043b0 <__ieee754_pow+0xa68>)
 800413a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800413e:	4108      	asrs	r0, r1
 8004140:	ea00 030a 	and.w	r3, r0, sl
 8004144:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004148:	f1c1 0114 	rsb	r1, r1, #20
 800414c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004150:	fa4a fa01 	asr.w	sl, sl, r1
 8004154:	f1bb 0f00 	cmp.w	fp, #0
 8004158:	4640      	mov	r0, r8
 800415a:	4649      	mov	r1, r9
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	bfb8      	it	lt
 8004162:	f1ca 0a00 	rsblt	sl, sl, #0
 8004166:	f7fc f89f 	bl	80002a8 <__aeabi_dsub>
 800416a:	4680      	mov	r8, r0
 800416c:	4689      	mov	r9, r1
 800416e:	4632      	mov	r2, r6
 8004170:	463b      	mov	r3, r7
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fc f899 	bl	80002ac <__adddf3>
 800417a:	2400      	movs	r4, #0
 800417c:	a37c      	add	r3, pc, #496	@ (adr r3, 8004370 <__ieee754_pow+0xa28>)
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	4620      	mov	r0, r4
 8004184:	460d      	mov	r5, r1
 8004186:	f7fc fa47 	bl	8000618 <__aeabi_dmul>
 800418a:	4642      	mov	r2, r8
 800418c:	e9cd 0100 	strd	r0, r1, [sp]
 8004190:	464b      	mov	r3, r9
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fc f887 	bl	80002a8 <__aeabi_dsub>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4630      	mov	r0, r6
 80041a0:	4639      	mov	r1, r7
 80041a2:	f7fc f881 	bl	80002a8 <__aeabi_dsub>
 80041a6:	a374      	add	r3, pc, #464	@ (adr r3, 8004378 <__ieee754_pow+0xa30>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc fa34 	bl	8000618 <__aeabi_dmul>
 80041b0:	a373      	add	r3, pc, #460	@ (adr r3, 8004380 <__ieee754_pow+0xa38>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	4680      	mov	r8, r0
 80041b8:	4689      	mov	r9, r1
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fc fa2b 	bl	8000618 <__aeabi_dmul>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f7fc f86f 	bl	80002ac <__adddf3>
 80041ce:	4604      	mov	r4, r0
 80041d0:	460d      	mov	r5, r1
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041da:	f7fc f867 	bl	80002ac <__adddf3>
 80041de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041e2:	4680      	mov	r8, r0
 80041e4:	4689      	mov	r9, r1
 80041e6:	f7fc f85f 	bl	80002a8 <__aeabi_dsub>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4620      	mov	r0, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	f7fc f859 	bl	80002a8 <__aeabi_dsub>
 80041f6:	4642      	mov	r2, r8
 80041f8:	4606      	mov	r6, r0
 80041fa:	460f      	mov	r7, r1
 80041fc:	464b      	mov	r3, r9
 80041fe:	4640      	mov	r0, r8
 8004200:	4649      	mov	r1, r9
 8004202:	f7fc fa09 	bl	8000618 <__aeabi_dmul>
 8004206:	a360      	add	r3, pc, #384	@ (adr r3, 8004388 <__ieee754_pow+0xa40>)
 8004208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420c:	4604      	mov	r4, r0
 800420e:	460d      	mov	r5, r1
 8004210:	f7fc fa02 	bl	8000618 <__aeabi_dmul>
 8004214:	a35e      	add	r3, pc, #376	@ (adr r3, 8004390 <__ieee754_pow+0xa48>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f7fc f845 	bl	80002a8 <__aeabi_dsub>
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	f7fc f9f9 	bl	8000618 <__aeabi_dmul>
 8004226:	a35c      	add	r3, pc, #368	@ (adr r3, 8004398 <__ieee754_pow+0xa50>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc f83e 	bl	80002ac <__adddf3>
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	f7fc f9f0 	bl	8000618 <__aeabi_dmul>
 8004238:	a359      	add	r3, pc, #356	@ (adr r3, 80043a0 <__ieee754_pow+0xa58>)
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f7fc f833 	bl	80002a8 <__aeabi_dsub>
 8004242:	4622      	mov	r2, r4
 8004244:	462b      	mov	r3, r5
 8004246:	f7fc f9e7 	bl	8000618 <__aeabi_dmul>
 800424a:	a357      	add	r3, pc, #348	@ (adr r3, 80043a8 <__ieee754_pow+0xa60>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc f82c 	bl	80002ac <__adddf3>
 8004254:	4622      	mov	r2, r4
 8004256:	462b      	mov	r3, r5
 8004258:	f7fc f9de 	bl	8000618 <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4640      	mov	r0, r8
 8004262:	4649      	mov	r1, r9
 8004264:	f7fc f820 	bl	80002a8 <__aeabi_dsub>
 8004268:	4604      	mov	r4, r0
 800426a:	460d      	mov	r5, r1
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4640      	mov	r0, r8
 8004272:	4649      	mov	r1, r9
 8004274:	f7fc f9d0 	bl	8000618 <__aeabi_dmul>
 8004278:	2200      	movs	r2, #0
 800427a:	e9cd 0100 	strd	r0, r1, [sp]
 800427e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004282:	4620      	mov	r0, r4
 8004284:	4629      	mov	r1, r5
 8004286:	f7fc f80f 	bl	80002a8 <__aeabi_dsub>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004292:	f7fc faeb 	bl	800086c <__aeabi_ddiv>
 8004296:	4632      	mov	r2, r6
 8004298:	4604      	mov	r4, r0
 800429a:	460d      	mov	r5, r1
 800429c:	463b      	mov	r3, r7
 800429e:	4640      	mov	r0, r8
 80042a0:	4649      	mov	r1, r9
 80042a2:	f7fc f9b9 	bl	8000618 <__aeabi_dmul>
 80042a6:	4632      	mov	r2, r6
 80042a8:	463b      	mov	r3, r7
 80042aa:	f7fb ffff 	bl	80002ac <__adddf3>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7fb fff7 	bl	80002a8 <__aeabi_dsub>
 80042ba:	4642      	mov	r2, r8
 80042bc:	464b      	mov	r3, r9
 80042be:	f7fb fff3 	bl	80002a8 <__aeabi_dsub>
 80042c2:	460b      	mov	r3, r1
 80042c4:	4602      	mov	r2, r0
 80042c6:	493b      	ldr	r1, [pc, #236]	@ (80043b4 <__ieee754_pow+0xa6c>)
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7fb ffed 	bl	80002a8 <__aeabi_dsub>
 80042ce:	ec41 0b10 	vmov	d0, r0, r1
 80042d2:	ee10 3a90 	vmov	r3, s1
 80042d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042de:	da30      	bge.n	8004342 <__ieee754_pow+0x9fa>
 80042e0:	4650      	mov	r0, sl
 80042e2:	f000 f87d 	bl	80043e0 <scalbn>
 80042e6:	ec51 0b10 	vmov	r0, r1, d0
 80042ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ee:	f7ff bbd2 	b.w	8003a96 <__ieee754_pow+0x14e>
 80042f2:	4c31      	ldr	r4, [pc, #196]	@ (80043b8 <__ieee754_pow+0xa70>)
 80042f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	d91a      	bls.n	8004332 <__ieee754_pow+0x9ea>
 80042fc:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <__ieee754_pow+0xa74>)
 80042fe:	440b      	add	r3, r1
 8004300:	4303      	orrs	r3, r0
 8004302:	d009      	beq.n	8004318 <__ieee754_pow+0x9d0>
 8004304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	f7fc fbf6 	bl	8000afc <__aeabi_dcmplt>
 8004310:	3800      	subs	r0, #0
 8004312:	bf18      	it	ne
 8004314:	2001      	movne	r0, #1
 8004316:	e42b      	b.n	8003b70 <__ieee754_pow+0x228>
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	f7fb ffc4 	bl	80002a8 <__aeabi_dsub>
 8004320:	4632      	mov	r2, r6
 8004322:	463b      	mov	r3, r7
 8004324:	f7fc fbfe 	bl	8000b24 <__aeabi_dcmpge>
 8004328:	2800      	cmp	r0, #0
 800432a:	d1eb      	bne.n	8004304 <__ieee754_pow+0x9bc>
 800432c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80043cc <__ieee754_pow+0xa84>
 8004330:	e6f7      	b.n	8004122 <__ieee754_pow+0x7da>
 8004332:	469a      	mov	sl, r3
 8004334:	4b22      	ldr	r3, [pc, #136]	@ (80043c0 <__ieee754_pow+0xa78>)
 8004336:	459a      	cmp	sl, r3
 8004338:	f63f aef3 	bhi.w	8004122 <__ieee754_pow+0x7da>
 800433c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004340:	e715      	b.n	800416e <__ieee754_pow+0x826>
 8004342:	ec51 0b10 	vmov	r0, r1, d0
 8004346:	4619      	mov	r1, r3
 8004348:	e7cf      	b.n	80042ea <__ieee754_pow+0x9a2>
 800434a:	491a      	ldr	r1, [pc, #104]	@ (80043b4 <__ieee754_pow+0xa6c>)
 800434c:	2000      	movs	r0, #0
 800434e:	f7ff bb18 	b.w	8003982 <__ieee754_pow+0x3a>
 8004352:	2000      	movs	r0, #0
 8004354:	2100      	movs	r1, #0
 8004356:	f7ff bb14 	b.w	8003982 <__ieee754_pow+0x3a>
 800435a:	4630      	mov	r0, r6
 800435c:	4639      	mov	r1, r7
 800435e:	f7ff bb10 	b.w	8003982 <__ieee754_pow+0x3a>
 8004362:	460c      	mov	r4, r1
 8004364:	f7ff bb5e 	b.w	8003a24 <__ieee754_pow+0xdc>
 8004368:	2400      	movs	r4, #0
 800436a:	f7ff bb49 	b.w	8003a00 <__ieee754_pow+0xb8>
 800436e:	bf00      	nop
 8004370:	00000000 	.word	0x00000000
 8004374:	3fe62e43 	.word	0x3fe62e43
 8004378:	fefa39ef 	.word	0xfefa39ef
 800437c:	3fe62e42 	.word	0x3fe62e42
 8004380:	0ca86c39 	.word	0x0ca86c39
 8004384:	be205c61 	.word	0xbe205c61
 8004388:	72bea4d0 	.word	0x72bea4d0
 800438c:	3e663769 	.word	0x3e663769
 8004390:	c5d26bf1 	.word	0xc5d26bf1
 8004394:	3ebbbd41 	.word	0x3ebbbd41
 8004398:	af25de2c 	.word	0xaf25de2c
 800439c:	3f11566a 	.word	0x3f11566a
 80043a0:	16bebd93 	.word	0x16bebd93
 80043a4:	3f66c16c 	.word	0x3f66c16c
 80043a8:	5555553e 	.word	0x5555553e
 80043ac:	3fc55555 	.word	0x3fc55555
 80043b0:	fff00000 	.word	0xfff00000
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	4090cbff 	.word	0x4090cbff
 80043bc:	3f6f3400 	.word	0x3f6f3400
 80043c0:	3fe00000 	.word	0x3fe00000
 80043c4:	652b82fe 	.word	0x652b82fe
 80043c8:	3c971547 	.word	0x3c971547
 80043cc:	4090cc00 	.word	0x4090cc00

080043d0 <fabs>:
 80043d0:	ec51 0b10 	vmov	r0, r1, d0
 80043d4:	4602      	mov	r2, r0
 80043d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80043da:	ec43 2b10 	vmov	d0, r2, r3
 80043de:	4770      	bx	lr

080043e0 <scalbn>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	ec55 4b10 	vmov	r4, r5, d0
 80043e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80043ea:	4606      	mov	r6, r0
 80043ec:	462b      	mov	r3, r5
 80043ee:	b991      	cbnz	r1, 8004416 <scalbn+0x36>
 80043f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80043f4:	4323      	orrs	r3, r4
 80043f6:	d03d      	beq.n	8004474 <scalbn+0x94>
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <scalbn+0xf0>)
 80043fa:	4620      	mov	r0, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	2200      	movs	r2, #0
 8004400:	f7fc f90a 	bl	8000618 <__aeabi_dmul>
 8004404:	4b33      	ldr	r3, [pc, #204]	@ (80044d4 <scalbn+0xf4>)
 8004406:	429e      	cmp	r6, r3
 8004408:	4604      	mov	r4, r0
 800440a:	460d      	mov	r5, r1
 800440c:	da0f      	bge.n	800442e <scalbn+0x4e>
 800440e:	a328      	add	r3, pc, #160	@ (adr r3, 80044b0 <scalbn+0xd0>)
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	e01e      	b.n	8004454 <scalbn+0x74>
 8004416:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800441a:	4291      	cmp	r1, r2
 800441c:	d10b      	bne.n	8004436 <scalbn+0x56>
 800441e:	4622      	mov	r2, r4
 8004420:	4620      	mov	r0, r4
 8004422:	4629      	mov	r1, r5
 8004424:	f7fb ff42 	bl	80002ac <__adddf3>
 8004428:	4604      	mov	r4, r0
 800442a:	460d      	mov	r5, r1
 800442c:	e022      	b.n	8004474 <scalbn+0x94>
 800442e:	460b      	mov	r3, r1
 8004430:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004434:	3936      	subs	r1, #54	@ 0x36
 8004436:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800443a:	4296      	cmp	r6, r2
 800443c:	dd0d      	ble.n	800445a <scalbn+0x7a>
 800443e:	2d00      	cmp	r5, #0
 8004440:	a11d      	add	r1, pc, #116	@ (adr r1, 80044b8 <scalbn+0xd8>)
 8004442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004446:	da02      	bge.n	800444e <scalbn+0x6e>
 8004448:	a11d      	add	r1, pc, #116	@ (adr r1, 80044c0 <scalbn+0xe0>)
 800444a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800444e:	a31a      	add	r3, pc, #104	@ (adr r3, 80044b8 <scalbn+0xd8>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc f8e0 	bl	8000618 <__aeabi_dmul>
 8004458:	e7e6      	b.n	8004428 <scalbn+0x48>
 800445a:	1872      	adds	r2, r6, r1
 800445c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004460:	428a      	cmp	r2, r1
 8004462:	dcec      	bgt.n	800443e <scalbn+0x5e>
 8004464:	2a00      	cmp	r2, #0
 8004466:	dd08      	ble.n	800447a <scalbn+0x9a>
 8004468:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800446c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004470:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004474:	ec45 4b10 	vmov	d0, r4, r5
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800447e:	da08      	bge.n	8004492 <scalbn+0xb2>
 8004480:	2d00      	cmp	r5, #0
 8004482:	a10b      	add	r1, pc, #44	@ (adr r1, 80044b0 <scalbn+0xd0>)
 8004484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004488:	dac1      	bge.n	800440e <scalbn+0x2e>
 800448a:	a10f      	add	r1, pc, #60	@ (adr r1, 80044c8 <scalbn+0xe8>)
 800448c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004490:	e7bd      	b.n	800440e <scalbn+0x2e>
 8004492:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004496:	3236      	adds	r2, #54	@ 0x36
 8004498:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800449c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80044a0:	4620      	mov	r0, r4
 80044a2:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <scalbn+0xf8>)
 80044a4:	4629      	mov	r1, r5
 80044a6:	2200      	movs	r2, #0
 80044a8:	e7d4      	b.n	8004454 <scalbn+0x74>
 80044aa:	bf00      	nop
 80044ac:	f3af 8000 	nop.w
 80044b0:	c2f8f359 	.word	0xc2f8f359
 80044b4:	01a56e1f 	.word	0x01a56e1f
 80044b8:	8800759c 	.word	0x8800759c
 80044bc:	7e37e43c 	.word	0x7e37e43c
 80044c0:	8800759c 	.word	0x8800759c
 80044c4:	fe37e43c 	.word	0xfe37e43c
 80044c8:	c2f8f359 	.word	0xc2f8f359
 80044cc:	81a56e1f 	.word	0x81a56e1f
 80044d0:	43500000 	.word	0x43500000
 80044d4:	ffff3cb0 	.word	0xffff3cb0
 80044d8:	3c900000 	.word	0x3c900000

080044dc <with_errno>:
 80044dc:	b510      	push	{r4, lr}
 80044de:	ed2d 8b02 	vpush	{d8}
 80044e2:	eeb0 8a40 	vmov.f32	s16, s0
 80044e6:	eef0 8a60 	vmov.f32	s17, s1
 80044ea:	4604      	mov	r4, r0
 80044ec:	f7fe fbe6 	bl	8002cbc <__errno>
 80044f0:	eeb0 0a48 	vmov.f32	s0, s16
 80044f4:	eef0 0a68 	vmov.f32	s1, s17
 80044f8:	ecbd 8b02 	vpop	{d8}
 80044fc:	6004      	str	r4, [r0, #0]
 80044fe:	bd10      	pop	{r4, pc}

08004500 <xflow>:
 8004500:	4603      	mov	r3, r0
 8004502:	b507      	push	{r0, r1, r2, lr}
 8004504:	ec51 0b10 	vmov	r0, r1, d0
 8004508:	b183      	cbz	r3, 800452c <xflow+0x2c>
 800450a:	4602      	mov	r2, r0
 800450c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004510:	e9cd 2300 	strd	r2, r3, [sp]
 8004514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004518:	f7fc f87e 	bl	8000618 <__aeabi_dmul>
 800451c:	ec41 0b10 	vmov	d0, r0, r1
 8004520:	2022      	movs	r0, #34	@ 0x22
 8004522:	b003      	add	sp, #12
 8004524:	f85d eb04 	ldr.w	lr, [sp], #4
 8004528:	f7ff bfd8 	b.w	80044dc <with_errno>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	e7ee      	b.n	8004510 <xflow+0x10>
 8004532:	0000      	movs	r0, r0
 8004534:	0000      	movs	r0, r0
	...

08004538 <__math_uflow>:
 8004538:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004540 <__math_uflow+0x8>
 800453c:	f7ff bfe0 	b.w	8004500 <xflow>
 8004540:	00000000 	.word	0x00000000
 8004544:	10000000 	.word	0x10000000

08004548 <__math_oflow>:
 8004548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004550 <__math_oflow+0x8>
 800454c:	f7ff bfd8 	b.w	8004500 <xflow>
 8004550:	00000000 	.word	0x00000000
 8004554:	70000000 	.word	0x70000000

08004558 <__ieee754_sqrt>:
 8004558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	4a68      	ldr	r2, [pc, #416]	@ (8004700 <__ieee754_sqrt+0x1a8>)
 800455e:	ec55 4b10 	vmov	r4, r5, d0
 8004562:	43aa      	bics	r2, r5
 8004564:	462b      	mov	r3, r5
 8004566:	4621      	mov	r1, r4
 8004568:	d110      	bne.n	800458c <__ieee754_sqrt+0x34>
 800456a:	4622      	mov	r2, r4
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fc f852 	bl	8000618 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4620      	mov	r0, r4
 800457a:	4629      	mov	r1, r5
 800457c:	f7fb fe96 	bl	80002ac <__adddf3>
 8004580:	4604      	mov	r4, r0
 8004582:	460d      	mov	r5, r1
 8004584:	ec45 4b10 	vmov	d0, r4, r5
 8004588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458c:	2d00      	cmp	r5, #0
 800458e:	dc0e      	bgt.n	80045ae <__ieee754_sqrt+0x56>
 8004590:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004594:	4322      	orrs	r2, r4
 8004596:	d0f5      	beq.n	8004584 <__ieee754_sqrt+0x2c>
 8004598:	b19d      	cbz	r5, 80045c2 <__ieee754_sqrt+0x6a>
 800459a:	4622      	mov	r2, r4
 800459c:	4620      	mov	r0, r4
 800459e:	4629      	mov	r1, r5
 80045a0:	f7fb fe82 	bl	80002a8 <__aeabi_dsub>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	f7fc f960 	bl	800086c <__aeabi_ddiv>
 80045ac:	e7e8      	b.n	8004580 <__ieee754_sqrt+0x28>
 80045ae:	152a      	asrs	r2, r5, #20
 80045b0:	d115      	bne.n	80045de <__ieee754_sqrt+0x86>
 80045b2:	2000      	movs	r0, #0
 80045b4:	e009      	b.n	80045ca <__ieee754_sqrt+0x72>
 80045b6:	0acb      	lsrs	r3, r1, #11
 80045b8:	3a15      	subs	r2, #21
 80045ba:	0549      	lsls	r1, r1, #21
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0fa      	beq.n	80045b6 <__ieee754_sqrt+0x5e>
 80045c0:	e7f7      	b.n	80045b2 <__ieee754_sqrt+0x5a>
 80045c2:	462a      	mov	r2, r5
 80045c4:	e7fa      	b.n	80045bc <__ieee754_sqrt+0x64>
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	3001      	adds	r0, #1
 80045ca:	02dc      	lsls	r4, r3, #11
 80045cc:	d5fb      	bpl.n	80045c6 <__ieee754_sqrt+0x6e>
 80045ce:	1e44      	subs	r4, r0, #1
 80045d0:	1b12      	subs	r2, r2, r4
 80045d2:	f1c0 0420 	rsb	r4, r0, #32
 80045d6:	fa21 f404 	lsr.w	r4, r1, r4
 80045da:	4323      	orrs	r3, r4
 80045dc:	4081      	lsls	r1, r0
 80045de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ea:	07d2      	lsls	r2, r2, #31
 80045ec:	bf5c      	itt	pl
 80045ee:	005b      	lslpl	r3, r3, #1
 80045f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80045f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045f8:	bf58      	it	pl
 80045fa:	0049      	lslpl	r1, r1, #1
 80045fc:	2600      	movs	r6, #0
 80045fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004602:	106d      	asrs	r5, r5, #1
 8004604:	0049      	lsls	r1, r1, #1
 8004606:	2016      	movs	r0, #22
 8004608:	4632      	mov	r2, r6
 800460a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800460e:	1917      	adds	r7, r2, r4
 8004610:	429f      	cmp	r7, r3
 8004612:	bfde      	ittt	le
 8004614:	193a      	addle	r2, r7, r4
 8004616:	1bdb      	suble	r3, r3, r7
 8004618:	1936      	addle	r6, r6, r4
 800461a:	0fcf      	lsrs	r7, r1, #31
 800461c:	3801      	subs	r0, #1
 800461e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004622:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004626:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800462a:	d1f0      	bne.n	800460e <__ieee754_sqrt+0xb6>
 800462c:	4604      	mov	r4, r0
 800462e:	2720      	movs	r7, #32
 8004630:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004634:	429a      	cmp	r2, r3
 8004636:	eb00 0e0c 	add.w	lr, r0, ip
 800463a:	db02      	blt.n	8004642 <__ieee754_sqrt+0xea>
 800463c:	d113      	bne.n	8004666 <__ieee754_sqrt+0x10e>
 800463e:	458e      	cmp	lr, r1
 8004640:	d811      	bhi.n	8004666 <__ieee754_sqrt+0x10e>
 8004642:	f1be 0f00 	cmp.w	lr, #0
 8004646:	eb0e 000c 	add.w	r0, lr, ip
 800464a:	da42      	bge.n	80046d2 <__ieee754_sqrt+0x17a>
 800464c:	2800      	cmp	r0, #0
 800464e:	db40      	blt.n	80046d2 <__ieee754_sqrt+0x17a>
 8004650:	f102 0801 	add.w	r8, r2, #1
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	458e      	cmp	lr, r1
 8004658:	bf88      	it	hi
 800465a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800465e:	eba1 010e 	sub.w	r1, r1, lr
 8004662:	4464      	add	r4, ip
 8004664:	4642      	mov	r2, r8
 8004666:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800466a:	3f01      	subs	r7, #1
 800466c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004670:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004674:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004678:	d1dc      	bne.n	8004634 <__ieee754_sqrt+0xdc>
 800467a:	4319      	orrs	r1, r3
 800467c:	d01b      	beq.n	80046b6 <__ieee754_sqrt+0x15e>
 800467e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004704 <__ieee754_sqrt+0x1ac>
 8004682:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004708 <__ieee754_sqrt+0x1b0>
 8004686:	e9da 0100 	ldrd	r0, r1, [sl]
 800468a:	e9db 2300 	ldrd	r2, r3, [fp]
 800468e:	f7fb fe0b 	bl	80002a8 <__aeabi_dsub>
 8004692:	e9da 8900 	ldrd	r8, r9, [sl]
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fc fa37 	bl	8000b10 <__aeabi_dcmple>
 80046a2:	b140      	cbz	r0, 80046b6 <__ieee754_sqrt+0x15e>
 80046a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046a8:	e9da 0100 	ldrd	r0, r1, [sl]
 80046ac:	e9db 2300 	ldrd	r2, r3, [fp]
 80046b0:	d111      	bne.n	80046d6 <__ieee754_sqrt+0x17e>
 80046b2:	3601      	adds	r6, #1
 80046b4:	463c      	mov	r4, r7
 80046b6:	1072      	asrs	r2, r6, #1
 80046b8:	0863      	lsrs	r3, r4, #1
 80046ba:	07f1      	lsls	r1, r6, #31
 80046bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80046c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80046c4:	bf48      	it	mi
 80046c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80046ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80046ce:	4618      	mov	r0, r3
 80046d0:	e756      	b.n	8004580 <__ieee754_sqrt+0x28>
 80046d2:	4690      	mov	r8, r2
 80046d4:	e7be      	b.n	8004654 <__ieee754_sqrt+0xfc>
 80046d6:	f7fb fde9 	bl	80002ac <__adddf3>
 80046da:	e9da 8900 	ldrd	r8, r9, [sl]
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4640      	mov	r0, r8
 80046e4:	4649      	mov	r1, r9
 80046e6:	f7fc fa09 	bl	8000afc <__aeabi_dcmplt>
 80046ea:	b120      	cbz	r0, 80046f6 <__ieee754_sqrt+0x19e>
 80046ec:	1ca0      	adds	r0, r4, #2
 80046ee:	bf08      	it	eq
 80046f0:	3601      	addeq	r6, #1
 80046f2:	3402      	adds	r4, #2
 80046f4:	e7df      	b.n	80046b6 <__ieee754_sqrt+0x15e>
 80046f6:	1c63      	adds	r3, r4, #1
 80046f8:	f023 0401 	bic.w	r4, r3, #1
 80046fc:	e7db      	b.n	80046b6 <__ieee754_sqrt+0x15e>
 80046fe:	bf00      	nop
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	20000078 	.word	0x20000078
 8004708:	20000070 	.word	0x20000070

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
