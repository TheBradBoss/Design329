
LabA5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff0  08002ff0  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002ff0  08002ff0  00003ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff8  08002ff8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ffc  08002ffc  00003ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08003068  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003068  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000587f  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ef  00000000  00000000  00009917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000508  00000000  00000000  0000b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289bb  00000000  00000000  0000bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008274  00000000  00000000  000345b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2285  00000000  00000000  0003c827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012eaac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  0012eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00130b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ed8 	.word	0x08002ed8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002ed8 	.word	0x08002ed8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <DAC_init>:
void 		DAC_init (void);
uint16_t 	DAC_volt_conv( uint16_t voltage );
void		DAC_write ( uint16_t voltage_12bit );


void DAC_init (void) {
 80002a0:	b480      	push	{r7}
 80002a2:	b087      	sub	sp, #28
 80002a4:	af00      	add	r7, sp, #0
	// enable clock for GPIOA & SPI1
	RCC->AHB2ENR |= (DAC_PORT_CLOCK);                // GPIOA: DAC NSS/SCK/SDO
 80002a6:	4b74      	ldr	r3, [pc, #464]	@ (8000478 <DAC_init+0x1d8>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002aa:	4a73      	ldr	r2, [pc, #460]	@ (8000478 <DAC_init+0x1d8>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);                 // SPI1 port
 80002b2:	4b71      	ldr	r3, [pc, #452]	@ (8000478 <DAC_init+0x1d8>)
 80002b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002b6:	4a70      	ldr	r2, [pc, #448]	@ (8000478 <DAC_init+0x1d8>)
 80002b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002bc:	6613      	str	r3, [r2, #96]	@ 0x60

	/* USER ADD GPIO configuration of MODER/PUPDR/OTYPER/OSPEEDR registers HERE */


	uint32_t dac_pins[] = DAC_PINS;
 80002be:	4a6f      	ldr	r2, [pc, #444]	@ (800047c <DAC_init+0x1dc>)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint32_t i = 0; i < DAC_NUM ; i++) {
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	e087      	b.n	80003de <DAC_init+0x13e>
		uint32_t pin = dac_pins[i];
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	3318      	adds	r3, #24
 80002d4:	443b      	add	r3, r7
 80002d6:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80002da:	613b      	str	r3, [r7, #16]
		DAC_PORT->MODER &= ~(0x3 << (pin * 2));
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	693a      	ldr	r2, [r7, #16]
 80002e4:	0052      	lsls	r2, r2, #1
 80002e6:	2103      	movs	r1, #3
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002f4:	400b      	ands	r3, r1
 80002f6:	6013      	str	r3, [r2, #0]
		DAC_PORT->MODER |= (0x2 << (pin * 2));
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	2102      	movs	r1, #2
 8000304:	fa01 f202 	lsl.w	r2, r1, r2
 8000308:	4611      	mov	r1, r2
 800030a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800030e:	430b      	orrs	r3, r1
 8000310:	6013      	str	r3, [r2, #0]
		DAC_PORT->OTYPER &= ~(0x1 << pin);
 8000312:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	2101      	movs	r1, #1
 800031a:	693a      	ldr	r2, [r7, #16]
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	43d2      	mvns	r2, r2
 8000322:	4611      	mov	r1, r2
 8000324:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000328:	400b      	ands	r3, r1
 800032a:	6053      	str	r3, [r2, #4]
		DAC_PORT->OTYPER |= (0x0 << pin);
 800032c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000330:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	6053      	str	r3, [r2, #4]
		DAC_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	693a      	ldr	r2, [r7, #16]
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	2103      	movs	r1, #3
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	43d2      	mvns	r2, r2
 800034a:	4611      	mov	r1, r2
 800034c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000350:	400b      	ands	r3, r1
 8000352:	6093      	str	r3, [r2, #8]
		DAC_PORT->OSPEEDR |= (0x3 << (pin * 2));//Highest speed
 8000354:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	0052      	lsls	r2, r2, #1
 800035e:	2103      	movs	r1, #3
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	4611      	mov	r1, r2
 8000366:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800036a:	430b      	orrs	r3, r1
 800036c:	6093      	str	r3, [r2, #8]
		DAC_PORT->PUPDR &= ~(0x3 << (pin * 2));
 800036e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	693a      	ldr	r2, [r7, #16]
 8000376:	0052      	lsls	r2, r2, #1
 8000378:	2103      	movs	r1, #3
 800037a:	fa01 f202 	lsl.w	r2, r1, r2
 800037e:	43d2      	mvns	r2, r2
 8000380:	4611      	mov	r1, r2
 8000382:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000386:	400b      	ands	r3, r1
 8000388:	60d3      	str	r3, [r2, #12]
		DAC_PORT->BRR |= (0x1 << (pin * 1));	//initialize off
 800038a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800038e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000390:	2101      	movs	r1, #1
 8000392:	693a      	ldr	r2, [r7, #16]
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	4611      	mov	r1, r2
 800039a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800039e:	430b      	orrs	r3, r1
 80003a0:	6293      	str	r3, [r2, #40]	@ 0x28
		GPIOA->AFR[0] &= ~((0x000F << (pin * 4))); // clear for 4 AF
 80003a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	693a      	ldr	r2, [r7, #16]
 80003aa:	0092      	lsls	r2, r2, #2
 80003ac:	210f      	movs	r1, #15
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ba:	400b      	ands	r3, r1
 80003bc:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=  ((0x0005 << (pin * 4))); // set A4 AF to SPI1 (fcn 5)
 80003be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	693a      	ldr	r2, [r7, #16]
 80003c6:	0092      	lsls	r2, r2, #2
 80003c8:	2105      	movs	r1, #5
 80003ca:	fa01 f202 	lsl.w	r2, r1, r2
 80003ce:	4611      	mov	r1, r2
 80003d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6213      	str	r3, [r2, #32]
	for (uint32_t i = 0; i < DAC_NUM ; i++) {
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	f67f af74 	bls.w	80002ce <DAC_init+0x2e>
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~( SPI_CR1_SPE );             	// disable SPI for config
 80003e6:	4b26      	ldr	r3, [pc, #152]	@ (8000480 <DAC_init+0x1e0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a25      	ldr	r2, [pc, #148]	@ (8000480 <DAC_init+0x1e0>)
 80003ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003f0:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_RXONLY );          	// recv-only OFF
 80003f2:	4b23      	ldr	r3, [pc, #140]	@ (8000480 <DAC_init+0x1e0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a22      	ldr	r2, [pc, #136]	@ (8000480 <DAC_init+0x1e0>)
 80003f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003fc:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_LSBFIRST );        	// data bit order MSb:LSb
 80003fe:	4b20      	ldr	r3, [pc, #128]	@ (8000480 <DAC_init+0x1e0>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a1f      	ldr	r2, [pc, #124]	@ (8000480 <DAC_init+0x1e0>)
 8000404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000408:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~( SPI_CR1_CPOL | SPI_CR1_CPHA ); // SCLK polarity:phase = 0:0 // clock should be low in idle state
 800040a:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <DAC_init+0x1e0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a1c      	ldr	r2, [pc, #112]	@ (8000480 <DAC_init+0x1e0>)
 8000410:	f023 0303 	bic.w	r3, r3, #3
 8000414:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |=	 SPI_CR1_MSTR;              	// MCU is SPI controller
 8000416:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <DAC_init+0x1e0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a19      	ldr	r2, [pc, #100]	@ (8000480 <DAC_init+0x1e0>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~( SPI_CR2_TXEIE | SPI_CR2_RXNEIE ); // disable FIFO intrpts
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <DAC_init+0x1e0>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a16      	ldr	r2, [pc, #88]	@ (8000480 <DAC_init+0x1e0>)
 8000428:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800042c:	6053      	str	r3, [r2, #4]
	SPI1->CR2 &= ~( SPI_CR2_FRF);              	// Moto frame format
 800042e:	4b14      	ldr	r3, [pc, #80]	@ (8000480 <DAC_init+0x1e0>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a13      	ldr	r2, [pc, #76]	@ (8000480 <DAC_init+0x1e0>)
 8000434:	f023 0310 	bic.w	r3, r3, #16
 8000438:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_NSSP;              	// auto-generate NSS pulse
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <DAC_init+0x1e0>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	4a10      	ldr	r2, [pc, #64]	@ (8000480 <DAC_init+0x1e0>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_DS;                	// 16-bit data
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <DAC_init+0x1e0>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <DAC_init+0x1e0>)
 800044c:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000450:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	 SPI_CR2_SSOE;              	// enable SS(slave select CS) output
 8000452:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <DAC_init+0x1e0>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <DAC_init+0x1e0>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	6053      	str	r3, [r2, #4]
	// CR1
	SPI1->CR1 |=	 SPI_CR1_SPE;               	// re-enable SPI for ops
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <DAC_init+0x1e0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a07      	ldr	r2, [pc, #28]	@ (8000480 <DAC_init+0x1e0>)
 8000464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000468:	6013      	str	r3, [r2, #0]
//	GPIOA->AFR[0] |=  ((0x0005 << GPIO_AFRL_AFSEL5_Pos)); // set A5 AF to SPI1 (fcn 5)
//	// Pin A7: configure AFR for SPI1_MOSI function
//	GPIOA->AFR[0] &= ~((0x000F << GPIO_AFRL_AFSEL7_Pos)); // clear for bit 7 AF
//	GPIOA->AFR[0] |=  ((0x0005 << GPIO_AFRL_AFSEL7_Pos)); // set A7 AF to SPI1 (fcn 5)

}
 800046a:	bf00      	nop
 800046c:	371c      	adds	r7, #28
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	08002ef0 	.word	0x08002ef0
 8000480:	40013000 	.word	0x40013000

08000484 <DAC_write>:

uint16_t DAC_volt_conv( uint16_t voltage ) {
	// Takes user entered voltage in mV
}

void DAC_write ( uint16_t voltage_12bit ) {
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
	uint16_t red = voltage_12bit;
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	81fb      	strh	r3, [r7, #14]
	while(!(SPI1->SR & SPI_SR_TXE))
 8000492:	bf00      	nop
 8000494:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <DAC_write+0x30>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f003 0302 	and.w	r3, r3, #2
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <DAC_write+0x10>
		;	// Hold when TXE bit is zero
	SPI1->DR = 0x36A7;
 80004a0:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <DAC_write+0x30>)
 80004a2:	f243 62a7 	movw	r2, #13991	@ 0x36a7
 80004a6:	60da      	str	r2, [r3, #12]

}
 80004a8:	bf00      	nop
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40013000 	.word	0x40013000

080004b8 <delay_us>:
// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.

void delay_us(const uint32_t time_us) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <delay_us+0x50>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a11      	ldr	r2, [pc, #68]	@ (800050c <delay_us+0x54>)
 80004c6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ca:	0c9b      	lsrs	r3, r3, #18
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	fb02 f303 	mul.w	r3, r2, r3
 80004d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <delay_us+0x58>)
 80004d4:	3b01      	subs	r3, #1
 80004d6:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <delay_us+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <delay_us+0x58>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <delay_us+0x58>)
 80004e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80004e8:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 80004ea:	bf00      	nop
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <delay_us+0x58>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <delay_us+0x34>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000
 800050c:	431bde83 	.word	0x431bde83
 8000510:	e000e010 	.word	0xe000e010

08000514 <Keypad_Config>:

// Declare local variable
uint8_t debounce_state = 0;	// If key is currently pressed ==1


void Keypad_Config ( void ) {
 8000514:	b490      	push	{r4, r7}
 8000516:	b08c      	sub	sp, #48	@ 0x30
 8000518:	af00      	add	r7, sp, #0
	// pins must be an array with pin numbers.
	// count(number of pins being used) must be entered manually
	RCC->AHB2ENR |= (KEYPAD_PORT_CLOCK);
 800051a:	4b6b      	ldr	r3, [pc, #428]	@ (80006c8 <Keypad_Config+0x1b4>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a6a      	ldr	r2, [pc, #424]	@ (80006c8 <Keypad_Config+0x1b4>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Set columns to outputs
	uint32_t col_pins[] = COL_PINS;
 8000526:	4b69      	ldr	r3, [pc, #420]	@ (80006cc <Keypad_Config+0x1b8>)
 8000528:	f107 0410 	add.w	r4, r7, #16
 800052c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (uint32_t i = 0; i < NUM_COLS; i++) {
 8000532:	2300      	movs	r3, #0
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000536:	e05c      	b.n	80005f2 <Keypad_Config+0xde>
		uint32_t pin = col_pins[i];
 8000538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	3330      	adds	r3, #48	@ 0x30
 800053e:	443b      	add	r3, r7
 8000540:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000544:	623b      	str	r3, [r7, #32]
		KEYPAD_PORT->MODER &= ~(0x3 << (pin * 2));
 8000546:	4b62      	ldr	r3, [pc, #392]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6a3a      	ldr	r2, [r7, #32]
 800054c:	0052      	lsls	r2, r2, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	43d2      	mvns	r2, r2
 8000556:	4611      	mov	r1, r2
 8000558:	4a5d      	ldr	r2, [pc, #372]	@ (80006d0 <Keypad_Config+0x1bc>)
 800055a:	400b      	ands	r3, r1
 800055c:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->MODER |= (0x1 << (pin * 2));	// 01
 800055e:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	0052      	lsls	r2, r2, #1
 8000566:	2101      	movs	r1, #1
 8000568:	fa01 f202 	lsl.w	r2, r1, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a58      	ldr	r2, [pc, #352]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000570:	430b      	orrs	r3, r1
 8000572:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->OTYPER &= ~(0x1 << pin);
 8000574:	4b56      	ldr	r3, [pc, #344]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2101      	movs	r1, #1
 800057a:	6a3a      	ldr	r2, [r7, #32]
 800057c:	fa01 f202 	lsl.w	r2, r1, r2
 8000580:	43d2      	mvns	r2, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a52      	ldr	r2, [pc, #328]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000586:	400b      	ands	r3, r1
 8000588:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OTYPER |= (0x0 << pin);		// 0
 800058a:	4b51      	ldr	r3, [pc, #324]	@ (80006d0 <Keypad_Config+0x1bc>)
 800058c:	4a50      	ldr	r2, [pc, #320]	@ (80006d0 <Keypad_Config+0x1bc>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000592:	4b4f      	ldr	r3, [pc, #316]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	6a3a      	ldr	r2, [r7, #32]
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	2103      	movs	r1, #3
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->OSPEEDR |= (0x3 << (pin * 2));	// Fastest speed
 80005aa:	4b49      	ldr	r3, [pc, #292]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	6a3a      	ldr	r2, [r7, #32]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	2103      	movs	r1, #3
 80005b4:	fa01 f202 	lsl.w	r2, r1, r2
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a45      	ldr	r2, [pc, #276]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 80005c0:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	6a3a      	ldr	r2, [r7, #32]
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	2103      	movs	r1, #3
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a3f      	ldr	r2, [pc, #252]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->PUPDR |= (0x0 << (pin * 2));	// No PU or PD
 80005d8:	4b3d      	ldr	r3, [pc, #244]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005da:	4a3d      	ldr	r2, [pc, #244]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->ODR &= ~(COL_IO);				// Start low
 80005e0:	4b3b      	ldr	r3, [pc, #236]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3a      	ldr	r2, [pc, #232]	@ (80006d0 <Keypad_Config+0x1bc>)
 80005e6:	f023 030f 	bic.w	r3, r3, #15
 80005ea:	6153      	str	r3, [r2, #20]
	for (uint32_t i = 0; i < NUM_COLS; i++) {
 80005ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ee:	3301      	adds	r3, #1
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d99f      	bls.n	8000538 <Keypad_Config+0x24>
	}

	// Set rows to inputs
	uint32_t row_pins[] = ROW_PINS;
 80005f8:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <Keypad_Config+0x1c0>)
 80005fa:	463c      	mov	r4, r7
 80005fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (uint32_t i = 0; i < NUM_ROWS; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000606:	e056      	b.n	80006b6 <Keypad_Config+0x1a2>
		uint32_t pin = row_pins[i];
 8000608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	3330      	adds	r3, #48	@ 0x30
 800060e:	443b      	add	r3, r7
 8000610:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
		KEYPAD_PORT->MODER &= ~(0x3 << (pin * 2));
 8000616:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800061c:	0052      	lsls	r2, r2, #1
 800061e:	2103      	movs	r1, #3
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a29      	ldr	r2, [pc, #164]	@ (80006d0 <Keypad_Config+0x1bc>)
 800062a:	400b      	ands	r3, r1
 800062c:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->MODER |= (0x0 << (pin * 2));
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000630:	4a27      	ldr	r2, [pc, #156]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6013      	str	r3, [r2, #0]
		KEYPAD_PORT->OTYPER &= ~(0x1 << pin);
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	2101      	movs	r1, #1
 800063c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000648:	400b      	ands	r3, r1
 800064a:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OTYPER |= (0x0 << pin);
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <Keypad_Config+0x1bc>)
 800064e:	4a20      	ldr	r2, [pc, #128]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	6053      	str	r3, [r2, #4]
		KEYPAD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	2103      	movs	r1, #3
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	43d2      	mvns	r2, r2
 8000664:	4611      	mov	r1, r2
 8000666:	4a1a      	ldr	r2, [pc, #104]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000668:	400b      	ands	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->OSPEEDR |= (0x3 << (pin * 2));
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <Keypad_Config+0x1bc>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000672:	0052      	lsls	r2, r2, #1
 8000674:	2103      	movs	r1, #3
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <Keypad_Config+0x1bc>)
 800067e:	430b      	orrs	r3, r1
 8000680:	6093      	str	r3, [r2, #8]
		KEYPAD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	2103      	movs	r1, #3
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	43d2      	mvns	r2, r2
 8000692:	4611      	mov	r1, r2
 8000694:	4a0e      	ldr	r2, [pc, #56]	@ (80006d0 <Keypad_Config+0x1bc>)
 8000696:	400b      	ands	r3, r1
 8000698:	60d3      	str	r3, [r2, #12]
		KEYPAD_PORT->PUPDR |= (0x2 << (pin * 2));
 800069a:	4b0d      	ldr	r3, [pc, #52]	@ (80006d0 <Keypad_Config+0x1bc>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	2102      	movs	r1, #2
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a09      	ldr	r2, [pc, #36]	@ (80006d0 <Keypad_Config+0x1bc>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	60d3      	str	r3, [r2, #12]
	for (uint32_t i = 0; i < NUM_ROWS; i++) {
 80006b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b2:	3301      	adds	r3, #1
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d9a5      	bls.n	8000608 <Keypad_Config+0xf4>
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc90      	pop	{r4, r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	08002efc 	.word	0x08002efc
 80006d0:	48000800 	.word	0x48000800
 80006d4:	08002f0c 	.word	0x08002f0c

080006d8 <Keypad_IsAnyKeyPressed>:


int Keypad_IsAnyKeyPressed(void) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
	// drive all COLUMNS HI; see if any ROWS are HI
	// return true if a key is pressed, false if not
	// Debounce only records a single press when button held
	uint16_t settle = 1000;	// Small delay for debounce to settle
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	807b      	strh	r3, [r7, #2]
	uint16_t debounce_count = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	80fb      	strh	r3, [r7, #6]
	if ( debounce_state == 0 ) {
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <Keypad_IsAnyKeyPressed+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d124      	bne.n	800073a <Keypad_IsAnyKeyPressed+0x62>
		KEYPAD_PORT->BSRR |= COL_IO;	// set all columns HI
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <Keypad_IsAnyKeyPressed+0x94>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a1d      	ldr	r2, [pc, #116]	@ (800076c <Keypad_IsAnyKeyPressed+0x94>)
 80006f6:	f043 030f 	orr.w	r3, r3, #15
 80006fa:	6193      	str	r3, [r2, #24]
		for ( uint16_t idx=0; idx<settle; idx++ )   	// let it settle
 80006fc:	2300      	movs	r3, #0
 80006fe:	80bb      	strh	r3, [r7, #4]
 8000700:	e002      	b.n	8000708 <Keypad_IsAnyKeyPressed+0x30>
 8000702:	88bb      	ldrh	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	80bb      	strh	r3, [r7, #4]
 8000708:	88ba      	ldrh	r2, [r7, #4]
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f8      	bcc.n	8000702 <Keypad_IsAnyKeyPressed+0x2a>
			;
		while ( (KEYPAD_PORT->IDR & ROW_IO) != 0 ) {	// Button pressed
 8000710:	e00b      	b.n	800072a <Keypad_IsAnyKeyPressed+0x52>
			debounce_count++;
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	3301      	adds	r3, #1
 8000716:	80fb      	strh	r3, [r7, #6]
			if ( debounce_count > settle ) {			// Button high for awhile
 8000718:	88fa      	ldrh	r2, [r7, #6]
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	429a      	cmp	r2, r3
 800071e:	d904      	bls.n	800072a <Keypad_IsAnyKeyPressed+0x52>
				debounce_state = 1;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <Keypad_IsAnyKeyPressed+0x90>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
				return 1;
 8000726:	2301      	movs	r3, #1
 8000728:	e018      	b.n	800075c <Keypad_IsAnyKeyPressed+0x84>
		while ( (KEYPAD_PORT->IDR & ROW_IO) != 0 ) {	// Button pressed
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <Keypad_IsAnyKeyPressed+0x94>)
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	f403 73b8 	and.w	r3, r3, #368	@ 0x170
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1ed      	bne.n	8000712 <Keypad_IsAnyKeyPressed+0x3a>
			}
		}
		return 0;
 8000736:	2300      	movs	r3, #0
 8000738:	e010      	b.n	800075c <Keypad_IsAnyKeyPressed+0x84>
	}
	if ( debounce_state == 1 ) {	// Button was pressed
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <Keypad_IsAnyKeyPressed+0x90>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d10c      	bne.n	800075c <Keypad_IsAnyKeyPressed+0x84>
		if ( (KEYPAD_PORT->IDR & ROW_IO) == 0 ) {		// Button released
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <Keypad_IsAnyKeyPressed+0x94>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	f403 73b8 	and.w	r3, r3, #368	@ 0x170
 800074a:	2b00      	cmp	r3, #0
 800074c:	d104      	bne.n	8000758 <Keypad_IsAnyKeyPressed+0x80>
			debounce_state = 0;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <Keypad_IsAnyKeyPressed+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
			return 0;
 8000754:	2300      	movs	r3, #0
 8000756:	e001      	b.n	800075c <Keypad_IsAnyKeyPressed+0x84>
		}
		else return  0;
 8000758:	2300      	movs	r3, #0
 800075a:	e7ff      	b.n	800075c <Keypad_IsAnyKeyPressed+0x84>
	}
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	20000084 	.word	0x20000084
 800076c:	48000800 	.word	0x48000800

08000770 <Keypad_WhichKeyIsPressed>:


uint8_t Keypad_WhichKeyIsPressed(void) {
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08f      	sub	sp, #60	@ 0x3c
 8000774:	af00      	add	r7, sp, #0
	// detect and encode a pressed key at {row,col}
	// assumes a previous call to Keypad_IsAnyKeyPressed() returned TRUE
	// verifies the Keypad_IsAnyKeyPressed() result (no debounce here),
	// determines which key is pressed and returns the encoded key ID

	int8_t iRow=0, iCol=0, iKey=0;  // keypad row & col index, key ID result
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800077c:	2300      	movs	r3, #0
 800077e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000782:	2300      	movs	r3, #0
 8000784:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	int8_t bGotKey = 0;             // bool for keypress, 0 = no press
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint16_t settle = 1000;			// Small delay for latching to settle
 800078e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000792:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	uint32_t col_pins[] = COL_PINS;
 8000794:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <Keypad_WhichKeyIsPressed+0x134>)
 8000796:	f107 0410 	add.w	r4, r7, #16
 800079a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800079c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t row_pins[] = ROW_PINS;
 80007a0:	4b41      	ldr	r3, [pc, #260]	@ (80008a8 <Keypad_WhichKeyIsPressed+0x138>)
 80007a2:	463c      	mov	r4, r7
 80007a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	KEYPAD_PORT->ODR &= ~(COL_IO);	// Disable columns from IsAnyKeyPressed
 80007aa:	4b40      	ldr	r3, [pc, #256]	@ (80008ac <Keypad_WhichKeyIsPressed+0x13c>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a3f      	ldr	r2, [pc, #252]	@ (80008ac <Keypad_WhichKeyIsPressed+0x13c>)
 80007b0:	f023 030f 	bic.w	r3, r3, #15
 80007b4:	6153      	str	r3, [r2, #20]

	for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80007bc:	e04c      	b.n	8000858 <Keypad_WhichKeyIsPressed+0xe8>
		// turn column on one by one
		uint32_t pinC = col_pins[iCol];
 80007be:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	3338      	adds	r3, #56	@ 0x38
 80007c6:	443b      	add	r3, r7
 80007c8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
		KEYPAD_PORT->ODR = ((KEYPAD_PORT->ODR & ~(COL_IO)) | (0x1 << pinC ));
 80007ce:	4b37      	ldr	r3, [pc, #220]	@ (80008ac <Keypad_WhichKeyIsPressed+0x13c>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f023 030f 	bic.w	r3, r3, #15
 80007d6:	2101      	movs	r1, #1
 80007d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007da:	fa01 f202 	lsl.w	r2, r1, r2
 80007de:	4611      	mov	r1, r2
 80007e0:	4a32      	ldr	r2, [pc, #200]	@ (80008ac <Keypad_WhichKeyIsPressed+0x13c>)
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6153      	str	r3, [r2, #20]
		for ( uint16_t idx=0; idx<settle; idx++ )   	// let it settle
 80007e6:	2300      	movs	r3, #0
 80007e8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80007ea:	e002      	b.n	80007f2 <Keypad_WhichKeyIsPressed+0x82>
 80007ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007ee:	3301      	adds	r3, #1
 80007f0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80007f2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80007f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3f8      	bcc.n	80007ec <Keypad_WhichKeyIsPressed+0x7c>
			;
		for( iRow = 0; iRow < NUM_ROWS; iRow++ ){		// check each row
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000800:	e01b      	b.n	800083a <Keypad_WhichKeyIsPressed+0xca>
			uint32_t pinR = row_pins[iRow];
 8000802:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	3338      	adds	r3, #56	@ 0x38
 800080a:	443b      	add	r3, r7
 800080c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
			if ( KEYPAD_PORT->IDR & (0x1 << pinR) ) {	// row returned high
 8000812:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <Keypad_WhichKeyIsPressed+0x13c>)
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	2101      	movs	r1, #1
 8000818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800081a:	fa01 f202 	lsl.w	r2, r1, r2
 800081e:	4013      	ands	r3, r2
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <Keypad_WhichKeyIsPressed+0xbc>
				bGotKey = 1;							// key found!
 8000824:	2301      	movs	r3, #1
 8000826:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
				break;
 800082a:	e00a      	b.n	8000842 <Keypad_WhichKeyIsPressed+0xd2>
		for( iRow = 0; iRow < NUM_ROWS; iRow++ ){		// check each row
 800082c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800083a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800083e:	2b03      	cmp	r3, #3
 8000840:	dddf      	ble.n	8000802 <Keypad_WhichKeyIsPressed+0x92>
			}
		}
		if ( bGotKey )
 8000842:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10b      	bne.n	8000862 <Keypad_WhichKeyIsPressed+0xf2>
	for ( iCol = 0; iCol < NUM_COLS; iCol++ ) {
 800084a:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800084e:	b2db      	uxtb	r3, r3
 8000850:	3301      	adds	r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000858:	f997 3036 	ldrsb.w	r3, [r7, #54]	@ 0x36
 800085c:	2b03      	cmp	r3, #3
 800085e:	ddae      	ble.n	80007be <Keypad_WhichKeyIsPressed+0x4e>
 8000860:	e000      	b.n	8000864 <Keypad_WhichKeyIsPressed+0xf4>
			break;
 8000862:	bf00      	nop
	}
	if ( bGotKey ) {
 8000864:	f997 3035 	ldrsb.w	r3, [r7, #53]	@ 0x35
 8000868:	2b00      	cmp	r3, #0
 800086a:	d016      	beq.n	800089a <Keypad_WhichKeyIsPressed+0x12a>
		iKey = ( iRow * NUM_COLS ) + iCol + 1;  		// Gives location 1-16
 800086c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	b2da      	uxtb	r2, r3
 8000874:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000878:	4413      	add	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3301      	adds	r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
		uint8_t KEY_out = Keypad_CheckKeyPressed(iKey);	// get char constant
 8000884:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f811 	bl	80008b0 <Keypad_CheckKeyPressed>
 800088e:	4603      	mov	r3, r0
 8000890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		return( KEY_out );                         		// encoded keypress
 8000894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000898:	e000      	b.n	800089c <Keypad_WhichKeyIsPressed+0x12c>
	}
	return( -1 );                     					// failed
 800089a:	23ff      	movs	r3, #255	@ 0xff

}
 800089c:	4618      	mov	r0, r3
 800089e:	373c      	adds	r7, #60	@ 0x3c
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	08002efc 	.word	0x08002efc
 80008a8:	08002f0c 	.word	0x08002f0c
 80008ac:	48000800 	.word	0x48000800

080008b0 <Keypad_CheckKeyPressed>:

uint8_t Keypad_CheckKeyPressed (uint8_t iKey){
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	// Converts keypad location to its character
	uint8_t var;

	switch (iKey) {
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3b01      	subs	r3, #1
 80008be:	2b0f      	cmp	r3, #15
 80008c0:	d852      	bhi.n	8000968 <Keypad_CheckKeyPressed+0xb8>
 80008c2:	a201      	add	r2, pc, #4	@ (adr r2, 80008c8 <Keypad_CheckKeyPressed+0x18>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	08000909 	.word	0x08000909
 80008cc:	0800090f 	.word	0x0800090f
 80008d0:	08000915 	.word	0x08000915
 80008d4:	0800091b 	.word	0x0800091b
 80008d8:	08000921 	.word	0x08000921
 80008dc:	08000927 	.word	0x08000927
 80008e0:	0800092d 	.word	0x0800092d
 80008e4:	08000933 	.word	0x08000933
 80008e8:	08000939 	.word	0x08000939
 80008ec:	0800093f 	.word	0x0800093f
 80008f0:	08000945 	.word	0x08000945
 80008f4:	0800094b 	.word	0x0800094b
 80008f8:	08000951 	.word	0x08000951
 80008fc:	08000957 	.word	0x08000957
 8000900:	0800095d 	.word	0x0800095d
 8000904:	08000963 	.word	0x08000963
	case 0x01: //Column 1, Row 1
		var = ('1');
 8000908:	2331      	movs	r3, #49	@ 0x31
 800090a:	73fb      	strb	r3, [r7, #15]
		break;
 800090c:	e02f      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>
	case 0x02: //Column 2, Row 1
		var = ('2');
 800090e:	2332      	movs	r3, #50	@ 0x32
 8000910:	73fb      	strb	r3, [r7, #15]
		break;
 8000912:	e02c      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x03: //Column 3, Row 1
		var = ('3');
 8000914:	2333      	movs	r3, #51	@ 0x33
 8000916:	73fb      	strb	r3, [r7, #15]
		break;
 8000918:	e029      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x04: //Column 4, Row 1
		var = ('A');
 800091a:	2341      	movs	r3, #65	@ 0x41
 800091c:	73fb      	strb	r3, [r7, #15]
		break;
 800091e:	e026      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x05: //Column 1, Row 2
		var = ('4');
 8000920:	2334      	movs	r3, #52	@ 0x34
 8000922:	73fb      	strb	r3, [r7, #15]
		break;
 8000924:	e023      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x06: //Column 2, Row 2
		var = ('5');
 8000926:	2335      	movs	r3, #53	@ 0x35
 8000928:	73fb      	strb	r3, [r7, #15]
		break;
 800092a:	e020      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x07: //Column 3, Row 2
		var = ('6');
 800092c:	2336      	movs	r3, #54	@ 0x36
 800092e:	73fb      	strb	r3, [r7, #15]
		break;
 8000930:	e01d      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x08: //Column 4, Row 2
		var = ('B');
 8000932:	2342      	movs	r3, #66	@ 0x42
 8000934:	73fb      	strb	r3, [r7, #15]
		break;
 8000936:	e01a      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x09: //Column 1, Row 3
		var = ('7');
 8000938:	2337      	movs	r3, #55	@ 0x37
 800093a:	73fb      	strb	r3, [r7, #15]
		break;
 800093c:	e017      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0A: //Column 2, Row 3
		var = ('8');
 800093e:	2338      	movs	r3, #56	@ 0x38
 8000940:	73fb      	strb	r3, [r7, #15]
		break;
 8000942:	e014      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0B: //Column 3, Row 3
		var = ('9');
 8000944:	2339      	movs	r3, #57	@ 0x39
 8000946:	73fb      	strb	r3, [r7, #15]
		break;
 8000948:	e011      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0C: //Column 4, Row 3
		var = ('C');
 800094a:	2343      	movs	r3, #67	@ 0x43
 800094c:	73fb      	strb	r3, [r7, #15]
		break;
 800094e:	e00e      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0D: //Column 3, Row 1
		var = ('*');
 8000950:	232a      	movs	r3, #42	@ 0x2a
 8000952:	73fb      	strb	r3, [r7, #15]
		break;
 8000954:	e00b      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0E: //Column 3, Row 2
		var = ('0');
 8000956:	2330      	movs	r3, #48	@ 0x30
 8000958:	73fb      	strb	r3, [r7, #15]
		break;
 800095a:	e008      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x0F: //Column 3, Row 3
		var = ('#');
 800095c:	2323      	movs	r3, #35	@ 0x23
 800095e:	73fb      	strb	r3, [r7, #15]
		break;
 8000960:	e005      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	case 0x10: //Column 3, Row 4
		var = ('D');
 8000962:	2344      	movs	r3, #68	@ 0x44
 8000964:	73fb      	strb	r3, [r7, #15]
		break;
 8000966:	e002      	b.n	800096e <Keypad_CheckKeyPressed+0xbe>

	default:
		var = ('.'); // period for no press (error)
 8000968:	232e      	movs	r3, #46	@ 0x2e
 800096a:	73fb      	strb	r3, [r7, #15]
		break;
 800096c:	bf00      	nop
	}

	return var;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LCD_init>:


//COMMANDS ONLY WORK IF GPIO LCD DB PINS ARE 0,1,2,3


void LCD_init( void )  {
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
	// RCC & GPIO config for LCD port and pins
	RCC->AHB2ENR |= (LCD_PORT_CLOCK);
 8000982:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab8 <LCD_init+0x13c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab8 <LCD_init+0x13c>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Set pins to outputs
	uint32_t lcd_pins[] = LCD_PINS;
 800098e:	4b4b      	ldr	r3, [pc, #300]	@ (8000abc <LCD_init+0x140>)
 8000990:	1d3c      	adds	r4, r7, #4
 8000992:	461d      	mov	r5, r3
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	e895 0003 	ldmia.w	r5, {r0, r1}
 800099c:	e884 0003 	stmia.w	r4, {r0, r1}
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a4:	e05c      	b.n	8000a60 <LCD_init+0xe4>
		uint32_t pin = lcd_pins[i];
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	3328      	adds	r3, #40	@ 0x28
 80009ac:	443b      	add	r3, r7
 80009ae:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80009b2:	61fb      	str	r3, [r7, #28]
		LCD_PORT->MODER &= ~(0x3 << (pin * 2));
 80009b4:	4b42      	ldr	r3, [pc, #264]	@ (8000ac0 <LCD_init+0x144>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	2103      	movs	r1, #3
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ac0 <LCD_init+0x144>)
 80009c8:	400b      	ands	r3, r1
 80009ca:	6013      	str	r3, [r2, #0]
		LCD_PORT->MODER |= (0x1 << (pin * 2));	//Output 01
 80009cc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac0 <LCD_init+0x144>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	0052      	lsls	r2, r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	fa01 f202 	lsl.w	r2, r1, r2
 80009da:	4611      	mov	r1, r2
 80009dc:	4a38      	ldr	r2, [pc, #224]	@ (8000ac0 <LCD_init+0x144>)
 80009de:	430b      	orrs	r3, r1
 80009e0:	6013      	str	r3, [r2, #0]
		LCD_PORT->OTYPER &= ~(0x1 << pin);
 80009e2:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <LCD_init+0x144>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2101      	movs	r1, #1
 80009e8:	69fa      	ldr	r2, [r7, #28]
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	43d2      	mvns	r2, r2
 80009f0:	4611      	mov	r1, r2
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <LCD_init+0x144>)
 80009f4:	400b      	ands	r3, r1
 80009f6:	6053      	str	r3, [r2, #4]
		LCD_PORT->OTYPER |= (0x0 << pin);		//0
 80009f8:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <LCD_init+0x144>)
 80009fa:	4a31      	ldr	r2, [pc, #196]	@ (8000ac0 <LCD_init+0x144>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	6053      	str	r3, [r2, #4]
		LCD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <LCD_init+0x144>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	0052      	lsls	r2, r2, #1
 8000a08:	2103      	movs	r1, #3
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	43d2      	mvns	r2, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a2b      	ldr	r2, [pc, #172]	@ (8000ac0 <LCD_init+0x144>)
 8000a14:	400b      	ands	r3, r1
 8000a16:	6093      	str	r3, [r2, #8]
		LCD_PORT->OSPEEDR |= (0x3 << (pin * 2));//Highest speed
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <LCD_init+0x144>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	2103      	movs	r1, #3
 8000a22:	fa01 f202 	lsl.w	r2, r1, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <LCD_init+0x144>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	6093      	str	r3, [r2, #8]
		LCD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <LCD_init+0x144>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	0052      	lsls	r2, r2, #1
 8000a36:	2103      	movs	r1, #3
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac0 <LCD_init+0x144>)
 8000a42:	400b      	ands	r3, r1
 8000a44:	60d3      	str	r3, [r2, #12]
		//LCD_PORT->PUPDR |= (0x2 << (pin * 2));	//PULL DOWN (no false highs)
		LCD_PORT->BRR |= (0x1 << (pin * 1));	//initialize off
 8000a46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <LCD_init+0x144>)
 8000a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <LCD_init+0x144>)
 8000a56:	430b      	orrs	r3, r1
 8000a58:	6293      	str	r3, [r2, #40]	@ 0x28
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	2b05      	cmp	r3, #5
 8000a64:	d99f      	bls.n	80009a6 <LCD_init+0x2a>
	}

	delay_us( 40000 );                     	// power-up wait 40 ms
 8000a66:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8000a6a:	f7ff fd25 	bl	80004b8 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
 8000a72:	e008      	b.n	8000a86 <LCD_init+0x10a>
		LCD_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 8000a74:	2030      	movs	r0, #48	@ 0x30
 8000a76:	f000 f83d 	bl	8000af4 <LCD_4b_command>
		delay_us( 200 );
 8000a7a:	20c8      	movs	r0, #200	@ 0xc8
 8000a7c:	f7ff fd1c 	bl	80004b8 <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	3301      	adds	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	ddf3      	ble.n	8000a74 <LCD_init+0xf8>
	}
	LCD_4b_command( 0x20 ); 		// fcn set #4: 4b cmd set 4b mode
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f000 f831 	bl	8000af4 <LCD_4b_command>
	delay_us( 40 );         		// remainder of LCD init removed
 8000a92:	2028      	movs	r0, #40	@ 0x28
 8000a94:	f7ff fd10 	bl	80004b8 <delay_us>
	LCD_command( 0x28 );			//Selects 2-line mode instead of 1-line
 8000a98:	2028      	movs	r0, #40	@ 0x28
 8000a9a:	f000 f84b 	bl	8000b34 <LCD_command>
	LCD_command( CURSOR_SHIFT_L );			//Shift cursor to the left
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f000 f848 	bl	8000b34 <LCD_command>
	LCD_command( CURSOR_ON );		//Display, cursor, cursor position on
 8000aa4:	200f      	movs	r0, #15
 8000aa6:	f000 f845 	bl	8000b34 <LCD_command>
	LCD_command( CURSOR_RIGHT );	//Cursor moves right, no shift
 8000aaa:	2006      	movs	r0, #6
 8000aac:	f000 f842 	bl	8000b34 <LCD_command>
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	08002f1c 	.word	0x08002f1c
 8000ac0:	48000c00 	.word	0x48000c00

08000ac4 <LCD_pulse_ENA>:

void LCD_pulse_ENA( void )  {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	// ENAble line sends command on falling edge
	// set to restore default then clear to trigger
	LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <LCD_pulse_ENA+0x2c>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <LCD_pulse_ENA+0x2c>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // TDDR > 320 ns
 8000ad4:	2064      	movs	r0, #100	@ 0x64
 8000ad6:	f7ff fcef 	bl	80004b8 <delay_us>
	LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <LCD_pulse_ENA+0x2c>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <LCD_pulse_ENA+0x2c>)
 8000ae0:	f023 0310 	bic.w	r3, r3, #16
 8000ae4:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // low values flakey, see A3:p.1
 8000ae6:	2064      	movs	r0, #100	@ 0x64
 8000ae8:	f7ff fce6 	bl	80004b8 <delay_us>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	48000c00 	.word	0x48000c00

08000af4 <LCD_4b_command>:

void LCD_4b_command( uint8_t command )  {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	// LCD command using high nibble only - used for 'wake-up' 0x30 commands
	LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 8000afe:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <LCD_4b_command+0x3c>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <LCD_4b_command+0x3c>)
 8000b04:	f023 030f 	bic.w	r3, r3, #15
 8000b08:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command >> 4 );   	// DATA = command
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <LCD_4b_command+0x3c>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	0912      	lsrs	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	4611      	mov	r1, r2
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <LCD_4b_command+0x3c>)
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 8000b1c:	2064      	movs	r0, #100	@ 0x64
 8000b1e:	f7ff fccb 	bl	80004b8 <delay_us>
	LCD_pulse_ENA( );						//send
 8000b22:	f7ff ffcf 	bl	8000ac4 <LCD_pulse_ENA>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	48000c00 	.word	0x48000c00

08000b34 <LCD_command>:

void LCD_command( uint8_t command )  {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	// send command to LCD in 4-bit instruction mode
	// HIGH nibble then LOW nibble, timing sensitive

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <LCD_command+0x78>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a1a      	ldr	r2, [pc, #104]	@ (8000bac <LCD_command+0x78>)
 8000b44:	f023 030f 	bic.w	r3, r3, #15
 8000b48:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <LCD_command+0x78>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	091b      	lsrs	r3, r3, #4
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 030f 	and.w	r3, r3, #15
 8000b58:	4914      	ldr	r1, [pc, #80]	@ (8000bac <LCD_command+0x78>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 8000b5e:	2064      	movs	r0, #100	@ 0x64
 8000b60:	f7ff fcaa 	bl	80004b8 <delay_us>

	LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 8000b64:	f7ff ffae 	bl	8000ac4 <LCD_pulse_ENA>

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <LCD_command+0x78>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <LCD_command+0x78>)
 8000b6e:	f023 030f 	bic.w	r3, r3, #15
 8000b72:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <LCD_command+0x78>)
 8000b76:	695a      	ldr	r2, [r3, #20]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	490b      	ldr	r1, [pc, #44]	@ (8000bac <LCD_command+0x78>)
 8000b80:	4313      	orrs	r3, r2
 8000b82:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 8000b84:	2064      	movs	r0, #100	@ 0x64
 8000b86:	f7ff fc97 	bl	80004b8 <delay_us>
	LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 8000b8a:	f7ff ff9b 	bl	8000ac4 <LCD_pulse_ENA>
	if ( (command == CLEAR_HOME) || (command == RETURN_HOME) ) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d002      	beq.n	8000b9a <LCD_command+0x66>
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d103      	bne.n	8000ba2 <LCD_command+0x6e>
		delay_us( 1000 );	// These commands need more time
 8000b9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9e:	f7ff fc8b 	bl	80004b8 <delay_us>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	48000c00 	.word	0x48000c00

08000bb0 <LCD_write_char>:

void LCD_write_char( uint8_t letter )  { //0x41 is A
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	// calls LCD_command() w/char data
	LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <LCD_write_char+0x40>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <LCD_write_char+0x40>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 8000bc6:	2064      	movs	r0, #100	@ 0x64
 8000bc8:	f7ff fc76 	bl	80004b8 <delay_us>
	LCD_command( letter );             // character to print
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffb0 	bl	8000b34 <LCD_command>
	LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <LCD_write_char+0x40>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <LCD_write_char+0x40>)
 8000bda:	f023 0320 	bic.w	r3, r3, #32
 8000bde:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 8000be0:	2064      	movs	r0, #100	@ 0x64
 8000be2:	f7ff fc69 	bl	80004b8 <delay_us>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	48000c00 	.word	0x48000c00

08000bf4 <LCD_write_string>:

void LCD_write_string( uint8_t sentence[] ) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	// extracts each character from a string and passes it to LCD_write_char()
	uint8_t len = strlen(sentence);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff faf7 	bl	80001f0 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73bb      	strb	r3, [r7, #14]
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
 8000c0a:	e009      	b.n	8000c20 <LCD_write_string+0x2c>
		LCD_write_char( sentence[i] );	// Write each character to LCD
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffcb 	bl	8000bb0 <LCD_write_char>
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3f1      	bcc.n	8000c0c <LCD_write_string+0x18>
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c3a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c3e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d013      	beq.n	8000c72 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c4a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c4e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c52:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d00b      	beq.n	8000c72 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c5a:	e000      	b.n	8000c5e <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c5c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c5e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f9      	beq.n	8000c5c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c72:	687b      	ldr	r3, [r7, #4]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <main>:
void SystemClock_Config(void);


char pad = 0;
void main(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

    /* Configure the system clock */

	HAL_Init();
 8000c86:	f000 f9d4 	bl	8001032 <HAL_Init>
	SystemClock_Config();
 8000c8a:	f000 f853 	bl	8000d34 <SystemClock_Config>
  Keypad_Config();
 8000c8e:	f7ff fc41 	bl	8000514 <Keypad_Config>
  LCD_init();
 8000c92:	f7ff fe73 	bl	800097c <LCD_init>
  DAC_init();
 8000c96:	f7ff fb03 	bl	80002a0 <DAC_init>

  delay_us(2000);
 8000c9a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c9e:	f7ff fc0b 	bl	80004b8 <delay_us>
	LCD_command( CURSOR_SHIFT_L );		// Shift cursor to the left
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f7ff ff46 	bl	8000b34 <LCD_command>
	LCD_command( CURSOR_OFF );			// Display, cursor, position on
 8000ca8:	200c      	movs	r0, #12
 8000caa:	f7ff ff43 	bl	8000b34 <LCD_command>
	LCD_command( CURSOR_RIGHT );		// Cursor moves right, no shift
 8000cae:	2006      	movs	r0, #6
 8000cb0:	f7ff ff40 	bl	8000b34 <LCD_command>
	LCD_command( CLEAR_HOME );
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ff3d 	bl	8000b34 <LCD_command>
	LCD_write_string("EE 329 A4 REACT");
 8000cba:	4817      	ldr	r0, [pc, #92]	@ (8000d18 <main+0x98>)
 8000cbc:	f7ff ff9a 	bl	8000bf4 <LCD_write_string>
	LCD_command(LINE_TWO);
 8000cc0:	20c0      	movs	r0, #192	@ 0xc0
 8000cc2:	f7ff ff37 	bl	8000b34 <LCD_command>
	LCD_write_string("PUSH SW TO TRIG");
 8000cc6:	4815      	ldr	r0, [pc, #84]	@ (8000d1c <main+0x9c>)
 8000cc8:	f7ff ff94 	bl	8000bf4 <LCD_write_string>
  //GPIOD->ODR = 0x3F;
  while (1)
  {
	  for (int i = 0; i < 200000; i++){
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	e002      	b.n	8000cd8 <main+0x58>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <main+0xa0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	ddf8      	ble.n	8000cd2 <main+0x52>
		  ;
	  }
	  printf("working\n");
 8000ce0:	4810      	ldr	r0, [pc, #64]	@ (8000d24 <main+0xa4>)
 8000ce2:	f001 fa95 	bl	8002210 <puts>
	  if ( Keypad_IsAnyKeyPressed() ) {
 8000ce6:	f7ff fcf7 	bl	80006d8 <Keypad_IsAnyKeyPressed>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0ed      	beq.n	8000ccc <main+0x4c>
		  printf("Got a signle button\n");
 8000cf0:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <main+0xa8>)
 8000cf2:	f001 fa8d 	bl	8002210 <puts>
		  pad = Keypad_WhichKeyIsPressed();
 8000cf6:	f7ff fd3b 	bl	8000770 <Keypad_WhichKeyIsPressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <main+0xac>)
 8000d00:	701a      	strb	r2, [r3, #0]
		  printf("Key is %c\n", pad);
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <main+0xac>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	@ (8000d30 <main+0xb0>)
 8000d0a:	f001 fa19 	bl	8002140 <iprintf>
		  DAC_write ( 0x3FFF );
 8000d0e:	f643 70ff 	movw	r0, #16383	@ 0x3fff
 8000d12:	f7ff fbb7 	bl	8000484 <DAC_write>
	  for (int i = 0; i < 200000; i++){
 8000d16:	e7d9      	b.n	8000ccc <main+0x4c>
 8000d18:	08002f34 	.word	0x08002f34
 8000d1c:	08002f44 	.word	0x08002f44
 8000d20:	00030d3f 	.word	0x00030d3f
 8000d24:	08002f54 	.word	0x08002f54
 8000d28:	08002f5c 	.word	0x08002f5c
 8000d2c:	20000085 	.word	0x20000085
 8000d30:	08002f70 	.word	0x08002f70

08000d34 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b096      	sub	sp, #88	@ 0x58
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2244      	movs	r2, #68	@ 0x44
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fb44 	bl	80023d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d5a:	f000 fad3 	bl	8001304 <HAL_PWREx_ControlVoltageScaling>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d64:	f000 f849 	bl	8000dfa <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d74:	2360      	movs	r3, #96	@ 0x60
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fb15 	bl	80013b0 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d8c:	f000 f835 	bl	8000dfa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d90:	230f      	movs	r3, #15
 8000d92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ff1a 	bl	8001be4 <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000db6:	f000 f820 	bl	8000dfa <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3758      	adds	r7, #88	@ 0x58
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_write>:
  * @retval None
  */

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff28 	bl	8000c32 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf1      	blt.n	8000dd4 <_write+0x12>
	}
	return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfe:	b672      	cpsid	i
}
 8000e00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e02:	bf00      	nop
 8000e04:	e7fd      	b.n	8000e02 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x44>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f919 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e00a      	b.n	8000ed6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ec0:	f3af 8000 	nop.w
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	60ba      	str	r2, [r7, #8]
 8000ecc:	b2ca      	uxtb	r2, r1
 8000ece:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbf0      	blt.n	8000ec0 <_read+0x12>
  }

  return len;
 8000ede:	687b      	ldr	r3, [r7, #4]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f10:	605a      	str	r2, [r3, #4]
  return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_isatty>:

int _isatty(int file)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f001 fa74 	bl	800246c <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20050000 	.word	0x20050000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000088 	.word	0x20000088
 8000fb8:	200001e0 	.word	0x200001e0

08000fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f001 fa33 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001012:	f7ff fe35 	bl	8000c80 <main>

08001016 <LoopForever>:

LoopForever:
    b LoopForever
 8001016:	e7fe      	b.n	8001016 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001024:	08003000 	.word	0x08003000
  ldr r2, =_sbss
 8001028:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800102c:	200001dc 	.word	0x200001dc

08001030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC1_2_IRQHandler>

08001032 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f91f 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f80e 	bl	8001064 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	e001      	b.n	8001058 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001054:	f7ff fed8 	bl	8000e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001058:	79fb      	ldrb	r3, [r7, #7]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d023      	beq.n	80010c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_InitTick+0x70>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_InitTick+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f91d 	bl	80012ce <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10f      	bne.n	80010ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d809      	bhi.n	80010b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f8f5 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ac:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <HAL_InitTick+0x74>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e001      	b.n	80010c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000008c 	.word	0x2000008c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000008c 	.word	0x2000008c

0800111c <__NVIC_SetPriorityGrouping>:
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	@ (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff5c 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff8e 	bl	80011d4 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5d 	bl	8001180 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffb0 	bl	800123c <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PWREx_GetVoltageRange+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40007000 	.word	0x40007000

08001304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001312:	d130      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800131c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001320:	d038      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800132a:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2232      	movs	r2, #50	@ 0x32
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0c9b      	lsrs	r3, r3, #18
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001348:	e002      	b.n	8001350 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3b01      	subs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001350:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d102      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x60>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f2      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001370:	d110      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e00f      	b.n	8001396 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001376:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800137e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001382:	d007      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800138c:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001392:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000
 80013a8:	20000000 	.word	0x20000000
 80013ac:	431bde83 	.word	0x431bde83

080013b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	f000 bc08 	b.w	8001bd4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c4:	4b96      	ldr	r3, [pc, #600]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ce:	4b94      	ldr	r3, [pc, #592]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 80e4 	beq.w	80015ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d007      	beq.n	80013fc <HAL_RCC_OscConfig+0x4c>
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	f040 808b 	bne.w	800150a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f040 8087 	bne.w	800150a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013fc:	4b88      	ldr	r3, [pc, #544]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_RCC_OscConfig+0x64>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e3df      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	4b81      	ldr	r3, [pc, #516]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <HAL_RCC_OscConfig+0x7e>
 8001424:	4b7e      	ldr	r3, [pc, #504]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800142c:	e005      	b.n	800143a <HAL_RCC_OscConfig+0x8a>
 800142e:	4b7c      	ldr	r3, [pc, #496]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800143a:	4293      	cmp	r3, r2
 800143c:	d223      	bcs.n	8001486 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fd5a 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e3c0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001452:	4b73      	ldr	r3, [pc, #460]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a72      	ldr	r2, [pc, #456]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b70      	ldr	r3, [pc, #448]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	496d      	ldr	r1, [pc, #436]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001470:	4b6b      	ldr	r3, [pc, #428]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	4968      	ldr	r1, [pc, #416]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e025      	b.n	80014d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001486:	4b66      	ldr	r3, [pc, #408]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a65      	ldr	r2, [pc, #404]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b63      	ldr	r3, [pc, #396]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4960      	ldr	r1, [pc, #384]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	495b      	ldr	r1, [pc, #364]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d109      	bne.n	80014d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 fd1a 	bl	8001efc <RCC_SetFlashLatencyFromMSIRange>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e380      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d2:	f000 fc87 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b51      	ldr	r3, [pc, #324]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	091b      	lsrs	r3, r3, #4
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	4950      	ldr	r1, [pc, #320]	@ (8001624 <HAL_RCC_OscConfig+0x274>)
 80014e4:	5ccb      	ldrb	r3, [r1, r3]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_RCC_OscConfig+0x278>)
 80014f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f2:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fdb4 	bl	8001064 <HAL_InitTick>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d052      	beq.n	80015ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	e364      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d032      	beq.n	8001578 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001512:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a42      	ldr	r2, [pc, #264]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151e:	f7ff fdf1 	bl	8001104 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001526:	f7ff fded 	bl	8001104 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e34d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001538:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a35      	ldr	r2, [pc, #212]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b33      	ldr	r3, [pc, #204]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	4930      	ldr	r1, [pc, #192]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001562:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	492b      	ldr	r1, [pc, #172]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
 8001576:	e01a      	b.n	80015ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a28      	ldr	r2, [pc, #160]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001584:	f7ff fdbe 	bl	8001104 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800158c:	f7ff fdba 	bl	8001104 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e31a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x1dc>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d073      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x21c>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d10e      	bne.n	80015e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d10b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d063      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d15f      	bne.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e2f7      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x24c>
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x298>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001604:	d114      	bne.n	8001630 <HAL_RCC_OscConfig+0x280>
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a02      	ldr	r2, [pc, #8]	@ (8001620 <HAL_RCC_OscConfig+0x270>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e013      	b.n	8001648 <HAL_RCC_OscConfig+0x298>
 8001620:	40021000 	.word	0x40021000
 8001624:	08002f7c 	.word	0x08002f7c
 8001628:	20000000 	.word	0x20000000
 800162c:	20000004 	.word	0x20000004
 8001630:	4ba0      	ldr	r3, [pc, #640]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a9f      	ldr	r2, [pc, #636]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b9d      	ldr	r3, [pc, #628]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a9c      	ldr	r2, [pc, #624]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fd58 	bl	8001104 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fd54 	bl	8001104 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	@ 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e2b4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	4b92      	ldr	r3, [pc, #584]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x2a8>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fd44 	bl	8001104 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fd40 	bl	8001104 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e2a0      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d0>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d060      	beq.n	8001770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x310>
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d119      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d116      	bne.n	80016ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c0:	4b7c      	ldr	r3, [pc, #496]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x328>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e27d      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b76      	ldr	r3, [pc, #472]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	4973      	ldr	r1, [pc, #460]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	e040      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d023      	beq.n	800173e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f6:	4b6f      	ldr	r3, [pc, #444]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6e      	ldr	r2, [pc, #440]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001702:	f7ff fcff 	bl	8001104 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fcfb 	bl	8001104 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e25b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b65      	ldr	r3, [pc, #404]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b62      	ldr	r3, [pc, #392]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	061b      	lsls	r3, r3, #24
 8001736:	495f      	ldr	r1, [pc, #380]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
 800173c:	e018      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173e:	4b5d      	ldr	r3, [pc, #372]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5c      	ldr	r2, [pc, #368]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fcdb 	bl	8001104 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fcd7 	bl	8001104 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e237      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	4b53      	ldr	r3, [pc, #332]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01c      	beq.n	80017be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	4b4b      	ldr	r3, [pc, #300]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178a:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fcb6 	bl	8001104 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fcb2 	bl	8001104 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e212      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0ef      	beq.n	800179c <HAL_RCC_OscConfig+0x3ec>
 80017bc:	e01b      	b.n	80017f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c4:	4a3b      	ldr	r2, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ce:	f7ff fc99 	bl	8001104 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fc95 	bl	8001104 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1f5      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ef      	bne.n	80017d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001808:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	4a26      	ldr	r2, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182c:	2301      	movs	r3, #1
 800182e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d118      	bne.n	800186e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001848:	f7ff fc5c 	bl	8001104 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff fc58 	bl	8001104 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1b8      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_RCC_OscConfig+0x508>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x4d8>
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001886:	e029      	b.n	80018dc <HAL_RCC_OscConfig+0x52c>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d115      	bne.n	80018bc <HAL_RCC_OscConfig+0x50c>
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a03      	ldr	r2, [pc, #12]	@ (80018b4 <HAL_RCC_OscConfig+0x504>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b0:	e014      	b.n	80018dc <HAL_RCC_OscConfig+0x52c>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	4b9d      	ldr	r3, [pc, #628]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018c2:	4a9c      	ldr	r2, [pc, #624]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018cc:	4b99      	ldr	r3, [pc, #612]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d2:	4a98      	ldr	r2, [pc, #608]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d016      	beq.n	8001912 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fc0e 	bl	8001104 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fc0a 	bl	8001104 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e168      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001902:	4b8c      	ldr	r3, [pc, #560]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ed      	beq.n	80018ec <HAL_RCC_OscConfig+0x53c>
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fbf7 	bl	8001104 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7ff fbf3 	bl	8001104 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e151      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001930:	4b80      	ldr	r3, [pc, #512]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ed      	bne.n	800191a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800193e:	7ffb      	ldrb	r3, [r7, #31]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d105      	bne.n	8001950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001944:	4b7b      	ldr	r3, [pc, #492]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	4a7a      	ldr	r2, [pc, #488]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 800194a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03c      	beq.n	80019d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	2b00      	cmp	r3, #0
 8001962:	d01c      	beq.n	800199e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001964:	4b73      	ldr	r3, [pc, #460]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800196a:	4a72      	ldr	r2, [pc, #456]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fbc6 	bl	8001104 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197c:	f7ff fbc2 	bl	8001104 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e122      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198e:	4b69      	ldr	r3, [pc, #420]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001990:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ef      	beq.n	800197c <HAL_RCC_OscConfig+0x5cc>
 800199c:	e01b      	b.n	80019d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800199e:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80019a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019a4:	4a63      	ldr	r2, [pc, #396]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fba9 	bl	8001104 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b6:	f7ff fba5 	bl	8001104 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e105      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80019ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ef      	bne.n	80019b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80f9 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	f040 80cf 	bne.w	8001b88 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ea:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d12c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d123      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d11b      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d113      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d109      	bne.n	8001a58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d071      	beq.n	8001b3c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	d068      	beq.n	8001b30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a5e:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0ac      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a86:	f7ff fb3d 	bl	8001104 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb39 	bl	8001104 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e099      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aac:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <HAL_RCC_OscConfig+0x788>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001abc:	3a01      	subs	r2, #1
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ac6:	0212      	lsls	r2, r2, #8
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ace:	0852      	lsrs	r2, r2, #1
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	4311      	orrs	r1, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ada:	0852      	lsrs	r2, r2, #1
 8001adc:	3a01      	subs	r2, #1
 8001ade:	0652      	lsls	r2, r2, #25
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ae6:	06d2      	lsls	r2, r2, #27
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	4912      	ldr	r1, [pc, #72]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001afc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b08:	f7ff fafc 	bl	8001104 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff faf8 	bl	8001104 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e058      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b22:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <HAL_RCC_OscConfig+0x784>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2e:	e050      	b.n	8001bd2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e04f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3c:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d144      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4a20      	ldr	r2, [pc, #128]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b60:	f7ff fad0 	bl	8001104 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff facc 	bl	8001104 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e02c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x7b8>
 8001b86:	e024      	b.n	8001bd2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d01f      	beq.n	8001bce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fab3 	bl	8001104 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff faaf 	bl	8001104 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e00f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	4905      	ldr	r1, [pc, #20]	@ (8001bdc <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_RCC_OscConfig+0x830>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e001      	b.n	8001bd2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	feeefffc 	.word	0xfeeefffc

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0e7      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b75      	ldr	r3, [pc, #468]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d910      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b72      	ldr	r3, [pc, #456]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4970      	ldr	r1, [pc, #448]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b6e      	ldr	r3, [pc, #440]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0cf      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d908      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4960      	ldr	r1, [pc, #384]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04c      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d121      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0a6      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	4b54      	ldr	r3, [pc, #336]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e09a      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e08e      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001caa:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e086      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cba:	4b46      	ldr	r3, [pc, #280]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 0203 	bic.w	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4943      	ldr	r1, [pc, #268]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ccc:	f7ff fa1a 	bl	8001104 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff fa16 	bl	8001104 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e06e      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 020c 	and.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1eb      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d208      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	492b      	ldr	r1, [pc, #172]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2a:	4b29      	ldr	r3, [pc, #164]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d210      	bcs.n	8001d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d38:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 0207 	bic.w	r2, r3, #7
 8001d40:	4923      	ldr	r1, [pc, #140]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d48:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e036      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4918      	ldr	r1, [pc, #96]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4910      	ldr	r1, [pc, #64]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d98:	f000 f824 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	490b      	ldr	r1, [pc, #44]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <HAL_RCC_ClockConfig+0x1f8>)
 8001db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_RCC_ClockConfig+0x1fc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f951 	bl	8001064 <HAL_InitTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08002f7c 	.word	0x08002f7c
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d121      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d11e      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e24:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e34:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e40:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e004      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d134      	bne.n	8001edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d003      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0xac>
 8001e88:	e005      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	e005      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e92:	617b      	str	r3, [r7, #20]
      break;
 8001e94:	e002      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	617b      	str	r3, [r7, #20]
      break;
 8001e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	fb03 f202 	mul.w	r2, r3, r2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0e5b      	lsrs	r3, r3, #25
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001edc:	69bb      	ldr	r3, [r7, #24]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08002f8c 	.word	0x08002f8c
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	007a1200 	.word	0x007a1200

08001efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f08:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f14:	f7ff f9e8 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001f18:	6178      	str	r0, [r7, #20]
 8001f1a:	e014      	b.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f28:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f34:	f7ff f9d8 	bl	80012e8 <HAL_PWREx_GetVoltageRange>
 8001f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f4c:	d10b      	bne.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b80      	cmp	r3, #128	@ 0x80
 8001f52:	d919      	bls.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f58:	d902      	bls.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	e013      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f60:	2301      	movs	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e010      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b80      	cmp	r3, #128	@ 0x80
 8001f6a:	d902      	bls.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e00a      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b80      	cmp	r3, #128	@ 0x80
 8001f76:	d102      	bne.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f78:	2302      	movs	r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	e004      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b70      	cmp	r3, #112	@ 0x70
 8001f82:	d101      	bne.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f84:	2301      	movs	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 0207 	bic.w	r2, r3, #7
 8001f90:	4909      	ldr	r1, [pc, #36]	@ (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f98:	4b07      	ldr	r3, [pc, #28]	@ (8001fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40022000 	.word	0x40022000

08001fbc <std>:
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	b510      	push	{r4, lr}
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8001fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fca:	6083      	str	r3, [r0, #8]
 8001fcc:	8181      	strh	r1, [r0, #12]
 8001fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8001fd0:	81c2      	strh	r2, [r0, #14]
 8001fd2:	6183      	str	r3, [r0, #24]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	305c      	adds	r0, #92	@ 0x5c
 8001fda:	f000 f9f9 	bl	80023d0 <memset>
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <std+0x58>)
 8001fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <std+0x5c>)
 8001fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <std+0x60>)
 8001fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <std+0x64>)
 8001fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <std+0x68>)
 8001ff0:	6224      	str	r4, [r4, #32]
 8001ff2:	429c      	cmp	r4, r3
 8001ff4:	d006      	beq.n	8002004 <std+0x48>
 8001ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ffa:	4294      	cmp	r4, r2
 8001ffc:	d002      	beq.n	8002004 <std+0x48>
 8001ffe:	33d0      	adds	r3, #208	@ 0xd0
 8002000:	429c      	cmp	r4, r3
 8002002:	d105      	bne.n	8002010 <std+0x54>
 8002004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800200c:	f000 ba58 	b.w	80024c0 <__retarget_lock_init_recursive>
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	08002221 	.word	0x08002221
 8002018:	08002243 	.word	0x08002243
 800201c:	0800227b 	.word	0x0800227b
 8002020:	0800229f 	.word	0x0800229f
 8002024:	20000090 	.word	0x20000090

08002028 <stdio_exit_handler>:
 8002028:	4a02      	ldr	r2, [pc, #8]	@ (8002034 <stdio_exit_handler+0xc>)
 800202a:	4903      	ldr	r1, [pc, #12]	@ (8002038 <stdio_exit_handler+0x10>)
 800202c:	4803      	ldr	r0, [pc, #12]	@ (800203c <stdio_exit_handler+0x14>)
 800202e:	f000 b869 	b.w	8002104 <_fwalk_sglue>
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c
 8002038:	08002d61 	.word	0x08002d61
 800203c:	2000001c 	.word	0x2000001c

08002040 <cleanup_stdio>:
 8002040:	6841      	ldr	r1, [r0, #4]
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <cleanup_stdio+0x34>)
 8002044:	4299      	cmp	r1, r3
 8002046:	b510      	push	{r4, lr}
 8002048:	4604      	mov	r4, r0
 800204a:	d001      	beq.n	8002050 <cleanup_stdio+0x10>
 800204c:	f000 fe88 	bl	8002d60 <_fflush_r>
 8002050:	68a1      	ldr	r1, [r4, #8]
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <cleanup_stdio+0x38>)
 8002054:	4299      	cmp	r1, r3
 8002056:	d002      	beq.n	800205e <cleanup_stdio+0x1e>
 8002058:	4620      	mov	r0, r4
 800205a:	f000 fe81 	bl	8002d60 <_fflush_r>
 800205e:	68e1      	ldr	r1, [r4, #12]
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <cleanup_stdio+0x3c>)
 8002062:	4299      	cmp	r1, r3
 8002064:	d004      	beq.n	8002070 <cleanup_stdio+0x30>
 8002066:	4620      	mov	r0, r4
 8002068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800206c:	f000 be78 	b.w	8002d60 <_fflush_r>
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	20000090 	.word	0x20000090
 8002078:	200000f8 	.word	0x200000f8
 800207c:	20000160 	.word	0x20000160

08002080 <global_stdio_init.part.0>:
 8002080:	b510      	push	{r4, lr}
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <global_stdio_init.part.0+0x30>)
 8002084:	4c0b      	ldr	r4, [pc, #44]	@ (80020b4 <global_stdio_init.part.0+0x34>)
 8002086:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <global_stdio_init.part.0+0x38>)
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	4620      	mov	r0, r4
 800208c:	2200      	movs	r2, #0
 800208e:	2104      	movs	r1, #4
 8002090:	f7ff ff94 	bl	8001fbc <std>
 8002094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002098:	2201      	movs	r2, #1
 800209a:	2109      	movs	r1, #9
 800209c:	f7ff ff8e 	bl	8001fbc <std>
 80020a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80020a4:	2202      	movs	r2, #2
 80020a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020aa:	2112      	movs	r1, #18
 80020ac:	f7ff bf86 	b.w	8001fbc <std>
 80020b0:	200001c8 	.word	0x200001c8
 80020b4:	20000090 	.word	0x20000090
 80020b8:	08002029 	.word	0x08002029

080020bc <__sfp_lock_acquire>:
 80020bc:	4801      	ldr	r0, [pc, #4]	@ (80020c4 <__sfp_lock_acquire+0x8>)
 80020be:	f000 ba00 	b.w	80024c2 <__retarget_lock_acquire_recursive>
 80020c2:	bf00      	nop
 80020c4:	200001d1 	.word	0x200001d1

080020c8 <__sfp_lock_release>:
 80020c8:	4801      	ldr	r0, [pc, #4]	@ (80020d0 <__sfp_lock_release+0x8>)
 80020ca:	f000 b9fb 	b.w	80024c4 <__retarget_lock_release_recursive>
 80020ce:	bf00      	nop
 80020d0:	200001d1 	.word	0x200001d1

080020d4 <__sinit>:
 80020d4:	b510      	push	{r4, lr}
 80020d6:	4604      	mov	r4, r0
 80020d8:	f7ff fff0 	bl	80020bc <__sfp_lock_acquire>
 80020dc:	6a23      	ldr	r3, [r4, #32]
 80020de:	b11b      	cbz	r3, 80020e8 <__sinit+0x14>
 80020e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020e4:	f7ff bff0 	b.w	80020c8 <__sfp_lock_release>
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <__sinit+0x28>)
 80020ea:	6223      	str	r3, [r4, #32]
 80020ec:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <__sinit+0x2c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f5      	bne.n	80020e0 <__sinit+0xc>
 80020f4:	f7ff ffc4 	bl	8002080 <global_stdio_init.part.0>
 80020f8:	e7f2      	b.n	80020e0 <__sinit+0xc>
 80020fa:	bf00      	nop
 80020fc:	08002041 	.word	0x08002041
 8002100:	200001c8 	.word	0x200001c8

08002104 <_fwalk_sglue>:
 8002104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002108:	4607      	mov	r7, r0
 800210a:	4688      	mov	r8, r1
 800210c:	4614      	mov	r4, r2
 800210e:	2600      	movs	r6, #0
 8002110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002114:	f1b9 0901 	subs.w	r9, r9, #1
 8002118:	d505      	bpl.n	8002126 <_fwalk_sglue+0x22>
 800211a:	6824      	ldr	r4, [r4, #0]
 800211c:	2c00      	cmp	r4, #0
 800211e:	d1f7      	bne.n	8002110 <_fwalk_sglue+0xc>
 8002120:	4630      	mov	r0, r6
 8002122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002126:	89ab      	ldrh	r3, [r5, #12]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d907      	bls.n	800213c <_fwalk_sglue+0x38>
 800212c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002130:	3301      	adds	r3, #1
 8002132:	d003      	beq.n	800213c <_fwalk_sglue+0x38>
 8002134:	4629      	mov	r1, r5
 8002136:	4638      	mov	r0, r7
 8002138:	47c0      	blx	r8
 800213a:	4306      	orrs	r6, r0
 800213c:	3568      	adds	r5, #104	@ 0x68
 800213e:	e7e9      	b.n	8002114 <_fwalk_sglue+0x10>

08002140 <iprintf>:
 8002140:	b40f      	push	{r0, r1, r2, r3}
 8002142:	b507      	push	{r0, r1, r2, lr}
 8002144:	4906      	ldr	r1, [pc, #24]	@ (8002160 <iprintf+0x20>)
 8002146:	ab04      	add	r3, sp, #16
 8002148:	6808      	ldr	r0, [r1, #0]
 800214a:	f853 2b04 	ldr.w	r2, [r3], #4
 800214e:	6881      	ldr	r1, [r0, #8]
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	f000 fadb 	bl	800270c <_vfiprintf_r>
 8002156:	b003      	add	sp, #12
 8002158:	f85d eb04 	ldr.w	lr, [sp], #4
 800215c:	b004      	add	sp, #16
 800215e:	4770      	bx	lr
 8002160:	20000018 	.word	0x20000018

08002164 <_puts_r>:
 8002164:	6a03      	ldr	r3, [r0, #32]
 8002166:	b570      	push	{r4, r5, r6, lr}
 8002168:	6884      	ldr	r4, [r0, #8]
 800216a:	4605      	mov	r5, r0
 800216c:	460e      	mov	r6, r1
 800216e:	b90b      	cbnz	r3, 8002174 <_puts_r+0x10>
 8002170:	f7ff ffb0 	bl	80020d4 <__sinit>
 8002174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002176:	07db      	lsls	r3, r3, #31
 8002178:	d405      	bmi.n	8002186 <_puts_r+0x22>
 800217a:	89a3      	ldrh	r3, [r4, #12]
 800217c:	0598      	lsls	r0, r3, #22
 800217e:	d402      	bmi.n	8002186 <_puts_r+0x22>
 8002180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002182:	f000 f99e 	bl	80024c2 <__retarget_lock_acquire_recursive>
 8002186:	89a3      	ldrh	r3, [r4, #12]
 8002188:	0719      	lsls	r1, r3, #28
 800218a:	d502      	bpl.n	8002192 <_puts_r+0x2e>
 800218c:	6923      	ldr	r3, [r4, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d135      	bne.n	80021fe <_puts_r+0x9a>
 8002192:	4621      	mov	r1, r4
 8002194:	4628      	mov	r0, r5
 8002196:	f000 f8c5 	bl	8002324 <__swsetup_r>
 800219a:	b380      	cbz	r0, 80021fe <_puts_r+0x9a>
 800219c:	f04f 35ff 	mov.w	r5, #4294967295
 80021a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021a2:	07da      	lsls	r2, r3, #31
 80021a4:	d405      	bmi.n	80021b2 <_puts_r+0x4e>
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	059b      	lsls	r3, r3, #22
 80021aa:	d402      	bmi.n	80021b2 <_puts_r+0x4e>
 80021ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021ae:	f000 f989 	bl	80024c4 <__retarget_lock_release_recursive>
 80021b2:	4628      	mov	r0, r5
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da04      	bge.n	80021c4 <_puts_r+0x60>
 80021ba:	69a2      	ldr	r2, [r4, #24]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dc17      	bgt.n	80021f0 <_puts_r+0x8c>
 80021c0:	290a      	cmp	r1, #10
 80021c2:	d015      	beq.n	80021f0 <_puts_r+0x8c>
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	6022      	str	r2, [r4, #0]
 80021ca:	7019      	strb	r1, [r3, #0]
 80021cc:	68a3      	ldr	r3, [r4, #8]
 80021ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60a3      	str	r3, [r4, #8]
 80021d6:	2900      	cmp	r1, #0
 80021d8:	d1ed      	bne.n	80021b6 <_puts_r+0x52>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	da11      	bge.n	8002202 <_puts_r+0x9e>
 80021de:	4622      	mov	r2, r4
 80021e0:	210a      	movs	r1, #10
 80021e2:	4628      	mov	r0, r5
 80021e4:	f000 f85f 	bl	80022a6 <__swbuf_r>
 80021e8:	3001      	adds	r0, #1
 80021ea:	d0d7      	beq.n	800219c <_puts_r+0x38>
 80021ec:	250a      	movs	r5, #10
 80021ee:	e7d7      	b.n	80021a0 <_puts_r+0x3c>
 80021f0:	4622      	mov	r2, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 f857 	bl	80022a6 <__swbuf_r>
 80021f8:	3001      	adds	r0, #1
 80021fa:	d1e7      	bne.n	80021cc <_puts_r+0x68>
 80021fc:	e7ce      	b.n	800219c <_puts_r+0x38>
 80021fe:	3e01      	subs	r6, #1
 8002200:	e7e4      	b.n	80021cc <_puts_r+0x68>
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	6022      	str	r2, [r4, #0]
 8002208:	220a      	movs	r2, #10
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	e7ee      	b.n	80021ec <_puts_r+0x88>
	...

08002210 <puts>:
 8002210:	4b02      	ldr	r3, [pc, #8]	@ (800221c <puts+0xc>)
 8002212:	4601      	mov	r1, r0
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f7ff bfa5 	b.w	8002164 <_puts_r>
 800221a:	bf00      	nop
 800221c:	20000018 	.word	0x20000018

08002220 <__sread>:
 8002220:	b510      	push	{r4, lr}
 8002222:	460c      	mov	r4, r1
 8002224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002228:	f000 f8fc 	bl	8002424 <_read_r>
 800222c:	2800      	cmp	r0, #0
 800222e:	bfab      	itete	ge
 8002230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002232:	89a3      	ldrhlt	r3, [r4, #12]
 8002234:	181b      	addge	r3, r3, r0
 8002236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800223a:	bfac      	ite	ge
 800223c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800223e:	81a3      	strhlt	r3, [r4, #12]
 8002240:	bd10      	pop	{r4, pc}

08002242 <__swrite>:
 8002242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	461f      	mov	r7, r3
 8002248:	898b      	ldrh	r3, [r1, #12]
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	4605      	mov	r5, r0
 800224e:	460c      	mov	r4, r1
 8002250:	4616      	mov	r6, r2
 8002252:	d505      	bpl.n	8002260 <__swrite+0x1e>
 8002254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002258:	2302      	movs	r3, #2
 800225a:	2200      	movs	r2, #0
 800225c:	f000 f8d0 	bl	8002400 <_lseek_r>
 8002260:	89a3      	ldrh	r3, [r4, #12]
 8002262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800226a:	81a3      	strh	r3, [r4, #12]
 800226c:	4632      	mov	r2, r6
 800226e:	463b      	mov	r3, r7
 8002270:	4628      	mov	r0, r5
 8002272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002276:	f000 b8e7 	b.w	8002448 <_write_r>

0800227a <__sseek>:
 800227a:	b510      	push	{r4, lr}
 800227c:	460c      	mov	r4, r1
 800227e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002282:	f000 f8bd 	bl	8002400 <_lseek_r>
 8002286:	1c43      	adds	r3, r0, #1
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	bf15      	itete	ne
 800228c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800228e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002296:	81a3      	strheq	r3, [r4, #12]
 8002298:	bf18      	it	ne
 800229a:	81a3      	strhne	r3, [r4, #12]
 800229c:	bd10      	pop	{r4, pc}

0800229e <__sclose>:
 800229e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a2:	f000 b89d 	b.w	80023e0 <_close_r>

080022a6 <__swbuf_r>:
 80022a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a8:	460e      	mov	r6, r1
 80022aa:	4614      	mov	r4, r2
 80022ac:	4605      	mov	r5, r0
 80022ae:	b118      	cbz	r0, 80022b8 <__swbuf_r+0x12>
 80022b0:	6a03      	ldr	r3, [r0, #32]
 80022b2:	b90b      	cbnz	r3, 80022b8 <__swbuf_r+0x12>
 80022b4:	f7ff ff0e 	bl	80020d4 <__sinit>
 80022b8:	69a3      	ldr	r3, [r4, #24]
 80022ba:	60a3      	str	r3, [r4, #8]
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	071a      	lsls	r2, r3, #28
 80022c0:	d501      	bpl.n	80022c6 <__swbuf_r+0x20>
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	b943      	cbnz	r3, 80022d8 <__swbuf_r+0x32>
 80022c6:	4621      	mov	r1, r4
 80022c8:	4628      	mov	r0, r5
 80022ca:	f000 f82b 	bl	8002324 <__swsetup_r>
 80022ce:	b118      	cbz	r0, 80022d8 <__swbuf_r+0x32>
 80022d0:	f04f 37ff 	mov.w	r7, #4294967295
 80022d4:	4638      	mov	r0, r7
 80022d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	6922      	ldr	r2, [r4, #16]
 80022dc:	1a98      	subs	r0, r3, r2
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	b2f6      	uxtb	r6, r6
 80022e2:	4283      	cmp	r3, r0
 80022e4:	4637      	mov	r7, r6
 80022e6:	dc05      	bgt.n	80022f4 <__swbuf_r+0x4e>
 80022e8:	4621      	mov	r1, r4
 80022ea:	4628      	mov	r0, r5
 80022ec:	f000 fd38 	bl	8002d60 <_fflush_r>
 80022f0:	2800      	cmp	r0, #0
 80022f2:	d1ed      	bne.n	80022d0 <__swbuf_r+0x2a>
 80022f4:	68a3      	ldr	r3, [r4, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60a3      	str	r3, [r4, #8]
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	6022      	str	r2, [r4, #0]
 8002300:	701e      	strb	r6, [r3, #0]
 8002302:	6962      	ldr	r2, [r4, #20]
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	429a      	cmp	r2, r3
 8002308:	d004      	beq.n	8002314 <__swbuf_r+0x6e>
 800230a:	89a3      	ldrh	r3, [r4, #12]
 800230c:	07db      	lsls	r3, r3, #31
 800230e:	d5e1      	bpl.n	80022d4 <__swbuf_r+0x2e>
 8002310:	2e0a      	cmp	r6, #10
 8002312:	d1df      	bne.n	80022d4 <__swbuf_r+0x2e>
 8002314:	4621      	mov	r1, r4
 8002316:	4628      	mov	r0, r5
 8002318:	f000 fd22 	bl	8002d60 <_fflush_r>
 800231c:	2800      	cmp	r0, #0
 800231e:	d0d9      	beq.n	80022d4 <__swbuf_r+0x2e>
 8002320:	e7d6      	b.n	80022d0 <__swbuf_r+0x2a>
	...

08002324 <__swsetup_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <__swsetup_r+0xa8>)
 8002328:	4605      	mov	r5, r0
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	460c      	mov	r4, r1
 800232e:	b118      	cbz	r0, 8002338 <__swsetup_r+0x14>
 8002330:	6a03      	ldr	r3, [r0, #32]
 8002332:	b90b      	cbnz	r3, 8002338 <__swsetup_r+0x14>
 8002334:	f7ff fece 	bl	80020d4 <__sinit>
 8002338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800233c:	0719      	lsls	r1, r3, #28
 800233e:	d422      	bmi.n	8002386 <__swsetup_r+0x62>
 8002340:	06da      	lsls	r2, r3, #27
 8002342:	d407      	bmi.n	8002354 <__swsetup_r+0x30>
 8002344:	2209      	movs	r2, #9
 8002346:	602a      	str	r2, [r5, #0]
 8002348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	f04f 30ff 	mov.w	r0, #4294967295
 8002352:	e033      	b.n	80023bc <__swsetup_r+0x98>
 8002354:	0758      	lsls	r0, r3, #29
 8002356:	d512      	bpl.n	800237e <__swsetup_r+0x5a>
 8002358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800235a:	b141      	cbz	r1, 800236e <__swsetup_r+0x4a>
 800235c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002360:	4299      	cmp	r1, r3
 8002362:	d002      	beq.n	800236a <__swsetup_r+0x46>
 8002364:	4628      	mov	r0, r5
 8002366:	f000 f8af 	bl	80024c8 <_free_r>
 800236a:	2300      	movs	r3, #0
 800236c:	6363      	str	r3, [r4, #52]	@ 0x34
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002374:	81a3      	strh	r3, [r4, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	6063      	str	r3, [r4, #4]
 800237a:	6923      	ldr	r3, [r4, #16]
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	81a3      	strh	r3, [r4, #12]
 8002386:	6923      	ldr	r3, [r4, #16]
 8002388:	b94b      	cbnz	r3, 800239e <__swsetup_r+0x7a>
 800238a:	89a3      	ldrh	r3, [r4, #12]
 800238c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002394:	d003      	beq.n	800239e <__swsetup_r+0x7a>
 8002396:	4621      	mov	r1, r4
 8002398:	4628      	mov	r0, r5
 800239a:	f000 fd2f 	bl	8002dfc <__smakebuf_r>
 800239e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a2:	f013 0201 	ands.w	r2, r3, #1
 80023a6:	d00a      	beq.n	80023be <__swsetup_r+0x9a>
 80023a8:	2200      	movs	r2, #0
 80023aa:	60a2      	str	r2, [r4, #8]
 80023ac:	6962      	ldr	r2, [r4, #20]
 80023ae:	4252      	negs	r2, r2
 80023b0:	61a2      	str	r2, [r4, #24]
 80023b2:	6922      	ldr	r2, [r4, #16]
 80023b4:	b942      	cbnz	r2, 80023c8 <__swsetup_r+0xa4>
 80023b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023ba:	d1c5      	bne.n	8002348 <__swsetup_r+0x24>
 80023bc:	bd38      	pop	{r3, r4, r5, pc}
 80023be:	0799      	lsls	r1, r3, #30
 80023c0:	bf58      	it	pl
 80023c2:	6962      	ldrpl	r2, [r4, #20]
 80023c4:	60a2      	str	r2, [r4, #8]
 80023c6:	e7f4      	b.n	80023b2 <__swsetup_r+0x8e>
 80023c8:	2000      	movs	r0, #0
 80023ca:	e7f7      	b.n	80023bc <__swsetup_r+0x98>
 80023cc:	20000018 	.word	0x20000018

080023d0 <memset>:
 80023d0:	4402      	add	r2, r0
 80023d2:	4603      	mov	r3, r0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d100      	bne.n	80023da <memset+0xa>
 80023d8:	4770      	bx	lr
 80023da:	f803 1b01 	strb.w	r1, [r3], #1
 80023de:	e7f9      	b.n	80023d4 <memset+0x4>

080023e0 <_close_r>:
 80023e0:	b538      	push	{r3, r4, r5, lr}
 80023e2:	4d06      	ldr	r5, [pc, #24]	@ (80023fc <_close_r+0x1c>)
 80023e4:	2300      	movs	r3, #0
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	602b      	str	r3, [r5, #0]
 80023ec:	f7fe fd7c 	bl	8000ee8 <_close>
 80023f0:	1c43      	adds	r3, r0, #1
 80023f2:	d102      	bne.n	80023fa <_close_r+0x1a>
 80023f4:	682b      	ldr	r3, [r5, #0]
 80023f6:	b103      	cbz	r3, 80023fa <_close_r+0x1a>
 80023f8:	6023      	str	r3, [r4, #0]
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200001cc 	.word	0x200001cc

08002400 <_lseek_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	@ (8002420 <_lseek_r+0x20>)
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	2200      	movs	r2, #0
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7fe fd91 	bl	8000f36 <_lseek>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_lseek_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_lseek_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200001cc 	.word	0x200001cc

08002424 <_read_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	4d07      	ldr	r5, [pc, #28]	@ (8002444 <_read_r+0x20>)
 8002428:	4604      	mov	r4, r0
 800242a:	4608      	mov	r0, r1
 800242c:	4611      	mov	r1, r2
 800242e:	2200      	movs	r2, #0
 8002430:	602a      	str	r2, [r5, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f7fe fd3b 	bl	8000eae <_read>
 8002438:	1c43      	adds	r3, r0, #1
 800243a:	d102      	bne.n	8002442 <_read_r+0x1e>
 800243c:	682b      	ldr	r3, [r5, #0]
 800243e:	b103      	cbz	r3, 8002442 <_read_r+0x1e>
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	200001cc 	.word	0x200001cc

08002448 <_write_r>:
 8002448:	b538      	push	{r3, r4, r5, lr}
 800244a:	4d07      	ldr	r5, [pc, #28]	@ (8002468 <_write_r+0x20>)
 800244c:	4604      	mov	r4, r0
 800244e:	4608      	mov	r0, r1
 8002450:	4611      	mov	r1, r2
 8002452:	2200      	movs	r2, #0
 8002454:	602a      	str	r2, [r5, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f7fe fcb3 	bl	8000dc2 <_write>
 800245c:	1c43      	adds	r3, r0, #1
 800245e:	d102      	bne.n	8002466 <_write_r+0x1e>
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	b103      	cbz	r3, 8002466 <_write_r+0x1e>
 8002464:	6023      	str	r3, [r4, #0]
 8002466:	bd38      	pop	{r3, r4, r5, pc}
 8002468:	200001cc 	.word	0x200001cc

0800246c <__errno>:
 800246c:	4b01      	ldr	r3, [pc, #4]	@ (8002474 <__errno+0x8>)
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000018 	.word	0x20000018

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	4d0d      	ldr	r5, [pc, #52]	@ (80024b0 <__libc_init_array+0x38>)
 800247c:	4c0d      	ldr	r4, [pc, #52]	@ (80024b4 <__libc_init_array+0x3c>)
 800247e:	1b64      	subs	r4, r4, r5
 8002480:	10a4      	asrs	r4, r4, #2
 8002482:	2600      	movs	r6, #0
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	4d0b      	ldr	r5, [pc, #44]	@ (80024b8 <__libc_init_array+0x40>)
 800248a:	4c0c      	ldr	r4, [pc, #48]	@ (80024bc <__libc_init_array+0x44>)
 800248c:	f000 fd24 	bl	8002ed8 <_init>
 8002490:	1b64      	subs	r4, r4, r5
 8002492:	10a4      	asrs	r4, r4, #2
 8002494:	2600      	movs	r6, #0
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	08002ff8 	.word	0x08002ff8
 80024b4:	08002ff8 	.word	0x08002ff8
 80024b8:	08002ff8 	.word	0x08002ff8
 80024bc:	08002ffc 	.word	0x08002ffc

080024c0 <__retarget_lock_init_recursive>:
 80024c0:	4770      	bx	lr

080024c2 <__retarget_lock_acquire_recursive>:
 80024c2:	4770      	bx	lr

080024c4 <__retarget_lock_release_recursive>:
 80024c4:	4770      	bx	lr
	...

080024c8 <_free_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	4605      	mov	r5, r0
 80024cc:	2900      	cmp	r1, #0
 80024ce:	d041      	beq.n	8002554 <_free_r+0x8c>
 80024d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d4:	1f0c      	subs	r4, r1, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bfb8      	it	lt
 80024da:	18e4      	addlt	r4, r4, r3
 80024dc:	f000 f8e0 	bl	80026a0 <__malloc_lock>
 80024e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <_free_r+0x90>)
 80024e2:	6813      	ldr	r3, [r2, #0]
 80024e4:	b933      	cbnz	r3, 80024f4 <_free_r+0x2c>
 80024e6:	6063      	str	r3, [r4, #4]
 80024e8:	6014      	str	r4, [r2, #0]
 80024ea:	4628      	mov	r0, r5
 80024ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024f0:	f000 b8dc 	b.w	80026ac <__malloc_unlock>
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d908      	bls.n	800250a <_free_r+0x42>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	1821      	adds	r1, r4, r0
 80024fc:	428b      	cmp	r3, r1
 80024fe:	bf01      	itttt	eq
 8002500:	6819      	ldreq	r1, [r3, #0]
 8002502:	685b      	ldreq	r3, [r3, #4]
 8002504:	1809      	addeq	r1, r1, r0
 8002506:	6021      	streq	r1, [r4, #0]
 8002508:	e7ed      	b.n	80024e6 <_free_r+0x1e>
 800250a:	461a      	mov	r2, r3
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	b10b      	cbz	r3, 8002514 <_free_r+0x4c>
 8002510:	42a3      	cmp	r3, r4
 8002512:	d9fa      	bls.n	800250a <_free_r+0x42>
 8002514:	6811      	ldr	r1, [r2, #0]
 8002516:	1850      	adds	r0, r2, r1
 8002518:	42a0      	cmp	r0, r4
 800251a:	d10b      	bne.n	8002534 <_free_r+0x6c>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	4401      	add	r1, r0
 8002520:	1850      	adds	r0, r2, r1
 8002522:	4283      	cmp	r3, r0
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	d1e0      	bne.n	80024ea <_free_r+0x22>
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	6053      	str	r3, [r2, #4]
 800252e:	4408      	add	r0, r1
 8002530:	6010      	str	r0, [r2, #0]
 8002532:	e7da      	b.n	80024ea <_free_r+0x22>
 8002534:	d902      	bls.n	800253c <_free_r+0x74>
 8002536:	230c      	movs	r3, #12
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	e7d6      	b.n	80024ea <_free_r+0x22>
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	1821      	adds	r1, r4, r0
 8002540:	428b      	cmp	r3, r1
 8002542:	bf04      	itt	eq
 8002544:	6819      	ldreq	r1, [r3, #0]
 8002546:	685b      	ldreq	r3, [r3, #4]
 8002548:	6063      	str	r3, [r4, #4]
 800254a:	bf04      	itt	eq
 800254c:	1809      	addeq	r1, r1, r0
 800254e:	6021      	streq	r1, [r4, #0]
 8002550:	6054      	str	r4, [r2, #4]
 8002552:	e7ca      	b.n	80024ea <_free_r+0x22>
 8002554:	bd38      	pop	{r3, r4, r5, pc}
 8002556:	bf00      	nop
 8002558:	200001d8 	.word	0x200001d8

0800255c <sbrk_aligned>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	4e0f      	ldr	r6, [pc, #60]	@ (800259c <sbrk_aligned+0x40>)
 8002560:	460c      	mov	r4, r1
 8002562:	6831      	ldr	r1, [r6, #0]
 8002564:	4605      	mov	r5, r0
 8002566:	b911      	cbnz	r1, 800256e <sbrk_aligned+0x12>
 8002568:	f000 fca6 	bl	8002eb8 <_sbrk_r>
 800256c:	6030      	str	r0, [r6, #0]
 800256e:	4621      	mov	r1, r4
 8002570:	4628      	mov	r0, r5
 8002572:	f000 fca1 	bl	8002eb8 <_sbrk_r>
 8002576:	1c43      	adds	r3, r0, #1
 8002578:	d103      	bne.n	8002582 <sbrk_aligned+0x26>
 800257a:	f04f 34ff 	mov.w	r4, #4294967295
 800257e:	4620      	mov	r0, r4
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	1cc4      	adds	r4, r0, #3
 8002584:	f024 0403 	bic.w	r4, r4, #3
 8002588:	42a0      	cmp	r0, r4
 800258a:	d0f8      	beq.n	800257e <sbrk_aligned+0x22>
 800258c:	1a21      	subs	r1, r4, r0
 800258e:	4628      	mov	r0, r5
 8002590:	f000 fc92 	bl	8002eb8 <_sbrk_r>
 8002594:	3001      	adds	r0, #1
 8002596:	d1f2      	bne.n	800257e <sbrk_aligned+0x22>
 8002598:	e7ef      	b.n	800257a <sbrk_aligned+0x1e>
 800259a:	bf00      	nop
 800259c:	200001d4 	.word	0x200001d4

080025a0 <_malloc_r>:
 80025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025a4:	1ccd      	adds	r5, r1, #3
 80025a6:	f025 0503 	bic.w	r5, r5, #3
 80025aa:	3508      	adds	r5, #8
 80025ac:	2d0c      	cmp	r5, #12
 80025ae:	bf38      	it	cc
 80025b0:	250c      	movcc	r5, #12
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	4606      	mov	r6, r0
 80025b6:	db01      	blt.n	80025bc <_malloc_r+0x1c>
 80025b8:	42a9      	cmp	r1, r5
 80025ba:	d904      	bls.n	80025c6 <_malloc_r+0x26>
 80025bc:	230c      	movs	r3, #12
 80025be:	6033      	str	r3, [r6, #0]
 80025c0:	2000      	movs	r0, #0
 80025c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800269c <_malloc_r+0xfc>
 80025ca:	f000 f869 	bl	80026a0 <__malloc_lock>
 80025ce:	f8d8 3000 	ldr.w	r3, [r8]
 80025d2:	461c      	mov	r4, r3
 80025d4:	bb44      	cbnz	r4, 8002628 <_malloc_r+0x88>
 80025d6:	4629      	mov	r1, r5
 80025d8:	4630      	mov	r0, r6
 80025da:	f7ff ffbf 	bl	800255c <sbrk_aligned>
 80025de:	1c43      	adds	r3, r0, #1
 80025e0:	4604      	mov	r4, r0
 80025e2:	d158      	bne.n	8002696 <_malloc_r+0xf6>
 80025e4:	f8d8 4000 	ldr.w	r4, [r8]
 80025e8:	4627      	mov	r7, r4
 80025ea:	2f00      	cmp	r7, #0
 80025ec:	d143      	bne.n	8002676 <_malloc_r+0xd6>
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d04b      	beq.n	800268a <_malloc_r+0xea>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	4639      	mov	r1, r7
 80025f6:	4630      	mov	r0, r6
 80025f8:	eb04 0903 	add.w	r9, r4, r3
 80025fc:	f000 fc5c 	bl	8002eb8 <_sbrk_r>
 8002600:	4581      	cmp	r9, r0
 8002602:	d142      	bne.n	800268a <_malloc_r+0xea>
 8002604:	6821      	ldr	r1, [r4, #0]
 8002606:	1a6d      	subs	r5, r5, r1
 8002608:	4629      	mov	r1, r5
 800260a:	4630      	mov	r0, r6
 800260c:	f7ff ffa6 	bl	800255c <sbrk_aligned>
 8002610:	3001      	adds	r0, #1
 8002612:	d03a      	beq.n	800268a <_malloc_r+0xea>
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	442b      	add	r3, r5
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	f8d8 3000 	ldr.w	r3, [r8]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	bb62      	cbnz	r2, 800267c <_malloc_r+0xdc>
 8002622:	f8c8 7000 	str.w	r7, [r8]
 8002626:	e00f      	b.n	8002648 <_malloc_r+0xa8>
 8002628:	6822      	ldr	r2, [r4, #0]
 800262a:	1b52      	subs	r2, r2, r5
 800262c:	d420      	bmi.n	8002670 <_malloc_r+0xd0>
 800262e:	2a0b      	cmp	r2, #11
 8002630:	d917      	bls.n	8002662 <_malloc_r+0xc2>
 8002632:	1961      	adds	r1, r4, r5
 8002634:	42a3      	cmp	r3, r4
 8002636:	6025      	str	r5, [r4, #0]
 8002638:	bf18      	it	ne
 800263a:	6059      	strne	r1, [r3, #4]
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	bf08      	it	eq
 8002640:	f8c8 1000 	streq.w	r1, [r8]
 8002644:	5162      	str	r2, [r4, r5]
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	4630      	mov	r0, r6
 800264a:	f000 f82f 	bl	80026ac <__malloc_unlock>
 800264e:	f104 000b 	add.w	r0, r4, #11
 8002652:	1d23      	adds	r3, r4, #4
 8002654:	f020 0007 	bic.w	r0, r0, #7
 8002658:	1ac2      	subs	r2, r0, r3
 800265a:	bf1c      	itt	ne
 800265c:	1a1b      	subne	r3, r3, r0
 800265e:	50a3      	strne	r3, [r4, r2]
 8002660:	e7af      	b.n	80025c2 <_malloc_r+0x22>
 8002662:	6862      	ldr	r2, [r4, #4]
 8002664:	42a3      	cmp	r3, r4
 8002666:	bf0c      	ite	eq
 8002668:	f8c8 2000 	streq.w	r2, [r8]
 800266c:	605a      	strne	r2, [r3, #4]
 800266e:	e7eb      	b.n	8002648 <_malloc_r+0xa8>
 8002670:	4623      	mov	r3, r4
 8002672:	6864      	ldr	r4, [r4, #4]
 8002674:	e7ae      	b.n	80025d4 <_malloc_r+0x34>
 8002676:	463c      	mov	r4, r7
 8002678:	687f      	ldr	r7, [r7, #4]
 800267a:	e7b6      	b.n	80025ea <_malloc_r+0x4a>
 800267c:	461a      	mov	r2, r3
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	42a3      	cmp	r3, r4
 8002682:	d1fb      	bne.n	800267c <_malloc_r+0xdc>
 8002684:	2300      	movs	r3, #0
 8002686:	6053      	str	r3, [r2, #4]
 8002688:	e7de      	b.n	8002648 <_malloc_r+0xa8>
 800268a:	230c      	movs	r3, #12
 800268c:	6033      	str	r3, [r6, #0]
 800268e:	4630      	mov	r0, r6
 8002690:	f000 f80c 	bl	80026ac <__malloc_unlock>
 8002694:	e794      	b.n	80025c0 <_malloc_r+0x20>
 8002696:	6005      	str	r5, [r0, #0]
 8002698:	e7d6      	b.n	8002648 <_malloc_r+0xa8>
 800269a:	bf00      	nop
 800269c:	200001d8 	.word	0x200001d8

080026a0 <__malloc_lock>:
 80026a0:	4801      	ldr	r0, [pc, #4]	@ (80026a8 <__malloc_lock+0x8>)
 80026a2:	f7ff bf0e 	b.w	80024c2 <__retarget_lock_acquire_recursive>
 80026a6:	bf00      	nop
 80026a8:	200001d0 	.word	0x200001d0

080026ac <__malloc_unlock>:
 80026ac:	4801      	ldr	r0, [pc, #4]	@ (80026b4 <__malloc_unlock+0x8>)
 80026ae:	f7ff bf09 	b.w	80024c4 <__retarget_lock_release_recursive>
 80026b2:	bf00      	nop
 80026b4:	200001d0 	.word	0x200001d0

080026b8 <__sfputc_r>:
 80026b8:	6893      	ldr	r3, [r2, #8]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	b410      	push	{r4}
 80026c0:	6093      	str	r3, [r2, #8]
 80026c2:	da08      	bge.n	80026d6 <__sfputc_r+0x1e>
 80026c4:	6994      	ldr	r4, [r2, #24]
 80026c6:	42a3      	cmp	r3, r4
 80026c8:	db01      	blt.n	80026ce <__sfputc_r+0x16>
 80026ca:	290a      	cmp	r1, #10
 80026cc:	d103      	bne.n	80026d6 <__sfputc_r+0x1e>
 80026ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026d2:	f7ff bde8 	b.w	80022a6 <__swbuf_r>
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	1c58      	adds	r0, r3, #1
 80026da:	6010      	str	r0, [r2, #0]
 80026dc:	7019      	strb	r1, [r3, #0]
 80026de:	4608      	mov	r0, r1
 80026e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <__sfputs_r>:
 80026e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e8:	4606      	mov	r6, r0
 80026ea:	460f      	mov	r7, r1
 80026ec:	4614      	mov	r4, r2
 80026ee:	18d5      	adds	r5, r2, r3
 80026f0:	42ac      	cmp	r4, r5
 80026f2:	d101      	bne.n	80026f8 <__sfputs_r+0x12>
 80026f4:	2000      	movs	r0, #0
 80026f6:	e007      	b.n	8002708 <__sfputs_r+0x22>
 80026f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026fc:	463a      	mov	r2, r7
 80026fe:	4630      	mov	r0, r6
 8002700:	f7ff ffda 	bl	80026b8 <__sfputc_r>
 8002704:	1c43      	adds	r3, r0, #1
 8002706:	d1f3      	bne.n	80026f0 <__sfputs_r+0xa>
 8002708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800270c <_vfiprintf_r>:
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002710:	460d      	mov	r5, r1
 8002712:	b09d      	sub	sp, #116	@ 0x74
 8002714:	4614      	mov	r4, r2
 8002716:	4698      	mov	r8, r3
 8002718:	4606      	mov	r6, r0
 800271a:	b118      	cbz	r0, 8002724 <_vfiprintf_r+0x18>
 800271c:	6a03      	ldr	r3, [r0, #32]
 800271e:	b90b      	cbnz	r3, 8002724 <_vfiprintf_r+0x18>
 8002720:	f7ff fcd8 	bl	80020d4 <__sinit>
 8002724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002726:	07d9      	lsls	r1, r3, #31
 8002728:	d405      	bmi.n	8002736 <_vfiprintf_r+0x2a>
 800272a:	89ab      	ldrh	r3, [r5, #12]
 800272c:	059a      	lsls	r2, r3, #22
 800272e:	d402      	bmi.n	8002736 <_vfiprintf_r+0x2a>
 8002730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002732:	f7ff fec6 	bl	80024c2 <__retarget_lock_acquire_recursive>
 8002736:	89ab      	ldrh	r3, [r5, #12]
 8002738:	071b      	lsls	r3, r3, #28
 800273a:	d501      	bpl.n	8002740 <_vfiprintf_r+0x34>
 800273c:	692b      	ldr	r3, [r5, #16]
 800273e:	b99b      	cbnz	r3, 8002768 <_vfiprintf_r+0x5c>
 8002740:	4629      	mov	r1, r5
 8002742:	4630      	mov	r0, r6
 8002744:	f7ff fdee 	bl	8002324 <__swsetup_r>
 8002748:	b170      	cbz	r0, 8002768 <_vfiprintf_r+0x5c>
 800274a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800274c:	07dc      	lsls	r4, r3, #31
 800274e:	d504      	bpl.n	800275a <_vfiprintf_r+0x4e>
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	b01d      	add	sp, #116	@ 0x74
 8002756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800275a:	89ab      	ldrh	r3, [r5, #12]
 800275c:	0598      	lsls	r0, r3, #22
 800275e:	d4f7      	bmi.n	8002750 <_vfiprintf_r+0x44>
 8002760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002762:	f7ff feaf 	bl	80024c4 <__retarget_lock_release_recursive>
 8002766:	e7f3      	b.n	8002750 <_vfiprintf_r+0x44>
 8002768:	2300      	movs	r3, #0
 800276a:	9309      	str	r3, [sp, #36]	@ 0x24
 800276c:	2320      	movs	r3, #32
 800276e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002772:	f8cd 800c 	str.w	r8, [sp, #12]
 8002776:	2330      	movs	r3, #48	@ 0x30
 8002778:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002928 <_vfiprintf_r+0x21c>
 800277c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002780:	f04f 0901 	mov.w	r9, #1
 8002784:	4623      	mov	r3, r4
 8002786:	469a      	mov	sl, r3
 8002788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800278c:	b10a      	cbz	r2, 8002792 <_vfiprintf_r+0x86>
 800278e:	2a25      	cmp	r2, #37	@ 0x25
 8002790:	d1f9      	bne.n	8002786 <_vfiprintf_r+0x7a>
 8002792:	ebba 0b04 	subs.w	fp, sl, r4
 8002796:	d00b      	beq.n	80027b0 <_vfiprintf_r+0xa4>
 8002798:	465b      	mov	r3, fp
 800279a:	4622      	mov	r2, r4
 800279c:	4629      	mov	r1, r5
 800279e:	4630      	mov	r0, r6
 80027a0:	f7ff ffa1 	bl	80026e6 <__sfputs_r>
 80027a4:	3001      	adds	r0, #1
 80027a6:	f000 80a7 	beq.w	80028f8 <_vfiprintf_r+0x1ec>
 80027aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80027ac:	445a      	add	r2, fp
 80027ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80027b0:	f89a 3000 	ldrb.w	r3, [sl]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 809f 	beq.w	80028f8 <_vfiprintf_r+0x1ec>
 80027ba:	2300      	movs	r3, #0
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027c4:	f10a 0a01 	add.w	sl, sl, #1
 80027c8:	9304      	str	r3, [sp, #16]
 80027ca:	9307      	str	r3, [sp, #28]
 80027cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80027d2:	4654      	mov	r4, sl
 80027d4:	2205      	movs	r2, #5
 80027d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027da:	4853      	ldr	r0, [pc, #332]	@ (8002928 <_vfiprintf_r+0x21c>)
 80027dc:	f7fd fd10 	bl	8000200 <memchr>
 80027e0:	9a04      	ldr	r2, [sp, #16]
 80027e2:	b9d8      	cbnz	r0, 800281c <_vfiprintf_r+0x110>
 80027e4:	06d1      	lsls	r1, r2, #27
 80027e6:	bf44      	itt	mi
 80027e8:	2320      	movmi	r3, #32
 80027ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027ee:	0713      	lsls	r3, r2, #28
 80027f0:	bf44      	itt	mi
 80027f2:	232b      	movmi	r3, #43	@ 0x2b
 80027f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027f8:	f89a 3000 	ldrb.w	r3, [sl]
 80027fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80027fe:	d015      	beq.n	800282c <_vfiprintf_r+0x120>
 8002800:	9a07      	ldr	r2, [sp, #28]
 8002802:	4654      	mov	r4, sl
 8002804:	2000      	movs	r0, #0
 8002806:	f04f 0c0a 	mov.w	ip, #10
 800280a:	4621      	mov	r1, r4
 800280c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002810:	3b30      	subs	r3, #48	@ 0x30
 8002812:	2b09      	cmp	r3, #9
 8002814:	d94b      	bls.n	80028ae <_vfiprintf_r+0x1a2>
 8002816:	b1b0      	cbz	r0, 8002846 <_vfiprintf_r+0x13a>
 8002818:	9207      	str	r2, [sp, #28]
 800281a:	e014      	b.n	8002846 <_vfiprintf_r+0x13a>
 800281c:	eba0 0308 	sub.w	r3, r0, r8
 8002820:	fa09 f303 	lsl.w	r3, r9, r3
 8002824:	4313      	orrs	r3, r2
 8002826:	9304      	str	r3, [sp, #16]
 8002828:	46a2      	mov	sl, r4
 800282a:	e7d2      	b.n	80027d2 <_vfiprintf_r+0xc6>
 800282c:	9b03      	ldr	r3, [sp, #12]
 800282e:	1d19      	adds	r1, r3, #4
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	9103      	str	r1, [sp, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	bfbb      	ittet	lt
 8002838:	425b      	neglt	r3, r3
 800283a:	f042 0202 	orrlt.w	r2, r2, #2
 800283e:	9307      	strge	r3, [sp, #28]
 8002840:	9307      	strlt	r3, [sp, #28]
 8002842:	bfb8      	it	lt
 8002844:	9204      	strlt	r2, [sp, #16]
 8002846:	7823      	ldrb	r3, [r4, #0]
 8002848:	2b2e      	cmp	r3, #46	@ 0x2e
 800284a:	d10a      	bne.n	8002862 <_vfiprintf_r+0x156>
 800284c:	7863      	ldrb	r3, [r4, #1]
 800284e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002850:	d132      	bne.n	80028b8 <_vfiprintf_r+0x1ac>
 8002852:	9b03      	ldr	r3, [sp, #12]
 8002854:	1d1a      	adds	r2, r3, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	9203      	str	r2, [sp, #12]
 800285a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800285e:	3402      	adds	r4, #2
 8002860:	9305      	str	r3, [sp, #20]
 8002862:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002938 <_vfiprintf_r+0x22c>
 8002866:	7821      	ldrb	r1, [r4, #0]
 8002868:	2203      	movs	r2, #3
 800286a:	4650      	mov	r0, sl
 800286c:	f7fd fcc8 	bl	8000200 <memchr>
 8002870:	b138      	cbz	r0, 8002882 <_vfiprintf_r+0x176>
 8002872:	9b04      	ldr	r3, [sp, #16]
 8002874:	eba0 000a 	sub.w	r0, r0, sl
 8002878:	2240      	movs	r2, #64	@ 0x40
 800287a:	4082      	lsls	r2, r0
 800287c:	4313      	orrs	r3, r2
 800287e:	3401      	adds	r4, #1
 8002880:	9304      	str	r3, [sp, #16]
 8002882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002886:	4829      	ldr	r0, [pc, #164]	@ (800292c <_vfiprintf_r+0x220>)
 8002888:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800288c:	2206      	movs	r2, #6
 800288e:	f7fd fcb7 	bl	8000200 <memchr>
 8002892:	2800      	cmp	r0, #0
 8002894:	d03f      	beq.n	8002916 <_vfiprintf_r+0x20a>
 8002896:	4b26      	ldr	r3, [pc, #152]	@ (8002930 <_vfiprintf_r+0x224>)
 8002898:	bb1b      	cbnz	r3, 80028e2 <_vfiprintf_r+0x1d6>
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	3307      	adds	r3, #7
 800289e:	f023 0307 	bic.w	r3, r3, #7
 80028a2:	3308      	adds	r3, #8
 80028a4:	9303      	str	r3, [sp, #12]
 80028a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028a8:	443b      	add	r3, r7
 80028aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80028ac:	e76a      	b.n	8002784 <_vfiprintf_r+0x78>
 80028ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80028b2:	460c      	mov	r4, r1
 80028b4:	2001      	movs	r0, #1
 80028b6:	e7a8      	b.n	800280a <_vfiprintf_r+0xfe>
 80028b8:	2300      	movs	r3, #0
 80028ba:	3401      	adds	r4, #1
 80028bc:	9305      	str	r3, [sp, #20]
 80028be:	4619      	mov	r1, r3
 80028c0:	f04f 0c0a 	mov.w	ip, #10
 80028c4:	4620      	mov	r0, r4
 80028c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028ca:	3a30      	subs	r2, #48	@ 0x30
 80028cc:	2a09      	cmp	r2, #9
 80028ce:	d903      	bls.n	80028d8 <_vfiprintf_r+0x1cc>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0c6      	beq.n	8002862 <_vfiprintf_r+0x156>
 80028d4:	9105      	str	r1, [sp, #20]
 80028d6:	e7c4      	b.n	8002862 <_vfiprintf_r+0x156>
 80028d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80028dc:	4604      	mov	r4, r0
 80028de:	2301      	movs	r3, #1
 80028e0:	e7f0      	b.n	80028c4 <_vfiprintf_r+0x1b8>
 80028e2:	ab03      	add	r3, sp, #12
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	462a      	mov	r2, r5
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <_vfiprintf_r+0x228>)
 80028ea:	a904      	add	r1, sp, #16
 80028ec:	4630      	mov	r0, r6
 80028ee:	f3af 8000 	nop.w
 80028f2:	4607      	mov	r7, r0
 80028f4:	1c78      	adds	r0, r7, #1
 80028f6:	d1d6      	bne.n	80028a6 <_vfiprintf_r+0x19a>
 80028f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028fa:	07d9      	lsls	r1, r3, #31
 80028fc:	d405      	bmi.n	800290a <_vfiprintf_r+0x1fe>
 80028fe:	89ab      	ldrh	r3, [r5, #12]
 8002900:	059a      	lsls	r2, r3, #22
 8002902:	d402      	bmi.n	800290a <_vfiprintf_r+0x1fe>
 8002904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002906:	f7ff fddd 	bl	80024c4 <__retarget_lock_release_recursive>
 800290a:	89ab      	ldrh	r3, [r5, #12]
 800290c:	065b      	lsls	r3, r3, #25
 800290e:	f53f af1f 	bmi.w	8002750 <_vfiprintf_r+0x44>
 8002912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002914:	e71e      	b.n	8002754 <_vfiprintf_r+0x48>
 8002916:	ab03      	add	r3, sp, #12
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	462a      	mov	r2, r5
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <_vfiprintf_r+0x228>)
 800291e:	a904      	add	r1, sp, #16
 8002920:	4630      	mov	r0, r6
 8002922:	f000 f879 	bl	8002a18 <_printf_i>
 8002926:	e7e4      	b.n	80028f2 <_vfiprintf_r+0x1e6>
 8002928:	08002fbc 	.word	0x08002fbc
 800292c:	08002fc6 	.word	0x08002fc6
 8002930:	00000000 	.word	0x00000000
 8002934:	080026e7 	.word	0x080026e7
 8002938:	08002fc2 	.word	0x08002fc2

0800293c <_printf_common>:
 800293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	4616      	mov	r6, r2
 8002942:	4698      	mov	r8, r3
 8002944:	688a      	ldr	r2, [r1, #8]
 8002946:	690b      	ldr	r3, [r1, #16]
 8002948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800294c:	4293      	cmp	r3, r2
 800294e:	bfb8      	it	lt
 8002950:	4613      	movlt	r3, r2
 8002952:	6033      	str	r3, [r6, #0]
 8002954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002958:	4607      	mov	r7, r0
 800295a:	460c      	mov	r4, r1
 800295c:	b10a      	cbz	r2, 8002962 <_printf_common+0x26>
 800295e:	3301      	adds	r3, #1
 8002960:	6033      	str	r3, [r6, #0]
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	0699      	lsls	r1, r3, #26
 8002966:	bf42      	ittt	mi
 8002968:	6833      	ldrmi	r3, [r6, #0]
 800296a:	3302      	addmi	r3, #2
 800296c:	6033      	strmi	r3, [r6, #0]
 800296e:	6825      	ldr	r5, [r4, #0]
 8002970:	f015 0506 	ands.w	r5, r5, #6
 8002974:	d106      	bne.n	8002984 <_printf_common+0x48>
 8002976:	f104 0a19 	add.w	sl, r4, #25
 800297a:	68e3      	ldr	r3, [r4, #12]
 800297c:	6832      	ldr	r2, [r6, #0]
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	42ab      	cmp	r3, r5
 8002982:	dc26      	bgt.n	80029d2 <_printf_common+0x96>
 8002984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002988:	6822      	ldr	r2, [r4, #0]
 800298a:	3b00      	subs	r3, #0
 800298c:	bf18      	it	ne
 800298e:	2301      	movne	r3, #1
 8002990:	0692      	lsls	r2, r2, #26
 8002992:	d42b      	bmi.n	80029ec <_printf_common+0xb0>
 8002994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002998:	4641      	mov	r1, r8
 800299a:	4638      	mov	r0, r7
 800299c:	47c8      	blx	r9
 800299e:	3001      	adds	r0, #1
 80029a0:	d01e      	beq.n	80029e0 <_printf_common+0xa4>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	6922      	ldr	r2, [r4, #16]
 80029a6:	f003 0306 	and.w	r3, r3, #6
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	bf02      	ittt	eq
 80029ae:	68e5      	ldreq	r5, [r4, #12]
 80029b0:	6833      	ldreq	r3, [r6, #0]
 80029b2:	1aed      	subeq	r5, r5, r3
 80029b4:	68a3      	ldr	r3, [r4, #8]
 80029b6:	bf0c      	ite	eq
 80029b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029bc:	2500      	movne	r5, #0
 80029be:	4293      	cmp	r3, r2
 80029c0:	bfc4      	itt	gt
 80029c2:	1a9b      	subgt	r3, r3, r2
 80029c4:	18ed      	addgt	r5, r5, r3
 80029c6:	2600      	movs	r6, #0
 80029c8:	341a      	adds	r4, #26
 80029ca:	42b5      	cmp	r5, r6
 80029cc:	d11a      	bne.n	8002a04 <_printf_common+0xc8>
 80029ce:	2000      	movs	r0, #0
 80029d0:	e008      	b.n	80029e4 <_printf_common+0xa8>
 80029d2:	2301      	movs	r3, #1
 80029d4:	4652      	mov	r2, sl
 80029d6:	4641      	mov	r1, r8
 80029d8:	4638      	mov	r0, r7
 80029da:	47c8      	blx	r9
 80029dc:	3001      	adds	r0, #1
 80029de:	d103      	bne.n	80029e8 <_printf_common+0xac>
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e8:	3501      	adds	r5, #1
 80029ea:	e7c6      	b.n	800297a <_printf_common+0x3e>
 80029ec:	18e1      	adds	r1, r4, r3
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	2030      	movs	r0, #48	@ 0x30
 80029f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029f6:	4422      	add	r2, r4
 80029f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a00:	3302      	adds	r3, #2
 8002a02:	e7c7      	b.n	8002994 <_printf_common+0x58>
 8002a04:	2301      	movs	r3, #1
 8002a06:	4622      	mov	r2, r4
 8002a08:	4641      	mov	r1, r8
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	47c8      	blx	r9
 8002a0e:	3001      	adds	r0, #1
 8002a10:	d0e6      	beq.n	80029e0 <_printf_common+0xa4>
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7d9      	b.n	80029ca <_printf_common+0x8e>
	...

08002a18 <_printf_i>:
 8002a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a1c:	7e0f      	ldrb	r7, [r1, #24]
 8002a1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a20:	2f78      	cmp	r7, #120	@ 0x78
 8002a22:	4691      	mov	r9, r2
 8002a24:	4680      	mov	r8, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	469a      	mov	sl, r3
 8002a2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a2e:	d807      	bhi.n	8002a40 <_printf_i+0x28>
 8002a30:	2f62      	cmp	r7, #98	@ 0x62
 8002a32:	d80a      	bhi.n	8002a4a <_printf_i+0x32>
 8002a34:	2f00      	cmp	r7, #0
 8002a36:	f000 80d2 	beq.w	8002bde <_printf_i+0x1c6>
 8002a3a:	2f58      	cmp	r7, #88	@ 0x58
 8002a3c:	f000 80b9 	beq.w	8002bb2 <_printf_i+0x19a>
 8002a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a48:	e03a      	b.n	8002ac0 <_printf_i+0xa8>
 8002a4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a4e:	2b15      	cmp	r3, #21
 8002a50:	d8f6      	bhi.n	8002a40 <_printf_i+0x28>
 8002a52:	a101      	add	r1, pc, #4	@ (adr r1, 8002a58 <_printf_i+0x40>)
 8002a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a58:	08002ab1 	.word	0x08002ab1
 8002a5c:	08002ac5 	.word	0x08002ac5
 8002a60:	08002a41 	.word	0x08002a41
 8002a64:	08002a41 	.word	0x08002a41
 8002a68:	08002a41 	.word	0x08002a41
 8002a6c:	08002a41 	.word	0x08002a41
 8002a70:	08002ac5 	.word	0x08002ac5
 8002a74:	08002a41 	.word	0x08002a41
 8002a78:	08002a41 	.word	0x08002a41
 8002a7c:	08002a41 	.word	0x08002a41
 8002a80:	08002a41 	.word	0x08002a41
 8002a84:	08002bc5 	.word	0x08002bc5
 8002a88:	08002aef 	.word	0x08002aef
 8002a8c:	08002b7f 	.word	0x08002b7f
 8002a90:	08002a41 	.word	0x08002a41
 8002a94:	08002a41 	.word	0x08002a41
 8002a98:	08002be7 	.word	0x08002be7
 8002a9c:	08002a41 	.word	0x08002a41
 8002aa0:	08002aef 	.word	0x08002aef
 8002aa4:	08002a41 	.word	0x08002a41
 8002aa8:	08002a41 	.word	0x08002a41
 8002aac:	08002b87 	.word	0x08002b87
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	1d1a      	adds	r2, r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6032      	str	r2, [r6, #0]
 8002ab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002abc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e09d      	b.n	8002c00 <_printf_i+0x1e8>
 8002ac4:	6833      	ldr	r3, [r6, #0]
 8002ac6:	6820      	ldr	r0, [r4, #0]
 8002ac8:	1d19      	adds	r1, r3, #4
 8002aca:	6031      	str	r1, [r6, #0]
 8002acc:	0606      	lsls	r6, r0, #24
 8002ace:	d501      	bpl.n	8002ad4 <_printf_i+0xbc>
 8002ad0:	681d      	ldr	r5, [r3, #0]
 8002ad2:	e003      	b.n	8002adc <_printf_i+0xc4>
 8002ad4:	0645      	lsls	r5, r0, #25
 8002ad6:	d5fb      	bpl.n	8002ad0 <_printf_i+0xb8>
 8002ad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002adc:	2d00      	cmp	r5, #0
 8002ade:	da03      	bge.n	8002ae8 <_printf_i+0xd0>
 8002ae0:	232d      	movs	r3, #45	@ 0x2d
 8002ae2:	426d      	negs	r5, r5
 8002ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ae8:	4859      	ldr	r0, [pc, #356]	@ (8002c50 <_printf_i+0x238>)
 8002aea:	230a      	movs	r3, #10
 8002aec:	e011      	b.n	8002b12 <_printf_i+0xfa>
 8002aee:	6821      	ldr	r1, [r4, #0]
 8002af0:	6833      	ldr	r3, [r6, #0]
 8002af2:	0608      	lsls	r0, r1, #24
 8002af4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002af8:	d402      	bmi.n	8002b00 <_printf_i+0xe8>
 8002afa:	0649      	lsls	r1, r1, #25
 8002afc:	bf48      	it	mi
 8002afe:	b2ad      	uxthmi	r5, r5
 8002b00:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b02:	4853      	ldr	r0, [pc, #332]	@ (8002c50 <_printf_i+0x238>)
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	bf14      	ite	ne
 8002b08:	230a      	movne	r3, #10
 8002b0a:	2308      	moveq	r3, #8
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b12:	6866      	ldr	r6, [r4, #4]
 8002b14:	60a6      	str	r6, [r4, #8]
 8002b16:	2e00      	cmp	r6, #0
 8002b18:	bfa2      	ittt	ge
 8002b1a:	6821      	ldrge	r1, [r4, #0]
 8002b1c:	f021 0104 	bicge.w	r1, r1, #4
 8002b20:	6021      	strge	r1, [r4, #0]
 8002b22:	b90d      	cbnz	r5, 8002b28 <_printf_i+0x110>
 8002b24:	2e00      	cmp	r6, #0
 8002b26:	d04b      	beq.n	8002bc0 <_printf_i+0x1a8>
 8002b28:	4616      	mov	r6, r2
 8002b2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b2e:	fb03 5711 	mls	r7, r3, r1, r5
 8002b32:	5dc7      	ldrb	r7, [r0, r7]
 8002b34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b38:	462f      	mov	r7, r5
 8002b3a:	42bb      	cmp	r3, r7
 8002b3c:	460d      	mov	r5, r1
 8002b3e:	d9f4      	bls.n	8002b2a <_printf_i+0x112>
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d10b      	bne.n	8002b5c <_printf_i+0x144>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	07df      	lsls	r7, r3, #31
 8002b48:	d508      	bpl.n	8002b5c <_printf_i+0x144>
 8002b4a:	6923      	ldr	r3, [r4, #16]
 8002b4c:	6861      	ldr	r1, [r4, #4]
 8002b4e:	4299      	cmp	r1, r3
 8002b50:	bfde      	ittt	le
 8002b52:	2330      	movle	r3, #48	@ 0x30
 8002b54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b5c:	1b92      	subs	r2, r2, r6
 8002b5e:	6122      	str	r2, [r4, #16]
 8002b60:	f8cd a000 	str.w	sl, [sp]
 8002b64:	464b      	mov	r3, r9
 8002b66:	aa03      	add	r2, sp, #12
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f7ff fee6 	bl	800293c <_printf_common>
 8002b70:	3001      	adds	r0, #1
 8002b72:	d14a      	bne.n	8002c0a <_printf_i+0x1f2>
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	b004      	add	sp, #16
 8002b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f043 0320 	orr.w	r3, r3, #32
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	4833      	ldr	r0, [pc, #204]	@ (8002c54 <_printf_i+0x23c>)
 8002b88:	2778      	movs	r7, #120	@ 0x78
 8002b8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	6831      	ldr	r1, [r6, #0]
 8002b92:	061f      	lsls	r7, r3, #24
 8002b94:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b98:	d402      	bmi.n	8002ba0 <_printf_i+0x188>
 8002b9a:	065f      	lsls	r7, r3, #25
 8002b9c:	bf48      	it	mi
 8002b9e:	b2ad      	uxthmi	r5, r5
 8002ba0:	6031      	str	r1, [r6, #0]
 8002ba2:	07d9      	lsls	r1, r3, #31
 8002ba4:	bf44      	itt	mi
 8002ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8002baa:	6023      	strmi	r3, [r4, #0]
 8002bac:	b11d      	cbz	r5, 8002bb6 <_printf_i+0x19e>
 8002bae:	2310      	movs	r3, #16
 8002bb0:	e7ac      	b.n	8002b0c <_printf_i+0xf4>
 8002bb2:	4827      	ldr	r0, [pc, #156]	@ (8002c50 <_printf_i+0x238>)
 8002bb4:	e7e9      	b.n	8002b8a <_printf_i+0x172>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	f023 0320 	bic.w	r3, r3, #32
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	e7f6      	b.n	8002bae <_printf_i+0x196>
 8002bc0:	4616      	mov	r6, r2
 8002bc2:	e7bd      	b.n	8002b40 <_printf_i+0x128>
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	6825      	ldr	r5, [r4, #0]
 8002bc8:	6961      	ldr	r1, [r4, #20]
 8002bca:	1d18      	adds	r0, r3, #4
 8002bcc:	6030      	str	r0, [r6, #0]
 8002bce:	062e      	lsls	r6, r5, #24
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	d501      	bpl.n	8002bd8 <_printf_i+0x1c0>
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <_printf_i+0x1c6>
 8002bd8:	0668      	lsls	r0, r5, #25
 8002bda:	d5fb      	bpl.n	8002bd4 <_printf_i+0x1bc>
 8002bdc:	8019      	strh	r1, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	6123      	str	r3, [r4, #16]
 8002be2:	4616      	mov	r6, r2
 8002be4:	e7bc      	b.n	8002b60 <_printf_i+0x148>
 8002be6:	6833      	ldr	r3, [r6, #0]
 8002be8:	1d1a      	adds	r2, r3, #4
 8002bea:	6032      	str	r2, [r6, #0]
 8002bec:	681e      	ldr	r6, [r3, #0]
 8002bee:	6862      	ldr	r2, [r4, #4]
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	f7fd fb04 	bl	8000200 <memchr>
 8002bf8:	b108      	cbz	r0, 8002bfe <_printf_i+0x1e6>
 8002bfa:	1b80      	subs	r0, r0, r6
 8002bfc:	6060      	str	r0, [r4, #4]
 8002bfe:	6863      	ldr	r3, [r4, #4]
 8002c00:	6123      	str	r3, [r4, #16]
 8002c02:	2300      	movs	r3, #0
 8002c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c08:	e7aa      	b.n	8002b60 <_printf_i+0x148>
 8002c0a:	6923      	ldr	r3, [r4, #16]
 8002c0c:	4632      	mov	r2, r6
 8002c0e:	4649      	mov	r1, r9
 8002c10:	4640      	mov	r0, r8
 8002c12:	47d0      	blx	sl
 8002c14:	3001      	adds	r0, #1
 8002c16:	d0ad      	beq.n	8002b74 <_printf_i+0x15c>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	079b      	lsls	r3, r3, #30
 8002c1c:	d413      	bmi.n	8002c46 <_printf_i+0x22e>
 8002c1e:	68e0      	ldr	r0, [r4, #12]
 8002c20:	9b03      	ldr	r3, [sp, #12]
 8002c22:	4298      	cmp	r0, r3
 8002c24:	bfb8      	it	lt
 8002c26:	4618      	movlt	r0, r3
 8002c28:	e7a6      	b.n	8002b78 <_printf_i+0x160>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	4649      	mov	r1, r9
 8002c30:	4640      	mov	r0, r8
 8002c32:	47d0      	blx	sl
 8002c34:	3001      	adds	r0, #1
 8002c36:	d09d      	beq.n	8002b74 <_printf_i+0x15c>
 8002c38:	3501      	adds	r5, #1
 8002c3a:	68e3      	ldr	r3, [r4, #12]
 8002c3c:	9903      	ldr	r1, [sp, #12]
 8002c3e:	1a5b      	subs	r3, r3, r1
 8002c40:	42ab      	cmp	r3, r5
 8002c42:	dcf2      	bgt.n	8002c2a <_printf_i+0x212>
 8002c44:	e7eb      	b.n	8002c1e <_printf_i+0x206>
 8002c46:	2500      	movs	r5, #0
 8002c48:	f104 0619 	add.w	r6, r4, #25
 8002c4c:	e7f5      	b.n	8002c3a <_printf_i+0x222>
 8002c4e:	bf00      	nop
 8002c50:	08002fcd 	.word	0x08002fcd
 8002c54:	08002fde 	.word	0x08002fde

08002c58 <__sflush_r>:
 8002c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c60:	0716      	lsls	r6, r2, #28
 8002c62:	4605      	mov	r5, r0
 8002c64:	460c      	mov	r4, r1
 8002c66:	d454      	bmi.n	8002d12 <__sflush_r+0xba>
 8002c68:	684b      	ldr	r3, [r1, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	dc02      	bgt.n	8002c74 <__sflush_r+0x1c>
 8002c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	dd48      	ble.n	8002d06 <__sflush_r+0xae>
 8002c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c76:	2e00      	cmp	r6, #0
 8002c78:	d045      	beq.n	8002d06 <__sflush_r+0xae>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c80:	682f      	ldr	r7, [r5, #0]
 8002c82:	6a21      	ldr	r1, [r4, #32]
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	d030      	beq.n	8002cea <__sflush_r+0x92>
 8002c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	0759      	lsls	r1, r3, #29
 8002c8e:	d505      	bpl.n	8002c9c <__sflush_r+0x44>
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c96:	b10b      	cbz	r3, 8002c9c <__sflush_r+0x44>
 8002c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c9a:	1ad2      	subs	r2, r2, r3
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ca0:	6a21      	ldr	r1, [r4, #32]
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	47b0      	blx	r6
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	89a3      	ldrh	r3, [r4, #12]
 8002caa:	d106      	bne.n	8002cba <__sflush_r+0x62>
 8002cac:	6829      	ldr	r1, [r5, #0]
 8002cae:	291d      	cmp	r1, #29
 8002cb0:	d82b      	bhi.n	8002d0a <__sflush_r+0xb2>
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d5c <__sflush_r+0x104>)
 8002cb4:	410a      	asrs	r2, r1
 8002cb6:	07d6      	lsls	r6, r2, #31
 8002cb8:	d427      	bmi.n	8002d0a <__sflush_r+0xb2>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	6062      	str	r2, [r4, #4]
 8002cbe:	04d9      	lsls	r1, r3, #19
 8002cc0:	6922      	ldr	r2, [r4, #16]
 8002cc2:	6022      	str	r2, [r4, #0]
 8002cc4:	d504      	bpl.n	8002cd0 <__sflush_r+0x78>
 8002cc6:	1c42      	adds	r2, r0, #1
 8002cc8:	d101      	bne.n	8002cce <__sflush_r+0x76>
 8002cca:	682b      	ldr	r3, [r5, #0]
 8002ccc:	b903      	cbnz	r3, 8002cd0 <__sflush_r+0x78>
 8002cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8002cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cd2:	602f      	str	r7, [r5, #0]
 8002cd4:	b1b9      	cbz	r1, 8002d06 <__sflush_r+0xae>
 8002cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cda:	4299      	cmp	r1, r3
 8002cdc:	d002      	beq.n	8002ce4 <__sflush_r+0x8c>
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f7ff fbf2 	bl	80024c8 <_free_r>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ce8:	e00d      	b.n	8002d06 <__sflush_r+0xae>
 8002cea:	2301      	movs	r3, #1
 8002cec:	4628      	mov	r0, r5
 8002cee:	47b0      	blx	r6
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	1c50      	adds	r0, r2, #1
 8002cf4:	d1c9      	bne.n	8002c8a <__sflush_r+0x32>
 8002cf6:	682b      	ldr	r3, [r5, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0c6      	beq.n	8002c8a <__sflush_r+0x32>
 8002cfc:	2b1d      	cmp	r3, #29
 8002cfe:	d001      	beq.n	8002d04 <__sflush_r+0xac>
 8002d00:	2b16      	cmp	r3, #22
 8002d02:	d11e      	bne.n	8002d42 <__sflush_r+0xea>
 8002d04:	602f      	str	r7, [r5, #0]
 8002d06:	2000      	movs	r0, #0
 8002d08:	e022      	b.n	8002d50 <__sflush_r+0xf8>
 8002d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	e01b      	b.n	8002d4a <__sflush_r+0xf2>
 8002d12:	690f      	ldr	r7, [r1, #16]
 8002d14:	2f00      	cmp	r7, #0
 8002d16:	d0f6      	beq.n	8002d06 <__sflush_r+0xae>
 8002d18:	0793      	lsls	r3, r2, #30
 8002d1a:	680e      	ldr	r6, [r1, #0]
 8002d1c:	bf08      	it	eq
 8002d1e:	694b      	ldreq	r3, [r1, #20]
 8002d20:	600f      	str	r7, [r1, #0]
 8002d22:	bf18      	it	ne
 8002d24:	2300      	movne	r3, #0
 8002d26:	eba6 0807 	sub.w	r8, r6, r7
 8002d2a:	608b      	str	r3, [r1, #8]
 8002d2c:	f1b8 0f00 	cmp.w	r8, #0
 8002d30:	dde9      	ble.n	8002d06 <__sflush_r+0xae>
 8002d32:	6a21      	ldr	r1, [r4, #32]
 8002d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002d36:	4643      	mov	r3, r8
 8002d38:	463a      	mov	r2, r7
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	47b0      	blx	r6
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	dc08      	bgt.n	8002d54 <__sflush_r+0xfc>
 8002d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d4a:	81a3      	strh	r3, [r4, #12]
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d54:	4407      	add	r7, r0
 8002d56:	eba8 0800 	sub.w	r8, r8, r0
 8002d5a:	e7e7      	b.n	8002d2c <__sflush_r+0xd4>
 8002d5c:	dfbffffe 	.word	0xdfbffffe

08002d60 <_fflush_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	690b      	ldr	r3, [r1, #16]
 8002d64:	4605      	mov	r5, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	b913      	cbnz	r3, 8002d70 <_fflush_r+0x10>
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	b118      	cbz	r0, 8002d7a <_fflush_r+0x1a>
 8002d72:	6a03      	ldr	r3, [r0, #32]
 8002d74:	b90b      	cbnz	r3, 8002d7a <_fflush_r+0x1a>
 8002d76:	f7ff f9ad 	bl	80020d4 <__sinit>
 8002d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f3      	beq.n	8002d6a <_fflush_r+0xa>
 8002d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d84:	07d0      	lsls	r0, r2, #31
 8002d86:	d404      	bmi.n	8002d92 <_fflush_r+0x32>
 8002d88:	0599      	lsls	r1, r3, #22
 8002d8a:	d402      	bmi.n	8002d92 <_fflush_r+0x32>
 8002d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d8e:	f7ff fb98 	bl	80024c2 <__retarget_lock_acquire_recursive>
 8002d92:	4628      	mov	r0, r5
 8002d94:	4621      	mov	r1, r4
 8002d96:	f7ff ff5f 	bl	8002c58 <__sflush_r>
 8002d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d9c:	07da      	lsls	r2, r3, #31
 8002d9e:	4605      	mov	r5, r0
 8002da0:	d4e4      	bmi.n	8002d6c <_fflush_r+0xc>
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	059b      	lsls	r3, r3, #22
 8002da6:	d4e1      	bmi.n	8002d6c <_fflush_r+0xc>
 8002da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002daa:	f7ff fb8b 	bl	80024c4 <__retarget_lock_release_recursive>
 8002dae:	e7dd      	b.n	8002d6c <_fflush_r+0xc>

08002db0 <__swhatbuf_r>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	460c      	mov	r4, r1
 8002db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db8:	2900      	cmp	r1, #0
 8002dba:	b096      	sub	sp, #88	@ 0x58
 8002dbc:	4615      	mov	r5, r2
 8002dbe:	461e      	mov	r6, r3
 8002dc0:	da0d      	bge.n	8002dde <__swhatbuf_r+0x2e>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2340      	movne	r3, #64	@ 0x40
 8002dd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	6031      	str	r1, [r6, #0]
 8002dd8:	602b      	str	r3, [r5, #0]
 8002dda:	b016      	add	sp, #88	@ 0x58
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	466a      	mov	r2, sp
 8002de0:	f000 f848 	bl	8002e74 <_fstat_r>
 8002de4:	2800      	cmp	r0, #0
 8002de6:	dbec      	blt.n	8002dc2 <__swhatbuf_r+0x12>
 8002de8:	9901      	ldr	r1, [sp, #4]
 8002dea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002dee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002df2:	4259      	negs	r1, r3
 8002df4:	4159      	adcs	r1, r3
 8002df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dfa:	e7eb      	b.n	8002dd4 <__swhatbuf_r+0x24>

08002dfc <__smakebuf_r>:
 8002dfc:	898b      	ldrh	r3, [r1, #12]
 8002dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e00:	079d      	lsls	r5, r3, #30
 8002e02:	4606      	mov	r6, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	d507      	bpl.n	8002e18 <__smakebuf_r+0x1c>
 8002e08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e0c:	6023      	str	r3, [r4, #0]
 8002e0e:	6123      	str	r3, [r4, #16]
 8002e10:	2301      	movs	r3, #1
 8002e12:	6163      	str	r3, [r4, #20]
 8002e14:	b003      	add	sp, #12
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e18:	ab01      	add	r3, sp, #4
 8002e1a:	466a      	mov	r2, sp
 8002e1c:	f7ff ffc8 	bl	8002db0 <__swhatbuf_r>
 8002e20:	9f00      	ldr	r7, [sp, #0]
 8002e22:	4605      	mov	r5, r0
 8002e24:	4639      	mov	r1, r7
 8002e26:	4630      	mov	r0, r6
 8002e28:	f7ff fbba 	bl	80025a0 <_malloc_r>
 8002e2c:	b948      	cbnz	r0, 8002e42 <__smakebuf_r+0x46>
 8002e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e32:	059a      	lsls	r2, r3, #22
 8002e34:	d4ee      	bmi.n	8002e14 <__smakebuf_r+0x18>
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	e7e2      	b.n	8002e08 <__smakebuf_r+0xc>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	6020      	str	r0, [r4, #0]
 8002e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e52:	b15b      	cbz	r3, 8002e6c <__smakebuf_r+0x70>
 8002e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f000 f81d 	bl	8002e98 <_isatty_r>
 8002e5e:	b128      	cbz	r0, 8002e6c <__smakebuf_r+0x70>
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	81a3      	strh	r3, [r4, #12]
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	431d      	orrs	r5, r3
 8002e70:	81a5      	strh	r5, [r4, #12]
 8002e72:	e7cf      	b.n	8002e14 <__smakebuf_r+0x18>

08002e74 <_fstat_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4d07      	ldr	r5, [pc, #28]	@ (8002e94 <_fstat_r+0x20>)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	f7fe f83d 	bl	8000f00 <_fstat>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	d102      	bne.n	8002e90 <_fstat_r+0x1c>
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	b103      	cbz	r3, 8002e90 <_fstat_r+0x1c>
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
 8002e92:	bf00      	nop
 8002e94:	200001cc 	.word	0x200001cc

08002e98 <_isatty_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4d06      	ldr	r5, [pc, #24]	@ (8002eb4 <_isatty_r+0x1c>)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	f7fe f83c 	bl	8000f20 <_isatty>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_isatty_r+0x1a>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_isatty_r+0x1a>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	200001cc 	.word	0x200001cc

08002eb8 <_sbrk_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4d06      	ldr	r5, [pc, #24]	@ (8002ed4 <_sbrk_r+0x1c>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	f7fe f844 	bl	8000f50 <_sbrk>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_sbrk_r+0x1a>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_sbrk_r+0x1a>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	200001cc 	.word	0x200001cc

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
