
LabA4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002460  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800260c  0800260c  0000360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  080026c0  080026c0  000036c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c8  080026c8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002738  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002738  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005574  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001474  00000000  00000000  0000960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0000aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004bd  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286f4  00000000  00000000  0000b5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000727f  00000000  00000000  00033cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f20ae  00000000  00000000  0003af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cfee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e24  00000000  00000000  0012d034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0012ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080025f4 	.word	0x080025f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	080025f4 	.word	0x080025f4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <delay_us>:
// delay in microseconds using SysTick timer to count CPU clock cycles
// do not call with 0 : error, maximum delay.
// careful calling with small nums : results in longer delays than specified:
//	   e.g. @4MHz, delay_us(1) = 10=15 us delay.

void delay_us(const uint32_t time_us) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	// set the counts for the specified delay
	SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <delay_us+0x50>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a11      	ldr	r2, [pc, #68]	@ (8000250 <delay_us+0x54>)
 800020a:	fba2 2303 	umull	r2, r3, r2, r3
 800020e:	0c9b      	lsrs	r3, r3, #18
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	fb02 f303 	mul.w	r3, r2, r3
 8000216:	4a0f      	ldr	r2, [pc, #60]	@ (8000254 <delay_us+0x58>)
 8000218:	3b01      	subs	r3, #1
 800021a:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;                                  	 // clear timer count
 800021c:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <delay_us+0x58>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
	SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);    	 // clear count flag
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <delay_us+0x58>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <delay_us+0x58>)
 8000228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800022c:	6013      	str	r3, [r2, #0]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // wait for flag
 800022e:	bf00      	nop
 8000230:	4b08      	ldr	r3, [pc, #32]	@ (8000254 <delay_us+0x58>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f9      	beq.n	8000230 <delay_us+0x34>
}
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000
 8000250:	431bde83 	.word	0x431bde83
 8000254:	e000e010 	.word	0xe000e010

08000258 <LCD_init>:


//COMMANDS ONLY WORK IF GPIO LCD DB PINS ARE 0,1,2,3


void LCD_init( void )  {
 8000258:	b5b0      	push	{r4, r5, r7, lr}
 800025a:	b08a      	sub	sp, #40	@ 0x28
 800025c:	af00      	add	r7, sp, #0
	// RCC & GPIO config for LCD port and pins
	RCC->AHB2ENR |= (LCD_PORT_CLOCK);
 800025e:	4b5c      	ldr	r3, [pc, #368]	@ (80003d0 <LCD_init+0x178>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000262:	4a5b      	ldr	r2, [pc, #364]	@ (80003d0 <LCD_init+0x178>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//Set pins to outputs
	uint32_t lcd_pins[] = LCD_PINS;
 800026a:	4b5a      	ldr	r3, [pc, #360]	@ (80003d4 <LCD_init+0x17c>)
 800026c:	1d3c      	adds	r4, r7, #4
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000278:	e884 0003 	stmia.w	r4, {r0, r1}
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000280:	e079      	b.n	8000376 <LCD_init+0x11e>
		uint32_t pin = lcd_pins[i];
 8000282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	3328      	adds	r3, #40	@ 0x28
 8000288:	443b      	add	r3, r7
 800028a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800028e:	61fb      	str	r3, [r7, #28]
		LCD_PORT->MODER &= ~(0x3 << (pin * 2));
 8000290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	69fa      	ldr	r2, [r7, #28]
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	2103      	movs	r1, #3
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a8:	400b      	ands	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
		LCD_PORT->MODER |= (0x1 << (pin * 2));	//Output 01
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	69fa      	ldr	r2, [r7, #28]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
		LCD_PORT->OTYPER &= ~(0x1 << pin);
 80002c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	2101      	movs	r1, #1
 80002ce:	69fa      	ldr	r2, [r7, #28]
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002dc:	400b      	ands	r3, r1
 80002de:	6053      	str	r3, [r2, #4]
		LCD_PORT->OTYPER |= (0x0 << pin);		//0
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	6053      	str	r3, [r2, #4]
		LCD_PORT->OSPEEDR &= ~(0x3 << (pin * 2));
 80002ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	69fa      	ldr	r2, [r7, #28]
 80002f4:	0052      	lsls	r2, r2, #1
 80002f6:	2103      	movs	r1, #3
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000304:	400b      	ands	r3, r1
 8000306:	6093      	str	r3, [r2, #8]
		LCD_PORT->OSPEEDR |= (0x3 << (pin * 2));//Highest speed
 8000308:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	69fa      	ldr	r2, [r7, #28]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	2103      	movs	r1, #3
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800031e:	430b      	orrs	r3, r1
 8000320:	6093      	str	r3, [r2, #8]
		LCD_PORT->PUPDR &= ~(0x3 << (pin * 2));
 8000322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	69fa      	ldr	r2, [r7, #28]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	2103      	movs	r1, #3
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	43d2      	mvns	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033a:	400b      	ands	r3, r1
 800033c:	60d3      	str	r3, [r2, #12]
		LCD_PORT->PUPDR |= (0x2 << (pin * 2));	//PULL DOWN (no false highs)
 800033e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	69fa      	ldr	r2, [r7, #28]
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	4611      	mov	r1, r2
 8000350:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000354:	430b      	orrs	r3, r1
 8000356:	60d3      	str	r3, [r2, #12]
		LCD_PORT->BRR |= (0x1 << (pin * 1));	//initialize off
 8000358:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800035c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800035e:	2101      	movs	r1, #1
 8000360:	69fa      	ldr	r2, [r7, #28]
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	4611      	mov	r1, r2
 8000368:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800036c:	430b      	orrs	r3, r1
 800036e:	6293      	str	r3, [r2, #40]	@ 0x28
	for (uint32_t i = 0; i < LCD_NUM ; i++) {
 8000370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000372:	3301      	adds	r3, #1
 8000374:	627b      	str	r3, [r7, #36]	@ 0x24
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	2b05      	cmp	r3, #5
 800037a:	d982      	bls.n	8000282 <LCD_init+0x2a>
	}

	delay_us( 40000 );                     	// power-up wait 40 ms
 800037c:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8000380:	f7ff ff3c 	bl	80001fc <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
 8000388:	e008      	b.n	800039c <LCD_init+0x144>
		LCD_4b_command( 0x30 );             // HI 4b of 8b cmd, low nibble = X
 800038a:	2030      	movs	r0, #48	@ 0x30
 800038c:	f000 f83e 	bl	800040c <LCD_4b_command>
		delay_us( 200 );
 8000390:	20c8      	movs	r0, #200	@ 0xc8
 8000392:	f7ff ff33 	bl	80001fc <delay_us>
	for ( int idx = 0; idx < 3; idx++ ) {  	// wake up 1,2,3: DATA = 0011 XXXX
 8000396:	6a3b      	ldr	r3, [r7, #32]
 8000398:	3301      	adds	r3, #1
 800039a:	623b      	str	r3, [r7, #32]
 800039c:	6a3b      	ldr	r3, [r7, #32]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	ddf3      	ble.n	800038a <LCD_init+0x132>
	}
	LCD_4b_command( 0x20 ); 		// fcn set #4: 4b cmd set 4b mode
 80003a2:	2020      	movs	r0, #32
 80003a4:	f000 f832 	bl	800040c <LCD_4b_command>
	delay_us( 40 );         		// remainder of LCD init removed
 80003a8:	2028      	movs	r0, #40	@ 0x28
 80003aa:	f7ff ff27 	bl	80001fc <delay_us>
	LCD_command( 0x28 );			//Selects 2-line mode instead of 1-line
 80003ae:	2028      	movs	r0, #40	@ 0x28
 80003b0:	f000 f84d 	bl	800044e <LCD_command>
	LCD_command( CURSOR_SHIFT_L );			//Shift cursor to the left
 80003b4:	2010      	movs	r0, #16
 80003b6:	f000 f84a 	bl	800044e <LCD_command>
	LCD_command( CURSOR_ON );		//Display, cursor, cursor position on
 80003ba:	200f      	movs	r0, #15
 80003bc:	f000 f847 	bl	800044e <LCD_command>
	LCD_command( CURSOR_RIGHT );	//Cursor moves right, no shift
 80003c0:	2006      	movs	r0, #6
 80003c2:	f000 f844 	bl	800044e <LCD_command>
}
 80003c6:	bf00      	nop
 80003c8:	3728      	adds	r7, #40	@ 0x28
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bdb0      	pop	{r4, r5, r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000
 80003d4:	0800260c 	.word	0x0800260c

080003d8 <LCD_pulse_ENA>:

void LCD_pulse_ENA( void )  {
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	// ENAble line sends command on falling edge
	// set to restore default then clear to trigger
	LCD_PORT->ODR   |= ( LCD_EN );         	// ENABLE = HI
 80003dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // TDDR > 320 ns
 80003ec:	2064      	movs	r0, #100	@ 0x64
 80003ee:	f7ff ff05 	bl	80001fc <delay_us>
	LCD_PORT->ODR   &= ~( LCD_EN );        // ENABLE = LOW
 80003f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003fc:	f023 0310 	bic.w	r3, r3, #16
 8000400:	6153      	str	r3, [r2, #20]
	delay_us( 100 );                         // low values flakey, see A3:p.1
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f7ff fefa 	bl	80001fc <delay_us>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <LCD_4b_command>:

void LCD_4b_command( uint8_t command )  {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	// LCD command using high nibble only - used for 'wake-up' 0x30 commands
	LCD_PORT->ODR   &= ~( LCD_DATA_BITS ); 	// clear DATA bits
 8000416:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000420:	f023 030f 	bic.w	r3, r3, #15
 8000424:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command >> 4 );   	// DATA = command
 8000426:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	79fa      	ldrb	r2, [r7, #7]
 800042e:	0912      	lsrs	r2, r2, #4
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	4611      	mov	r1, r2
 8000434:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000438:	430b      	orrs	r3, r1
 800043a:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 800043c:	2064      	movs	r0, #100	@ 0x64
 800043e:	f7ff fedd 	bl	80001fc <delay_us>
	LCD_pulse_ENA( );						//send
 8000442:	f7ff ffc9 	bl	80003d8 <LCD_pulse_ENA>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <LCD_command>:

void LCD_command( uint8_t command )  {
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	4603      	mov	r3, r0
 8000456:	71fb      	strb	r3, [r7, #7]
	// send command to LCD in 4-bit instruction mode
	// HIGH nibble then LOW nibble, timing sensitive

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 8000458:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000462:	f023 030f 	bic.w	r3, r3, #15
 8000466:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( (command>>4) & LCD_DATA_BITS ); // HIGH shifted low
 8000468:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	091b      	lsrs	r3, r3, #4
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 030f 	and.w	r3, r3, #15
 8000478:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800047c:	4313      	orrs	r3, r2
 800047e:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 8000480:	2064      	movs	r0, #100	@ 0x64
 8000482:	f7ff febb 	bl	80001fc <delay_us>

	LCD_pulse_ENA( );                                    // latch HIGH NIBBLE
 8000486:	f7ff ffa7 	bl	80003d8 <LCD_pulse_ENA>

	LCD_PORT->ODR   &= ~( LCD_DATA_BITS );               // isolate cmd bits
 800048a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	6153      	str	r3, [r2, #20]
	LCD_PORT->ODR   |= ( command & LCD_DATA_BITS );      // LOW nibble
 800049a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f003 030f 	and.w	r3, r3, #15
 80004a6:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80004aa:	4313      	orrs	r3, r2
 80004ac:	614b      	str	r3, [r1, #20]
	delay_us( 100 );
 80004ae:	2064      	movs	r0, #100	@ 0x64
 80004b0:	f7ff fea4 	bl	80001fc <delay_us>
	LCD_pulse_ENA( );                                    // latch LOW NIBBLE
 80004b4:	f7ff ff90 	bl	80003d8 <LCD_pulse_ENA>
	if ( (command == CLEAR_HOME) || (command == RETURN_HOME) ) {
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d002      	beq.n	80004c4 <LCD_command+0x76>
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d103      	bne.n	80004cc <LCD_command+0x7e>
		delay_us( 1000 );	// These commands need more time
 80004c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c8:	f7ff fe98 	bl	80001fc <delay_us>
	}
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <LCD_write_char>:

void LCD_write_char( uint8_t letter )  { //0x41 is A
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	// calls LCD_command() w/char data
	LCD_PORT->ODR   |= (LCD_RS);       // RS = HI for data to address
 80004de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004e8:	f043 0320 	orr.w	r3, r3, #32
 80004ec:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 80004ee:	2064      	movs	r0, #100	@ 0x64
 80004f0:	f7ff fe84 	bl	80001fc <delay_us>
	LCD_command( letter );             // character to print
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffa9 	bl	800044e <LCD_command>
	LCD_PORT->ODR   &= ~(LCD_RS);      // RS = LO
 80004fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000506:	f023 0320 	bic.w	r3, r3, #32
 800050a:	6153      	str	r3, [r2, #20]
	delay_us( 100 );
 800050c:	2064      	movs	r0, #100	@ 0x64
 800050e:	f7ff fe75 	bl	80001fc <delay_us>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <LCD_write_string>:

void LCD_write_string( uint8_t sentence[] ) {
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	// extracts each character from a string and passes it to LCD_write_char()
	uint8_t len = strlen(sentence);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff fe62 	bl	80001ec <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	73bb      	strb	r3, [r7, #14]
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 800052c:	2300      	movs	r3, #0
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e009      	b.n	8000546 <LCD_write_string+0x2c>
		LCD_write_char( sentence[i] );	// Write each character to LCD
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffca 	bl	80004d4 <LCD_write_char>
	for ( uint8_t i = 0 ; i < len ; i++ ) {
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	3301      	adds	r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]
 8000546:	7bfa      	ldrb	r2, [r7, #15]
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	429a      	cmp	r2, r3
 800054c:	d3f1      	bcc.n	8000532 <LCD_write_string+0x18>
	}
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <LCD_write_time>:


void LCD_write_time( uint32_t milli_s ) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	// Takes seconds and outputs time on LCD (N.SSS). Prints right to left
	// SPECIFIC TO LAB A4 TIME LOCATION ON LCD

	LCD_command(CURSOR_LEFT);					// Cursor moves left
 8000560:	2004      	movs	r0, #4
 8000562:	f7ff ff74 	bl	800044e <LCD_command>
	LCD_command(0xCD);							// Cursor to last S in N.SSS
 8000566:	20cd      	movs	r0, #205	@ 0xcd
 8000568:	f7ff ff71 	bl	800044e <LCD_command>
	LCD_write_char( 's' );
 800056c:	2073      	movs	r0, #115	@ 0x73
 800056e:	f7ff ffb1 	bl	80004d4 <LCD_write_char>
	LCD_write_char( ' ' );
 8000572:	2020      	movs	r0, #32
 8000574:	f7ff ffae 	bl	80004d4 <LCD_write_char>
	for ( uint8_t i = 0; i < 4 ; i++ ) {
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e01e      	b.n	80005bc <LCD_write_time+0x64>
		LCD_write_char( (milli_s % 10) + '0' );	// Print each digit
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <LCD_write_time+0x78>)
 8000582:	fba3 2301 	umull	r2, r3, r3, r1
 8000586:	08da      	lsrs	r2, r3, #3
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1aca      	subs	r2, r1, r3
 8000592:	b2d3      	uxtb	r3, r2
 8000594:	3330      	adds	r3, #48	@ 0x30
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff9b 	bl	80004d4 <LCD_write_char>
		if ( i == 2 ) LCD_write_char( '.' );	// Add dot between s/ms
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d102      	bne.n	80005aa <LCD_write_time+0x52>
 80005a4:	202e      	movs	r0, #46	@ 0x2e
 80005a6:	f7ff ff95 	bl	80004d4 <LCD_write_char>
		milli_s /= 10;							// Next left digit
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <LCD_write_time+0x78>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	607b      	str	r3, [r7, #4]
	for ( uint8_t i = 0; i < 4 ; i++ ) {
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	3301      	adds	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d9dd      	bls.n	800057e <LCD_write_time+0x26>
	}
	LCD_command(CURSOR_RIGHT);
 80005c2:	2006      	movs	r0, #6
 80005c4:	f7ff ff43 	bl	800044e <LCD_command>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	cccccccd 	.word	0xcccccccd

080005d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d013      	beq.n	8000614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00b      	beq.n	8000614 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005fc:	e000      	b.n	8000600 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000600:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f9      	beq.n	80005fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800060a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000614:	687b      	ldr	r3, [r7, #4]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <main>:
uint32_t get_rand_TIM2(void);

uint8_t state = 0;	// Track state of operations

void main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
	// Initialize HAL, Clock, ISR, and LCD
	HAL_Init();
 800062a:	f000 fb72 	bl	8000d12 <HAL_Init>
	SystemClock_Config();
 800062e:	f000 f9f1 	bl	8000a14 <SystemClock_Config>
	LCD_init();
 8000632:	f7ff fe11 	bl	8000258 <LCD_init>
	setup_TIM2(CCR1_VALUE);
 8000636:	489a      	ldr	r0, [pc, #616]	@ (80008a0 <main+0x27c>)
 8000638:	f000 f97a 	bl	8000930 <setup_TIM2>

	// User Button Configuration:
	// configure GPIO pin PC13 for:
	// input mode, with pull down
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOCEN);
 800063c:	4b99      	ldr	r3, [pc, #612]	@ (80008a4 <main+0x280>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000640:	4a98      	ldr	r2, [pc, #608]	@ (80008a4 <main+0x280>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOC->MODER   &= ~(GPIO_MODER_MODE13);
 8000648:	4b97      	ldr	r3, [pc, #604]	@ (80008a8 <main+0x284>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a96      	ldr	r2, [pc, #600]	@ (80008a8 <main+0x284>)
 800064e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000652:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR   |= (GPIO_PUPDR_PUPD13_1);
 8000654:	4b94      	ldr	r3, [pc, #592]	@ (80008a8 <main+0x284>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a93      	ldr	r2, [pc, #588]	@ (80008a8 <main+0x284>)
 800065a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800065e:	60d3      	str	r3, [r2, #12]

	// LED 2 Configuration:
	// configure GPIO pin PB7 for:
	// output mode, no pull up or down, high speed,
	RCC->AHB2ENR   |=  (RCC_AHB2ENR_GPIOBEN);
 8000660:	4b90      	ldr	r3, [pc, #576]	@ (80008a4 <main+0x280>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a8f      	ldr	r2, [pc, #572]	@ (80008a4 <main+0x280>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	GPIOB->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 800066c:	4b8f      	ldr	r3, [pc, #572]	@ (80008ac <main+0x288>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a8e      	ldr	r2, [pc, #568]	@ (80008ac <main+0x288>)
 8000672:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000676:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE7_0 | GPIO_MODER_MODE8_0);
 8000678:	4b8c      	ldr	r3, [pc, #560]	@ (80008ac <main+0x288>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a8b      	ldr	r2, [pc, #556]	@ (80008ac <main+0x288>)
 800067e:	f443 33a0 	orr.w	r3, r3, #81920	@ 0x14000
 8000682:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER  &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
 8000684:	4b89      	ldr	r3, [pc, #548]	@ (80008ac <main+0x288>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4a88      	ldr	r2, [pc, #544]	@ (80008ac <main+0x288>)
 800068a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800068e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR   &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000690:	4b86      	ldr	r3, [pc, #536]	@ (80008ac <main+0x288>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4a85      	ldr	r2, [pc, #532]	@ (80008ac <main+0x288>)
 8000696:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 800069a:	60d3      	str	r3, [r2, #12]
	GPIOB->OSPEEDR |=  ((3 << GPIO_OSPEEDR_OSPEED7_Pos) | (3 << GPIO_OSPEEDR_OSPEED8_Pos));
 800069c:	4b83      	ldr	r3, [pc, #524]	@ (80008ac <main+0x288>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a82      	ldr	r2, [pc, #520]	@ (80008ac <main+0x288>)
 80006a2:	f443 3370 	orr.w	r3, r3, #245760	@ 0x3c000
 80006a6:	6093      	str	r3, [r2, #8]

	// Enable RNG
	RCC->CCIPR    |=  (0xC000000);			// MUX selects MSI to RNGclk
 80006a8:	4b7e      	ldr	r3, [pc, #504]	@ (80008a4 <main+0x280>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ae:	4a7d      	ldr	r2, [pc, #500]	@ (80008a4 <main+0x280>)
 80006b0:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->AHB2ENR  |=  (RCC_AHB2ENR_RNGEN);	// Enable r/w to RNG regs
 80006b8:	4b7a      	ldr	r3, [pc, #488]	@ (80008a4 <main+0x280>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006bc:	4a79      	ldr	r2, [pc, #484]	@ (80008a4 <main+0x280>)
 80006be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RNG->CR       |=  (RNG_CR_RNGEN);		// RNG in polling mode
 80006c4:	4b7a      	ldr	r3, [pc, #488]	@ (80008b0 <main+0x28c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a79      	ldr	r2, [pc, #484]	@ (80008b0 <main+0x28c>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6013      	str	r3, [r2, #0]

	uint32_t user_lag = 0;	// Initialize var to capture reaction time.
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]


	while (1)
	{
		while ( state == 0 ) { 	// Reset everything
 80006d4:	e02c      	b.n	8000730 <main+0x10c>
			TIM2->CR1 &= ~TIM_CR1_CEN;			// Turn off TIM2
 80006d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6013      	str	r3, [r2, #0]
			TIM2->CNT &= 0x00000000;			// Reset counter
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
			GPIOB->ODR &= ~GPIO_PIN_7;			// LED off
 80006f4:	4b6d      	ldr	r3, [pc, #436]	@ (80008ac <main+0x288>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4a6c      	ldr	r2, [pc, #432]	@ (80008ac <main+0x288>)
 80006fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006fe:	6153      	str	r3, [r2, #20]
			LCD_command( CURSOR_SHIFT_L );		// Shift cursor to the left
 8000700:	2010      	movs	r0, #16
 8000702:	f7ff fea4 	bl	800044e <LCD_command>
			LCD_command( CURSOR_OFF );			// Display, cursor, position on
 8000706:	200c      	movs	r0, #12
 8000708:	f7ff fea1 	bl	800044e <LCD_command>
			LCD_command( CURSOR_RIGHT );		// Cursor moves right, no shift
 800070c:	2006      	movs	r0, #6
 800070e:	f7ff fe9e 	bl	800044e <LCD_command>
			LCD_command( CLEAR_HOME );
 8000712:	2001      	movs	r0, #1
 8000714:	f7ff fe9b 	bl	800044e <LCD_command>
			LCD_write_string("EE 329 A4 REACT");
 8000718:	4866      	ldr	r0, [pc, #408]	@ (80008b4 <main+0x290>)
 800071a:	f7ff fefe 	bl	800051a <LCD_write_string>
			LCD_command(LINE_TWO);
 800071e:	20c0      	movs	r0, #192	@ 0xc0
 8000720:	f7ff fe95 	bl	800044e <LCD_command>
			LCD_write_string("PUSH SW TO TRIG");
 8000724:	4864      	ldr	r0, [pc, #400]	@ (80008b8 <main+0x294>)
 8000726:	f7ff fef8 	bl	800051a <LCD_write_string>
			state = 1;
 800072a:	4b64      	ldr	r3, [pc, #400]	@ (80008bc <main+0x298>)
 800072c:	2201      	movs	r2, #1
 800072e:	701a      	strb	r2, [r3, #0]
		while ( state == 0 ) { 	// Reset everything
 8000730:	4b62      	ldr	r3, [pc, #392]	@ (80008bc <main+0x298>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0ce      	beq.n	80006d6 <main+0xb2>
		}
		while ( state == 1 ) {	// Wait to start game
 8000738:	e02b      	b.n	8000792 <main+0x16e>
			if ( (GPIOC->IDR & GPIO_PIN_13) == GPIO_PIN_13 ) { 	// Button press
 800073a:	4b5b      	ldr	r3, [pc, #364]	@ (80008a8 <main+0x284>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000746:	d124      	bne.n	8000792 <main+0x16e>
				uint32_t rng_CCR1 = 0;					// Holds 32-bit RN
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
				uint32_t wait_in_s = 0;					// RN in milliseconds
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
				rng_CCR1 = TIM2_FIVE + get_rand_TIM2();	// add 5 seconds
 8000750:	f000 f8c4 	bl	80008dc <get_rand_TIM2>
 8000754:	4602      	mov	r2, r0
 8000756:	4b5a      	ldr	r3, [pc, #360]	@ (80008c0 <main+0x29c>)
 8000758:	4413      	add	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
				LCD_command(LINE_TWO);
 800075c:	20c0      	movs	r0, #192	@ 0xc0
 800075e:	f7ff fe76 	bl	800044e <LCD_command>
				LCD_write_string("Get Ready!      ");
 8000762:	4858      	ldr	r0, [pc, #352]	@ (80008c4 <main+0x2a0>)
 8000764:	f7ff fed9 	bl	800051a <LCD_write_string>

				TIM2->CCR1 = rng_CCR1;				// Set CCR1 to RNG MHz
 8000768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	6353      	str	r3, [r2, #52]	@ 0x34
				TIM2->ARR = rng_CCR1 + TIM2_TEN;	// Set ARR to RNG + 10s
 8000770:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	4b54      	ldr	r3, [pc, #336]	@ (80008c8 <main+0x2a4>)
 8000778:	4413      	add	r3, r2
 800077a:	62cb      	str	r3, [r1, #44]	@ 0x2c
				TIM2->CR1 |= TIM_CR1_CEN;			// Turn on TIM2
 800077c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6013      	str	r3, [r2, #0]
				state = 2;	// Wait for LED
 800078c:	4b4b      	ldr	r3, [pc, #300]	@ (80008bc <main+0x298>)
 800078e:	2202      	movs	r2, #2
 8000790:	701a      	strb	r2, [r3, #0]
		while ( state == 1 ) {	// Wait to start game
 8000792:	4b4a      	ldr	r3, [pc, #296]	@ (80008bc <main+0x298>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d0cf      	beq.n	800073a <main+0x116>
			}
		}

		while ( state == 2 ) { // Wait for interrupt
 800079a:	bf00      	nop
 800079c:	4b47      	ldr	r3, [pc, #284]	@ (80008bc <main+0x298>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d0fb      	beq.n	800079c <main+0x178>
			// Wait for LED on ISR
		}

		while ( state == 3 ) {	// LED has turned on
 80007a4:	e03c      	b.n	8000820 <main+0x1fc>
			if ( (GPIOC->IDR & GPIO_PIN_13) == GPIO_PIN_13 ) {	// Button press
 80007a6:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <main+0x284>)
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007b2:	d135      	bne.n	8000820 <main+0x1fc>
				TIM2->CR1 &= ~TIM_CR1_CEN;						// Turn off TIM2
 80007b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]
				user_lag = ((TIM2->CNT) - (TIM2->CCR1)) / 4000;	// Lag in ms
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	4a3e      	ldr	r2, [pc, #248]	@ (80008cc <main+0x2a8>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
				delay_us(100000);								// for debounce
 80007dc:	483c      	ldr	r0, [pc, #240]	@ (80008d0 <main+0x2ac>)
 80007de:	f7ff fd0d 	bl	80001fc <delay_us>
				TIM2->CNT &= 0x00000000;						// Reset counter
 80007e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
				GPIOB->ODR &= ~GPIO_PIN_7;						// LED off
 80007f0:	4b2e      	ldr	r3, [pc, #184]	@ (80008ac <main+0x288>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	4a2d      	ldr	r2, [pc, #180]	@ (80008ac <main+0x288>)
 80007f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007fa:	6153      	str	r3, [r2, #20]

				LCD_command( CLEAR_HOME );
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fe26 	bl	800044e <LCD_command>
				LCD_write_string("EE 329 A4 REACT");
 8000802:	482c      	ldr	r0, [pc, #176]	@ (80008b4 <main+0x290>)
 8000804:	f7ff fe89 	bl	800051a <LCD_write_string>
				LCD_command(LINE_TWO);
 8000808:	20c0      	movs	r0, #192	@ 0xc0
 800080a:	f7ff fe20 	bl	800044e <LCD_command>
				LCD_write_string("Time = ");
 800080e:	4831      	ldr	r0, [pc, #196]	@ (80008d4 <main+0x2b0>)
 8000810:	f7ff fe83 	bl	800051a <LCD_write_string>
				LCD_write_time( user_lag );
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fe9f 	bl	8000558 <LCD_write_time>

				state = 5;
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <main+0x298>)
 800081c:	2205      	movs	r2, #5
 800081e:	701a      	strb	r2, [r3, #0]
		while ( state == 3 ) {	// LED has turned on
 8000820:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <main+0x298>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d0be      	beq.n	80007a6 <main+0x182>
			}
		}

		while ( state == 4 ) { 	// 10s passed
 8000828:	e023      	b.n	8000872 <main+0x24e>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Turn off TIM2
 800082a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000834:	f023 0301 	bic.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
			TIM2->CNT &= 0x00000000;	// Reset counter
 800083a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800083e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000840:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
			GPIOB->ODR &= ~GPIO_PIN_7;	// LED off
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <main+0x288>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <main+0x288>)
 800084e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000852:	6153      	str	r3, [r2, #20]

			LCD_command( CLEAR_HOME );
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fdfa 	bl	800044e <LCD_command>
			LCD_write_string("EE 329 A4 REACT");
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <main+0x290>)
 800085c:	f7ff fe5d 	bl	800051a <LCD_write_string>
			LCD_command(LINE_TWO);
 8000860:	20c0      	movs	r0, #192	@ 0xc0
 8000862:	f7ff fdf4 	bl	800044e <LCD_command>
			LCD_write_string("No Reaction!    ");
 8000866:	481c      	ldr	r0, [pc, #112]	@ (80008d8 <main+0x2b4>)
 8000868:	f7ff fe57 	bl	800051a <LCD_write_string>

			state = 5;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <main+0x298>)
 800086e:	2205      	movs	r2, #5
 8000870:	701a      	strb	r2, [r3, #0]
		while ( state == 4 ) { 	// 10s passed
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <main+0x298>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b04      	cmp	r3, #4
 8000878:	d0d7      	beq.n	800082a <main+0x206>
		}
		while ( state == 5 ) {	// Wait for user to reset after game
 800087a:	e00c      	b.n	8000896 <main+0x272>
			if ( (GPIOC->IDR & GPIO_PIN_13) == GPIO_PIN_13 ) { // Button press
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <main+0x284>)
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000888:	d105      	bne.n	8000896 <main+0x272>
				delay_us(100000);	// for debounce
 800088a:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <main+0x2ac>)
 800088c:	f7ff fcb6 	bl	80001fc <delay_us>
				state = 0;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <main+0x298>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		while ( state == 5 ) {	// Wait for user to reset after game
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <main+0x298>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b05      	cmp	r3, #5
 800089c:	d0ee      	beq.n	800087c <main+0x258>
		while ( state == 0 ) { 	// Reset everything
 800089e:	e747      	b.n	8000730 <main+0x10c>
 80008a0:	02faf080 	.word	0x02faf080
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000800 	.word	0x48000800
 80008ac:	48000400 	.word	0x48000400
 80008b0:	50060800 	.word	0x50060800
 80008b4:	08002624 	.word	0x08002624
 80008b8:	08002634 	.word	0x08002634
 80008bc:	20000084 	.word	0x20000084
 80008c0:	01312d00 	.word	0x01312d00
 80008c4:	08002644 	.word	0x08002644
 80008c8:	02625a00 	.word	0x02625a00
 80008cc:	10624dd3 	.word	0x10624dd3
 80008d0:	000186a0 	.word	0x000186a0
 80008d4:	08002658 	.word	0x08002658
 80008d8:	08002660 	.word	0x08002660

080008dc <get_rand_TIM2>:

	}		// END WHILE
}	// END MAIN


uint32_t get_rand_TIM2 (void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	// Code to get random seconds (0-10s)
	// Returns CCR1 Value for 0-10s.
	uint32_t rng_val = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]

	if ( ((RNG->SR) & 0x60) == 0 ) {		// Error bits == 0
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <get_rand_TIM2+0x48>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d112      	bne.n	8000918 <get_rand_TIM2+0x3c>
		printf("No error \n");
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <get_rand_TIM2+0x4c>)
 80008f4:	f001 faea 	bl	8001ecc <puts>
		if ( ((RNG->SR) & 0x1) == 0x1 ) {	// RNG is ready
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <get_rand_TIM2+0x48>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	2b01      	cmp	r3, #1
 8000902:	d109      	bne.n	8000918 <get_rand_TIM2+0x3c>
			rng_val = (RNG->DR) / RNG_CONVERTER;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <get_rand_TIM2+0x48>)
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	4b08      	ldr	r3, [pc, #32]	@ (800092c <get_rand_TIM2+0x50>)
 800090a:	fba3 1302 	umull	r1, r3, r3, r2
 800090e:	1ad2      	subs	r2, r2, r3
 8000910:	0852      	lsrs	r2, r2, #1
 8000912:	4413      	add	r3, r2
 8000914:	099b      	lsrs	r3, r3, #6
 8000916:	607b      	str	r3, [r7, #4]
		}
	}
	return rng_val;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	50060800 	.word	0x50060800
 8000928:	08002674 	.word	0x08002674
 800092c:	323e34a3 	.word	0x323e34a3

08000930 <setup_TIM2>:

///////////////////////////////////////////////////////////////////////////////
// ISR CODE

void setup_TIM2( int iDutyCycle ) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <setup_TIM2+0x64>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093c:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <setup_TIM2+0x64>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6593      	str	r3, [r2, #88]	@ 0x58
	TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 8000944:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094e:	f043 0303 	orr.w	r3, r3, #3
 8000952:	60d3      	str	r3, [r2, #12]
	TIM2->ARR = TIME_UP;                             // ARR = T = counts @4MHz
 8000954:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
 800095e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 8000966:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000970:	f023 0303 	bic.w	r3, r3, #3
 8000974:	6113      	str	r3, [r2, #16]
	NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <setup_TIM2+0x68>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <setup_TIM2+0x68>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000982:	b662      	cpsie	i
}
 8000984:	bf00      	nop
	__enable_irq();                                 // global IRQ enable
	//TIM2->CR1 |= TIM_CR1_CEN;                       // start TIM2 CR1
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	e000e100 	.word	0xe000e100

0800099c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC1IF) {		// triggered by CCR1 event ...
 80009a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d010      	beq.n	80009d0 <TIM2_IRQHandler+0x34>
		TIM2->SR &= ~(TIM_SR_CC1IF);    // manage the flag
 80009ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b8:	f023 0302 	bic.w	r3, r3, #2
 80009bc:	6113      	str	r3, [r2, #16]
		GPIOB->ODR |= GPIO_PIN_7;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <TIM2_IRQHandler+0x70>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <TIM2_IRQHandler+0x70>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009c8:	6153      	str	r3, [r2, #20]
		state = 3;	// LED on, wait for response
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <TIM2_IRQHandler+0x74>)
 80009cc:	2203      	movs	r2, #3
 80009ce:	701a      	strb	r2, [r3, #0]
	}
	if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 80009d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d010      	beq.n	8000a00 <TIM2_IRQHandler+0x64>
		TIM2->SR &= ~(TIM_SR_UIF);      // manage the flag
 80009de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e8:	f023 0301 	bic.w	r3, r3, #1
 80009ec:	6113      	str	r3, [r2, #16]
		GPIOB->ODR &= ~GPIO_PIN_7;
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <TIM2_IRQHandler+0x70>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <TIM2_IRQHandler+0x70>)
 80009f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009f8:	6153      	str	r3, [r2, #20]
		state = 4; // LED off, 10s passed
 80009fa:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <TIM2_IRQHandler+0x74>)
 80009fc:	2204      	movs	r2, #4
 80009fe:	701a      	strb	r2, [r3, #0]
	}
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	48000400 	.word	0x48000400
 8000a10:	20000084 	.word	0x20000084

08000a14 <SystemClock_Config>:
///////////////////////////////////////////////////////////////////////////////

void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	@ 0x58
 8000a18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2244      	movs	r2, #68	@ 0x44
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fb32 	bl	800208c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a3a:	f000 fad3 	bl	8000fe4 <HAL_PWREx_ControlVoltageScaling>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000a44:	f000 f82d 	bl	8000aa2 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a54:	2360      	movs	r3, #96	@ 0x60
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fb15 	bl	8001090 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 8000a6c:	f000 f819 	bl	8000aa2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a80:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 ff1a 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x86>
	{
		Error_Handler();
 8000a96:	f000 f804 	bl	8000aa2 <Error_Handler>
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3758      	adds	r7, #88	@ 0x58
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa6:	b672      	cpsid	i
}
 8000aa8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <Error_Handler+0x8>

08000aae <_write>:
	/* USER CODE END Error_Handler_Debug */
}


int _write(int file, char *ptr, int len)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	e009      	b.n	8000ad4 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	60ba      	str	r2, [r7, #8]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fd83 	bl	80005d4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	dbf1      	blt.n	8000ac0 <_write+0x12>
	}
	return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0a:	4a08      	ldr	r2, [pc, #32]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <MemManage_Handler+0x4>

08000b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f919 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e00a      	b.n	8000bb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba0:	f3af 8000 	nop.w
 8000ba4:	4601      	mov	r1, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1c5a      	adds	r2, r3, #1
 8000baa:	60ba      	str	r2, [r7, #8]
 8000bac:	b2ca      	uxtb	r2, r1
 8000bae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dbf0      	blt.n	8000ba0 <_read+0x12>
  }

  return len;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_isatty>:

int _isatty(int file)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f001 fa62 	bl	8002128 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20050000 	.word	0x20050000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000088 	.word	0x20000088
 8000c98:	200001e0 	.word	0x200001e0

08000c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f001 fa21 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf2:	f7ff fc97 	bl	8000624 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d04:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8000d08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d0c:	200001dc 	.word	0x200001dc

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>

08000d12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f91f 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f80e 	bl	8000d44 <HAL_InitTick>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e001      	b.n	8000d38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d34:	f7ff fed8 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d023      	beq.n	8000da0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_InitTick+0x70>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f91d 	bl	8000fae <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10f      	bne.n	8000d9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d809      	bhi.n	8000d94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f8f5 	bl	8000f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <HAL_InitTick+0x74>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e007      	b.n	8000da4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e004      	b.n	8000da4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e001      	b.n	8000da4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000004 	.word	0x20000004

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	2000008c 	.word	0x2000008c

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000008c 	.word	0x2000008c

08000dfc <__NVIC_SetPriorityGrouping>:
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SetPriority>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff47 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5c 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb0 	bl	8000f1c <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40007000 	.word	0x40007000

08000fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ff2:	d130      	bne.n	8001056 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001000:	d038      	beq.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001002:	4b20      	ldr	r3, [pc, #128]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001010:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2232      	movs	r2, #50	@ 0x32
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9b      	lsrs	r3, r3, #18
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001028:	e002      	b.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3b01      	subs	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800103c:	d102      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x60>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f2      	bne.n	800102a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001044:	4b0f      	ldr	r3, [pc, #60]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001050:	d110      	bne.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e00f      	b.n	8001076 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001062:	d007      	beq.n	8001074 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800106c:	4a05      	ldr	r2, [pc, #20]	@ (8001084 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001072:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40007000 	.word	0x40007000
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83

08001090 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d102      	bne.n	80010a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f000 bc08 	b.w	80018b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a4:	4b96      	ldr	r3, [pc, #600]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ae:	4b94      	ldr	r3, [pc, #592]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80e4 	beq.w	800128e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_RCC_OscConfig+0x4c>
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2b0c      	cmp	r3, #12
 80010d0:	f040 808b 	bne.w	80011ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	f040 8087 	bne.w	80011ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010dc:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_OscConfig+0x64>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e3df      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4b81      	ldr	r3, [pc, #516]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_RCC_OscConfig+0x7e>
 8001104:	4b7e      	ldr	r3, [pc, #504]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800110c:	e005      	b.n	800111a <HAL_RCC_OscConfig+0x8a>
 800110e:	4b7c      	ldr	r3, [pc, #496]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800111a:	4293      	cmp	r3, r2
 800111c:	d223      	bcs.n	8001166 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a1b      	ldr	r3, [r3, #32]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fd5a 	bl	8001bdc <RCC_SetFlashLatencyFromMSIRange>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e3c0      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001132:	4b73      	ldr	r3, [pc, #460]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a72      	ldr	r2, [pc, #456]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b70      	ldr	r3, [pc, #448]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	496d      	ldr	r1, [pc, #436]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001150:	4b6b      	ldr	r3, [pc, #428]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4968      	ldr	r1, [pc, #416]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e025      	b.n	80011b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001166:	4b66      	ldr	r3, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a65      	ldr	r2, [pc, #404]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b63      	ldr	r3, [pc, #396]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	4960      	ldr	r1, [pc, #384]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001184:	4b5e      	ldr	r3, [pc, #376]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	495b      	ldr	r1, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d109      	bne.n	80011b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fd1a 	bl	8001bdc <RCC_SetFlashLatencyFromMSIRange>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e380      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011b2:	f000 fc87 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 80011b6:	4602      	mov	r2, r0
 80011b8:	4b51      	ldr	r3, [pc, #324]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4950      	ldr	r1, [pc, #320]	@ (8001304 <HAL_RCC_OscConfig+0x274>)
 80011c4:	5ccb      	ldrb	r3, [r1, r3]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001308 <HAL_RCC_OscConfig+0x278>)
 80011d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011d2:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <HAL_RCC_OscConfig+0x27c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fdb4 	bl	8000d44 <HAL_InitTick>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d052      	beq.n	800128c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	e364      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d032      	beq.n	8001258 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011f2:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a42      	ldr	r2, [pc, #264]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fdf1 	bl	8000de4 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001206:	f7ff fded 	bl	8000de4 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e34d      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001218:	4b39      	ldr	r3, [pc, #228]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001224:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a35      	ldr	r2, [pc, #212]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4930      	ldr	r1, [pc, #192]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001242:	4b2f      	ldr	r3, [pc, #188]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	492b      	ldr	r1, [pc, #172]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
 8001256:	e01a      	b.n	800128e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001264:	f7ff fdbe 	bl	8000de4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126c:	f7ff fdba 	bl	8000de4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e31a      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x1dc>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d073      	beq.n	8001382 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b08      	cmp	r3, #8
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x21c>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b0c      	cmp	r3, #12
 80012a4:	d10e      	bne.n	80012c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d10b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d063      	beq.n	8001380 <HAL_RCC_OscConfig+0x2f0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d15f      	bne.n	8001380 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e2f7      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d106      	bne.n	80012dc <HAL_RCC_OscConfig+0x24c>
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e025      	b.n	8001328 <HAL_RCC_OscConfig+0x298>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d114      	bne.n	8001310 <HAL_RCC_OscConfig+0x280>
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a02      	ldr	r2, [pc, #8]	@ (8001300 <HAL_RCC_OscConfig+0x270>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e013      	b.n	8001328 <HAL_RCC_OscConfig+0x298>
 8001300:	40021000 	.word	0x40021000
 8001304:	08002680 	.word	0x08002680
 8001308:	20000000 	.word	0x20000000
 800130c:	20000004 	.word	0x20000004
 8001310:	4ba0      	ldr	r3, [pc, #640]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a9f      	ldr	r2, [pc, #636]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b9d      	ldr	r3, [pc, #628]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a9c      	ldr	r2, [pc, #624]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fd58 	bl	8000de4 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fd54 	bl	8000de4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	@ 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e2b4      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800134a:	4b92      	ldr	r3, [pc, #584]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x2a8>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fd44 	bl	8000de4 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fd40 	bl	8000de4 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	@ 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e2a0      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001372:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x2d0>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d060      	beq.n	8001450 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_OscConfig+0x310>
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d119      	bne.n	80013ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d116      	bne.n	80013ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x328>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e27d      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b76      	ldr	r3, [pc, #472]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	4973      	ldr	r1, [pc, #460]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013cc:	e040      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d023      	beq.n	800141e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6e      	ldr	r2, [pc, #440]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fcff 	bl	8000de4 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff fcfb 	bl	8000de4 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e25b      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fc:	4b65      	ldr	r3, [pc, #404]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001408:	4b62      	ldr	r3, [pc, #392]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	061b      	lsls	r3, r3, #24
 8001416:	495f      	ldr	r1, [pc, #380]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e018      	b.n	8001450 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141e:	4b5d      	ldr	r3, [pc, #372]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a5c      	ldr	r2, [pc, #368]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142a:	f7ff fcdb 	bl	8000de4 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fcd7 	bl	8000de4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e237      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001444:	4b53      	ldr	r3, [pc, #332]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d03c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01c      	beq.n	800149e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001464:	4b4b      	ldr	r3, [pc, #300]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146a:	4a4a      	ldr	r2, [pc, #296]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fcb6 	bl	8000de4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fcb2 	bl	8000de4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e212      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ef      	beq.n	800147c <HAL_RCC_OscConfig+0x3ec>
 800149c:	e01b      	b.n	80014d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc99 	bl	8000de4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc95 	bl	8000de4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e1f5      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ef      	bne.n	80014b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a6 	beq.w	8001630 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f8:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150c:	2301      	movs	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001510:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <HAL_RCC_OscConfig+0x508>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d118      	bne.n	800154e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800151c:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <HAL_RCC_OscConfig+0x508>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <HAL_RCC_OscConfig+0x508>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001526:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001528:	f7ff fc5c 	bl	8000de4 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001530:	f7ff fc58 	bl	8000de4 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1b8      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_RCC_OscConfig+0x508>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_RCC_OscConfig+0x4d8>
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001566:	e029      	b.n	80015bc <HAL_RCC_OscConfig+0x52c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d115      	bne.n	800159c <HAL_RCC_OscConfig+0x50c>
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001576:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001586:	4a03      	ldr	r2, [pc, #12]	@ (8001594 <HAL_RCC_OscConfig+0x504>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x52c>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	4b9d      	ldr	r3, [pc, #628]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	4a9c      	ldr	r2, [pc, #624]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ac:	4b99      	ldr	r3, [pc, #612]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b2:	4a98      	ldr	r2, [pc, #608]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80015b4:	f023 0304 	bic.w	r3, r3, #4
 80015b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d016      	beq.n	80015f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fc0e 	bl	8000de4 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc0a 	bl	8000de4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e168      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80015e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ed      	beq.n	80015cc <HAL_RCC_OscConfig+0x53c>
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fbf7 	bl	8000de4 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fbf3 	bl	8000de4 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e151      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001610:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ed      	bne.n	80015fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b7b      	ldr	r3, [pc, #492]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	4a7a      	ldr	r2, [pc, #488]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	2b00      	cmp	r3, #0
 800163a:	d03c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01c      	beq.n	800167e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001644:	4b73      	ldr	r3, [pc, #460]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001646:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800164a:	4a72      	ldr	r2, [pc, #456]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001654:	f7ff fbc6 	bl	8000de4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800165c:	f7ff fbc2 	bl	8000de4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e122      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800166e:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0ef      	beq.n	800165c <HAL_RCC_OscConfig+0x5cc>
 800167c:	e01b      	b.n	80016b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800167e:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001680:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001684:	4a63      	ldr	r2, [pc, #396]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fba9 	bl	8000de4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001696:	f7ff fba5 	bl	8000de4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e105      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80016aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1ef      	bne.n	8001696 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80f9 	beq.w	80018b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	f040 80cf 	bne.w	8001868 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016ca:	4b52      	ldr	r3, [pc, #328]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0203 	and.w	r2, r3, #3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	429a      	cmp	r2, r3
 80016dc:	d12c      	bne.n	8001738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	3b01      	subs	r3, #1
 80016ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d123      	bne.n	8001738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d11b      	bne.n	8001738 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d113      	bne.n	8001738 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	3b01      	subs	r3, #1
 800171e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d109      	bne.n	8001738 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	3b01      	subs	r3, #1
 8001732:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d071      	beq.n	800181c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d068      	beq.n	8001810 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800173e:	4b35      	ldr	r3, [pc, #212]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0ac      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800175a:	4b2e      	ldr	r3, [pc, #184]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2d      	ldr	r2, [pc, #180]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001764:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001766:	f7ff fb3d 	bl	8000de4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb39 	bl	8000de4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e099      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178c:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4b21      	ldr	r3, [pc, #132]	@ (8001818 <HAL_RCC_OscConfig+0x788>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800179c:	3a01      	subs	r2, #1
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017a6:	0212      	lsls	r2, r2, #8
 80017a8:	4311      	orrs	r1, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017ae:	0852      	lsrs	r2, r2, #1
 80017b0:	3a01      	subs	r2, #1
 80017b2:	0552      	lsls	r2, r2, #21
 80017b4:	4311      	orrs	r1, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017ba:	0852      	lsrs	r2, r2, #1
 80017bc:	3a01      	subs	r2, #1
 80017be:	0652      	lsls	r2, r2, #25
 80017c0:	4311      	orrs	r1, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017c6:	06d2      	lsls	r2, r2, #27
 80017c8:	430a      	orrs	r2, r1
 80017ca:	4912      	ldr	r1, [pc, #72]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e8:	f7ff fafc 	bl	8000de4 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff faf8 	bl	8000de4 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e058      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <HAL_RCC_OscConfig+0x784>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800180e:	e050      	b.n	80018b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e04f      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
 8001814:	40021000 	.word	0x40021000
 8001818:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181c:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d144      	bne.n	80018b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 800182e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001834:	4b21      	ldr	r3, [pc, #132]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a20      	ldr	r2, [pc, #128]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001840:	f7ff fad0 	bl	8000de4 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff facc 	bl	8000de4 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e02c      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185a:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x7b8>
 8001866:	e024      	b.n	80018b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	2b0c      	cmp	r3, #12
 800186c:	d01f      	beq.n	80018ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 8001874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fab3 	bl	8000de4 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff faaf 	bl	8000de4 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e00f      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4905      	ldr	r1, [pc, #20]	@ (80018bc <HAL_RCC_OscConfig+0x82c>)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x830>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e001      	b.n	80018b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	feeefffc 	.word	0xfeeefffc

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0e7      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b72      	ldr	r3, [pc, #456]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	4970      	ldr	r1, [pc, #448]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cf      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	4b66      	ldr	r3, [pc, #408]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001920:	429a      	cmp	r2, r3
 8001922:	d908      	bls.n	8001936 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b63      	ldr	r3, [pc, #396]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4960      	ldr	r1, [pc, #384]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04c      	beq.n	80019dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d121      	bne.n	800199a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0a6      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	4b54      	ldr	r3, [pc, #336]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d115      	bne.n	800199a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e09a      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800197a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d109      	bne.n	800199a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e08e      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800198a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e086      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800199a:	4b46      	ldr	r3, [pc, #280]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4943      	ldr	r1, [pc, #268]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ac:	f7ff fa1a 	bl	8000de4 <HAL_GetTick>
 80019b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b4:	f7ff fa16 	bl	8000de4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e06e      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 020c 	and.w	r2, r3, #12
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1eb      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b31      	ldr	r3, [pc, #196]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d208      	bcs.n	8001a0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	492b      	ldr	r1, [pc, #172]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d210      	bcs.n	8001a3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 0207 	bic.w	r2, r3, #7
 8001a20:	4923      	ldr	r1, [pc, #140]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e036      	b.n	8001aa8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d008      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a46:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	4918      	ldr	r1, [pc, #96]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4910      	ldr	r1, [pc, #64]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a78:	f000 f824 	bl	8001ac4 <HAL_RCC_GetSysClockFreq>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	490b      	ldr	r1, [pc, #44]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a8a:	5ccb      	ldrb	r3, [r1, r3]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
 8001a94:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x1f8>)
 8001a96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f951 	bl	8000d44 <HAL_InitTick>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	08002680 	.word	0x08002680
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001adc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d11e      	bne.n	8001b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b04:	4b31      	ldr	r3, [pc, #196]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e005      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b20:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10d      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b3c:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	e004      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b48:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d134      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d003      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0xac>
 8001b68:	e005      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b6c:	617b      	str	r3, [r7, #20]
      break;
 8001b6e:	e005      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b72:	617b      	str	r3, [r7, #20]
      break;
 8001b74:	e002      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	617b      	str	r3, [r7, #20]
      break;
 8001b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	3301      	adds	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	fb03 f202 	mul.w	r2, r3, r2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	0e5b      	lsrs	r3, r3, #25
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	3301      	adds	r3, #1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bbc:	69bb      	ldr	r3, [r7, #24]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08002690 	.word	0x08002690
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bf4:	f7ff f9e8 	bl	8000fc8 <HAL_PWREx_GetVoltageRange>
 8001bf8:	6178      	str	r0, [r7, #20]
 8001bfa:	e014      	b.n	8001c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a24      	ldr	r2, [pc, #144]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c08:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c14:	f7ff f9d8 	bl	8000fc8 <HAL_PWREx_GetVoltageRange>
 8001c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c2c:	d10b      	bne.n	8001c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b80      	cmp	r3, #128	@ 0x80
 8001c32:	d919      	bls.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c38:	d902      	bls.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e013      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e010      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b80      	cmp	r3, #128	@ 0x80
 8001c4a:	d902      	bls.n	8001c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	e00a      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b80      	cmp	r3, #128	@ 0x80
 8001c56:	d102      	bne.n	8001c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c58:	2302      	movs	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e004      	b.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b70      	cmp	r3, #112	@ 0x70
 8001c62:	d101      	bne.n	8001c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c64:	2301      	movs	r3, #1
 8001c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 0207 	bic.w	r2, r3, #7
 8001c70:	4909      	ldr	r1, [pc, #36]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c78:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40022000 	.word	0x40022000

08001c9c <std>:
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	b510      	push	{r4, lr}
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8001ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001caa:	6083      	str	r3, [r0, #8]
 8001cac:	8181      	strh	r1, [r0, #12]
 8001cae:	6643      	str	r3, [r0, #100]	@ 0x64
 8001cb0:	81c2      	strh	r2, [r0, #14]
 8001cb2:	6183      	str	r3, [r0, #24]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	305c      	adds	r0, #92	@ 0x5c
 8001cba:	f000 f9e7 	bl	800208c <memset>
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <std+0x58>)
 8001cc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf8 <std+0x5c>)
 8001cc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <std+0x60>)
 8001cc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <std+0x64>)
 8001ccc:	6323      	str	r3, [r4, #48]	@ 0x30
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <std+0x68>)
 8001cd0:	6224      	str	r4, [r4, #32]
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	d006      	beq.n	8001ce4 <std+0x48>
 8001cd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001cda:	4294      	cmp	r4, r2
 8001cdc:	d002      	beq.n	8001ce4 <std+0x48>
 8001cde:	33d0      	adds	r3, #208	@ 0xd0
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d105      	bne.n	8001cf0 <std+0x54>
 8001ce4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cec:	f000 ba46 	b.w	800217c <__retarget_lock_init_recursive>
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08001edd 	.word	0x08001edd
 8001cf8:	08001eff 	.word	0x08001eff
 8001cfc:	08001f37 	.word	0x08001f37
 8001d00:	08001f5b 	.word	0x08001f5b
 8001d04:	20000090 	.word	0x20000090

08001d08 <stdio_exit_handler>:
 8001d08:	4a02      	ldr	r2, [pc, #8]	@ (8001d14 <stdio_exit_handler+0xc>)
 8001d0a:	4903      	ldr	r1, [pc, #12]	@ (8001d18 <stdio_exit_handler+0x10>)
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <stdio_exit_handler+0x14>)
 8001d0e:	f000 b869 	b.w	8001de4 <_fwalk_sglue>
 8001d12:	bf00      	nop
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	0800247d 	.word	0x0800247d
 8001d1c:	2000001c 	.word	0x2000001c

08001d20 <cleanup_stdio>:
 8001d20:	6841      	ldr	r1, [r0, #4]
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <cleanup_stdio+0x34>)
 8001d24:	4299      	cmp	r1, r3
 8001d26:	b510      	push	{r4, lr}
 8001d28:	4604      	mov	r4, r0
 8001d2a:	d001      	beq.n	8001d30 <cleanup_stdio+0x10>
 8001d2c:	f000 fba6 	bl	800247c <_fflush_r>
 8001d30:	68a1      	ldr	r1, [r4, #8]
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <cleanup_stdio+0x38>)
 8001d34:	4299      	cmp	r1, r3
 8001d36:	d002      	beq.n	8001d3e <cleanup_stdio+0x1e>
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f000 fb9f 	bl	800247c <_fflush_r>
 8001d3e:	68e1      	ldr	r1, [r4, #12]
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <cleanup_stdio+0x3c>)
 8001d42:	4299      	cmp	r1, r3
 8001d44:	d004      	beq.n	8001d50 <cleanup_stdio+0x30>
 8001d46:	4620      	mov	r0, r4
 8001d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d4c:	f000 bb96 	b.w	800247c <_fflush_r>
 8001d50:	bd10      	pop	{r4, pc}
 8001d52:	bf00      	nop
 8001d54:	20000090 	.word	0x20000090
 8001d58:	200000f8 	.word	0x200000f8
 8001d5c:	20000160 	.word	0x20000160

08001d60 <global_stdio_init.part.0>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4b0b      	ldr	r3, [pc, #44]	@ (8001d90 <global_stdio_init.part.0+0x30>)
 8001d64:	4c0b      	ldr	r4, [pc, #44]	@ (8001d94 <global_stdio_init.part.0+0x34>)
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <global_stdio_init.part.0+0x38>)
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	f7ff ff94 	bl	8001c9c <std>
 8001d74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2109      	movs	r1, #9
 8001d7c:	f7ff ff8e 	bl	8001c9c <std>
 8001d80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d84:	2202      	movs	r2, #2
 8001d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d8a:	2112      	movs	r1, #18
 8001d8c:	f7ff bf86 	b.w	8001c9c <std>
 8001d90:	200001c8 	.word	0x200001c8
 8001d94:	20000090 	.word	0x20000090
 8001d98:	08001d09 	.word	0x08001d09

08001d9c <__sfp_lock_acquire>:
 8001d9c:	4801      	ldr	r0, [pc, #4]	@ (8001da4 <__sfp_lock_acquire+0x8>)
 8001d9e:	f000 b9ee 	b.w	800217e <__retarget_lock_acquire_recursive>
 8001da2:	bf00      	nop
 8001da4:	200001d1 	.word	0x200001d1

08001da8 <__sfp_lock_release>:
 8001da8:	4801      	ldr	r0, [pc, #4]	@ (8001db0 <__sfp_lock_release+0x8>)
 8001daa:	f000 b9e9 	b.w	8002180 <__retarget_lock_release_recursive>
 8001dae:	bf00      	nop
 8001db0:	200001d1 	.word	0x200001d1

08001db4 <__sinit>:
 8001db4:	b510      	push	{r4, lr}
 8001db6:	4604      	mov	r4, r0
 8001db8:	f7ff fff0 	bl	8001d9c <__sfp_lock_acquire>
 8001dbc:	6a23      	ldr	r3, [r4, #32]
 8001dbe:	b11b      	cbz	r3, 8001dc8 <__sinit+0x14>
 8001dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dc4:	f7ff bff0 	b.w	8001da8 <__sfp_lock_release>
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <__sinit+0x28>)
 8001dca:	6223      	str	r3, [r4, #32]
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <__sinit+0x2c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f5      	bne.n	8001dc0 <__sinit+0xc>
 8001dd4:	f7ff ffc4 	bl	8001d60 <global_stdio_init.part.0>
 8001dd8:	e7f2      	b.n	8001dc0 <__sinit+0xc>
 8001dda:	bf00      	nop
 8001ddc:	08001d21 	.word	0x08001d21
 8001de0:	200001c8 	.word	0x200001c8

08001de4 <_fwalk_sglue>:
 8001de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001de8:	4607      	mov	r7, r0
 8001dea:	4688      	mov	r8, r1
 8001dec:	4614      	mov	r4, r2
 8001dee:	2600      	movs	r6, #0
 8001df0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001df4:	f1b9 0901 	subs.w	r9, r9, #1
 8001df8:	d505      	bpl.n	8001e06 <_fwalk_sglue+0x22>
 8001dfa:	6824      	ldr	r4, [r4, #0]
 8001dfc:	2c00      	cmp	r4, #0
 8001dfe:	d1f7      	bne.n	8001df0 <_fwalk_sglue+0xc>
 8001e00:	4630      	mov	r0, r6
 8001e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e06:	89ab      	ldrh	r3, [r5, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d907      	bls.n	8001e1c <_fwalk_sglue+0x38>
 8001e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e10:	3301      	adds	r3, #1
 8001e12:	d003      	beq.n	8001e1c <_fwalk_sglue+0x38>
 8001e14:	4629      	mov	r1, r5
 8001e16:	4638      	mov	r0, r7
 8001e18:	47c0      	blx	r8
 8001e1a:	4306      	orrs	r6, r0
 8001e1c:	3568      	adds	r5, #104	@ 0x68
 8001e1e:	e7e9      	b.n	8001df4 <_fwalk_sglue+0x10>

08001e20 <_puts_r>:
 8001e20:	6a03      	ldr	r3, [r0, #32]
 8001e22:	b570      	push	{r4, r5, r6, lr}
 8001e24:	6884      	ldr	r4, [r0, #8]
 8001e26:	4605      	mov	r5, r0
 8001e28:	460e      	mov	r6, r1
 8001e2a:	b90b      	cbnz	r3, 8001e30 <_puts_r+0x10>
 8001e2c:	f7ff ffc2 	bl	8001db4 <__sinit>
 8001e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e32:	07db      	lsls	r3, r3, #31
 8001e34:	d405      	bmi.n	8001e42 <_puts_r+0x22>
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	0598      	lsls	r0, r3, #22
 8001e3a:	d402      	bmi.n	8001e42 <_puts_r+0x22>
 8001e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e3e:	f000 f99e 	bl	800217e <__retarget_lock_acquire_recursive>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	0719      	lsls	r1, r3, #28
 8001e46:	d502      	bpl.n	8001e4e <_puts_r+0x2e>
 8001e48:	6923      	ldr	r3, [r4, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d135      	bne.n	8001eba <_puts_r+0x9a>
 8001e4e:	4621      	mov	r1, r4
 8001e50:	4628      	mov	r0, r5
 8001e52:	f000 f8c5 	bl	8001fe0 <__swsetup_r>
 8001e56:	b380      	cbz	r0, 8001eba <_puts_r+0x9a>
 8001e58:	f04f 35ff 	mov.w	r5, #4294967295
 8001e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e5e:	07da      	lsls	r2, r3, #31
 8001e60:	d405      	bmi.n	8001e6e <_puts_r+0x4e>
 8001e62:	89a3      	ldrh	r3, [r4, #12]
 8001e64:	059b      	lsls	r3, r3, #22
 8001e66:	d402      	bmi.n	8001e6e <_puts_r+0x4e>
 8001e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e6a:	f000 f989 	bl	8002180 <__retarget_lock_release_recursive>
 8001e6e:	4628      	mov	r0, r5
 8001e70:	bd70      	pop	{r4, r5, r6, pc}
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	da04      	bge.n	8001e80 <_puts_r+0x60>
 8001e76:	69a2      	ldr	r2, [r4, #24]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dc17      	bgt.n	8001eac <_puts_r+0x8c>
 8001e7c:	290a      	cmp	r1, #10
 8001e7e:	d015      	beq.n	8001eac <_puts_r+0x8c>
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	6022      	str	r2, [r4, #0]
 8001e86:	7019      	strb	r1, [r3, #0]
 8001e88:	68a3      	ldr	r3, [r4, #8]
 8001e8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	60a3      	str	r3, [r4, #8]
 8001e92:	2900      	cmp	r1, #0
 8001e94:	d1ed      	bne.n	8001e72 <_puts_r+0x52>
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da11      	bge.n	8001ebe <_puts_r+0x9e>
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	210a      	movs	r1, #10
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f000 f85f 	bl	8001f62 <__swbuf_r>
 8001ea4:	3001      	adds	r0, #1
 8001ea6:	d0d7      	beq.n	8001e58 <_puts_r+0x38>
 8001ea8:	250a      	movs	r5, #10
 8001eaa:	e7d7      	b.n	8001e5c <_puts_r+0x3c>
 8001eac:	4622      	mov	r2, r4
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f000 f857 	bl	8001f62 <__swbuf_r>
 8001eb4:	3001      	adds	r0, #1
 8001eb6:	d1e7      	bne.n	8001e88 <_puts_r+0x68>
 8001eb8:	e7ce      	b.n	8001e58 <_puts_r+0x38>
 8001eba:	3e01      	subs	r6, #1
 8001ebc:	e7e4      	b.n	8001e88 <_puts_r+0x68>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	6022      	str	r2, [r4, #0]
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e7ee      	b.n	8001ea8 <_puts_r+0x88>
	...

08001ecc <puts>:
 8001ecc:	4b02      	ldr	r3, [pc, #8]	@ (8001ed8 <puts+0xc>)
 8001ece:	4601      	mov	r1, r0
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f7ff bfa5 	b.w	8001e20 <_puts_r>
 8001ed6:	bf00      	nop
 8001ed8:	20000018 	.word	0x20000018

08001edc <__sread>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	460c      	mov	r4, r1
 8001ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee4:	f000 f8fc 	bl	80020e0 <_read_r>
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	bfab      	itete	ge
 8001eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001eee:	89a3      	ldrhlt	r3, [r4, #12]
 8001ef0:	181b      	addge	r3, r3, r0
 8001ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001ef6:	bfac      	ite	ge
 8001ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001efa:	81a3      	strhlt	r3, [r4, #12]
 8001efc:	bd10      	pop	{r4, pc}

08001efe <__swrite>:
 8001efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f02:	461f      	mov	r7, r3
 8001f04:	898b      	ldrh	r3, [r1, #12]
 8001f06:	05db      	lsls	r3, r3, #23
 8001f08:	4605      	mov	r5, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	4616      	mov	r6, r2
 8001f0e:	d505      	bpl.n	8001f1c <__swrite+0x1e>
 8001f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f14:	2302      	movs	r3, #2
 8001f16:	2200      	movs	r2, #0
 8001f18:	f000 f8d0 	bl	80020bc <_lseek_r>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f26:	81a3      	strh	r3, [r4, #12]
 8001f28:	4632      	mov	r2, r6
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	f000 b8e7 	b.w	8002104 <_write_r>

08001f36 <__sseek>:
 8001f36:	b510      	push	{r4, lr}
 8001f38:	460c      	mov	r4, r1
 8001f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f3e:	f000 f8bd 	bl	80020bc <_lseek_r>
 8001f42:	1c43      	adds	r3, r0, #1
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	bf15      	itete	ne
 8001f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001f52:	81a3      	strheq	r3, [r4, #12]
 8001f54:	bf18      	it	ne
 8001f56:	81a3      	strhne	r3, [r4, #12]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__sclose>:
 8001f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5e:	f000 b89d 	b.w	800209c <_close_r>

08001f62 <__swbuf_r>:
 8001f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f64:	460e      	mov	r6, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	4605      	mov	r5, r0
 8001f6a:	b118      	cbz	r0, 8001f74 <__swbuf_r+0x12>
 8001f6c:	6a03      	ldr	r3, [r0, #32]
 8001f6e:	b90b      	cbnz	r3, 8001f74 <__swbuf_r+0x12>
 8001f70:	f7ff ff20 	bl	8001db4 <__sinit>
 8001f74:	69a3      	ldr	r3, [r4, #24]
 8001f76:	60a3      	str	r3, [r4, #8]
 8001f78:	89a3      	ldrh	r3, [r4, #12]
 8001f7a:	071a      	lsls	r2, r3, #28
 8001f7c:	d501      	bpl.n	8001f82 <__swbuf_r+0x20>
 8001f7e:	6923      	ldr	r3, [r4, #16]
 8001f80:	b943      	cbnz	r3, 8001f94 <__swbuf_r+0x32>
 8001f82:	4621      	mov	r1, r4
 8001f84:	4628      	mov	r0, r5
 8001f86:	f000 f82b 	bl	8001fe0 <__swsetup_r>
 8001f8a:	b118      	cbz	r0, 8001f94 <__swbuf_r+0x32>
 8001f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8001f90:	4638      	mov	r0, r7
 8001f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	6922      	ldr	r2, [r4, #16]
 8001f98:	1a98      	subs	r0, r3, r2
 8001f9a:	6963      	ldr	r3, [r4, #20]
 8001f9c:	b2f6      	uxtb	r6, r6
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	4637      	mov	r7, r6
 8001fa2:	dc05      	bgt.n	8001fb0 <__swbuf_r+0x4e>
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f000 fa68 	bl	800247c <_fflush_r>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d1ed      	bne.n	8001f8c <__swbuf_r+0x2a>
 8001fb0:	68a3      	ldr	r3, [r4, #8]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	60a3      	str	r3, [r4, #8]
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	6022      	str	r2, [r4, #0]
 8001fbc:	701e      	strb	r6, [r3, #0]
 8001fbe:	6962      	ldr	r2, [r4, #20]
 8001fc0:	1c43      	adds	r3, r0, #1
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d004      	beq.n	8001fd0 <__swbuf_r+0x6e>
 8001fc6:	89a3      	ldrh	r3, [r4, #12]
 8001fc8:	07db      	lsls	r3, r3, #31
 8001fca:	d5e1      	bpl.n	8001f90 <__swbuf_r+0x2e>
 8001fcc:	2e0a      	cmp	r6, #10
 8001fce:	d1df      	bne.n	8001f90 <__swbuf_r+0x2e>
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f000 fa52 	bl	800247c <_fflush_r>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d0d9      	beq.n	8001f90 <__swbuf_r+0x2e>
 8001fdc:	e7d6      	b.n	8001f8c <__swbuf_r+0x2a>
	...

08001fe0 <__swsetup_r>:
 8001fe0:	b538      	push	{r3, r4, r5, lr}
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <__swsetup_r+0xa8>)
 8001fe4:	4605      	mov	r5, r0
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	460c      	mov	r4, r1
 8001fea:	b118      	cbz	r0, 8001ff4 <__swsetup_r+0x14>
 8001fec:	6a03      	ldr	r3, [r0, #32]
 8001fee:	b90b      	cbnz	r3, 8001ff4 <__swsetup_r+0x14>
 8001ff0:	f7ff fee0 	bl	8001db4 <__sinit>
 8001ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff8:	0719      	lsls	r1, r3, #28
 8001ffa:	d422      	bmi.n	8002042 <__swsetup_r+0x62>
 8001ffc:	06da      	lsls	r2, r3, #27
 8001ffe:	d407      	bmi.n	8002010 <__swsetup_r+0x30>
 8002000:	2209      	movs	r2, #9
 8002002:	602a      	str	r2, [r5, #0]
 8002004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	e033      	b.n	8002078 <__swsetup_r+0x98>
 8002010:	0758      	lsls	r0, r3, #29
 8002012:	d512      	bpl.n	800203a <__swsetup_r+0x5a>
 8002014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002016:	b141      	cbz	r1, 800202a <__swsetup_r+0x4a>
 8002018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800201c:	4299      	cmp	r1, r3
 800201e:	d002      	beq.n	8002026 <__swsetup_r+0x46>
 8002020:	4628      	mov	r0, r5
 8002022:	f000 f8af 	bl	8002184 <_free_r>
 8002026:	2300      	movs	r3, #0
 8002028:	6363      	str	r3, [r4, #52]	@ 0x34
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	6063      	str	r3, [r4, #4]
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	81a3      	strh	r3, [r4, #12]
 8002042:	6923      	ldr	r3, [r4, #16]
 8002044:	b94b      	cbnz	r3, 800205a <__swsetup_r+0x7a>
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002050:	d003      	beq.n	800205a <__swsetup_r+0x7a>
 8002052:	4621      	mov	r1, r4
 8002054:	4628      	mov	r0, r5
 8002056:	f000 fa5f 	bl	8002518 <__smakebuf_r>
 800205a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205e:	f013 0201 	ands.w	r2, r3, #1
 8002062:	d00a      	beq.n	800207a <__swsetup_r+0x9a>
 8002064:	2200      	movs	r2, #0
 8002066:	60a2      	str	r2, [r4, #8]
 8002068:	6962      	ldr	r2, [r4, #20]
 800206a:	4252      	negs	r2, r2
 800206c:	61a2      	str	r2, [r4, #24]
 800206e:	6922      	ldr	r2, [r4, #16]
 8002070:	b942      	cbnz	r2, 8002084 <__swsetup_r+0xa4>
 8002072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002076:	d1c5      	bne.n	8002004 <__swsetup_r+0x24>
 8002078:	bd38      	pop	{r3, r4, r5, pc}
 800207a:	0799      	lsls	r1, r3, #30
 800207c:	bf58      	it	pl
 800207e:	6962      	ldrpl	r2, [r4, #20]
 8002080:	60a2      	str	r2, [r4, #8]
 8002082:	e7f4      	b.n	800206e <__swsetup_r+0x8e>
 8002084:	2000      	movs	r0, #0
 8002086:	e7f7      	b.n	8002078 <__swsetup_r+0x98>
 8002088:	20000018 	.word	0x20000018

0800208c <memset>:
 800208c:	4402      	add	r2, r0
 800208e:	4603      	mov	r3, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <_close_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4d06      	ldr	r5, [pc, #24]	@ (80020b8 <_close_r+0x1c>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7fe fd8e 	bl	8000bc8 <_close>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_close_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_close_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	200001cc 	.word	0x200001cc

080020bc <_lseek_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4d07      	ldr	r5, [pc, #28]	@ (80020dc <_lseek_r+0x20>)
 80020c0:	4604      	mov	r4, r0
 80020c2:	4608      	mov	r0, r1
 80020c4:	4611      	mov	r1, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	602a      	str	r2, [r5, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7fe fda3 	bl	8000c16 <_lseek>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_lseek_r+0x1e>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b103      	cbz	r3, 80020da <_lseek_r+0x1e>
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	200001cc 	.word	0x200001cc

080020e0 <_read_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	4d07      	ldr	r5, [pc, #28]	@ (8002100 <_read_r+0x20>)
 80020e4:	4604      	mov	r4, r0
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	2200      	movs	r2, #0
 80020ec:	602a      	str	r2, [r5, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f7fe fd4d 	bl	8000b8e <_read>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d102      	bne.n	80020fe <_read_r+0x1e>
 80020f8:	682b      	ldr	r3, [r5, #0]
 80020fa:	b103      	cbz	r3, 80020fe <_read_r+0x1e>
 80020fc:	6023      	str	r3, [r4, #0]
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
 8002100:	200001cc 	.word	0x200001cc

08002104 <_write_r>:
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4d07      	ldr	r5, [pc, #28]	@ (8002124 <_write_r+0x20>)
 8002108:	4604      	mov	r4, r0
 800210a:	4608      	mov	r0, r1
 800210c:	4611      	mov	r1, r2
 800210e:	2200      	movs	r2, #0
 8002110:	602a      	str	r2, [r5, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	f7fe fccb 	bl	8000aae <_write>
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	d102      	bne.n	8002122 <_write_r+0x1e>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	b103      	cbz	r3, 8002122 <_write_r+0x1e>
 8002120:	6023      	str	r3, [r4, #0]
 8002122:	bd38      	pop	{r3, r4, r5, pc}
 8002124:	200001cc 	.word	0x200001cc

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	@ (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000018 	.word	0x20000018

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d0d      	ldr	r5, [pc, #52]	@ (800216c <__libc_init_array+0x38>)
 8002138:	4c0d      	ldr	r4, [pc, #52]	@ (8002170 <__libc_init_array+0x3c>)
 800213a:	1b64      	subs	r4, r4, r5
 800213c:	10a4      	asrs	r4, r4, #2
 800213e:	2600      	movs	r6, #0
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	4d0b      	ldr	r5, [pc, #44]	@ (8002174 <__libc_init_array+0x40>)
 8002146:	4c0c      	ldr	r4, [pc, #48]	@ (8002178 <__libc_init_array+0x44>)
 8002148:	f000 fa54 	bl	80025f4 <_init>
 800214c:	1b64      	subs	r4, r4, r5
 800214e:	10a4      	asrs	r4, r4, #2
 8002150:	2600      	movs	r6, #0
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	080026c8 	.word	0x080026c8
 8002170:	080026c8 	.word	0x080026c8
 8002174:	080026c8 	.word	0x080026c8
 8002178:	080026cc 	.word	0x080026cc

0800217c <__retarget_lock_init_recursive>:
 800217c:	4770      	bx	lr

0800217e <__retarget_lock_acquire_recursive>:
 800217e:	4770      	bx	lr

08002180 <__retarget_lock_release_recursive>:
 8002180:	4770      	bx	lr
	...

08002184 <_free_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	4605      	mov	r5, r0
 8002188:	2900      	cmp	r1, #0
 800218a:	d041      	beq.n	8002210 <_free_r+0x8c>
 800218c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002190:	1f0c      	subs	r4, r1, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	bfb8      	it	lt
 8002196:	18e4      	addlt	r4, r4, r3
 8002198:	f000 f8e0 	bl	800235c <__malloc_lock>
 800219c:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <_free_r+0x90>)
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	b933      	cbnz	r3, 80021b0 <_free_r+0x2c>
 80021a2:	6063      	str	r3, [r4, #4]
 80021a4:	6014      	str	r4, [r2, #0]
 80021a6:	4628      	mov	r0, r5
 80021a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021ac:	f000 b8dc 	b.w	8002368 <__malloc_unlock>
 80021b0:	42a3      	cmp	r3, r4
 80021b2:	d908      	bls.n	80021c6 <_free_r+0x42>
 80021b4:	6820      	ldr	r0, [r4, #0]
 80021b6:	1821      	adds	r1, r4, r0
 80021b8:	428b      	cmp	r3, r1
 80021ba:	bf01      	itttt	eq
 80021bc:	6819      	ldreq	r1, [r3, #0]
 80021be:	685b      	ldreq	r3, [r3, #4]
 80021c0:	1809      	addeq	r1, r1, r0
 80021c2:	6021      	streq	r1, [r4, #0]
 80021c4:	e7ed      	b.n	80021a2 <_free_r+0x1e>
 80021c6:	461a      	mov	r2, r3
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	b10b      	cbz	r3, 80021d0 <_free_r+0x4c>
 80021cc:	42a3      	cmp	r3, r4
 80021ce:	d9fa      	bls.n	80021c6 <_free_r+0x42>
 80021d0:	6811      	ldr	r1, [r2, #0]
 80021d2:	1850      	adds	r0, r2, r1
 80021d4:	42a0      	cmp	r0, r4
 80021d6:	d10b      	bne.n	80021f0 <_free_r+0x6c>
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	4401      	add	r1, r0
 80021dc:	1850      	adds	r0, r2, r1
 80021de:	4283      	cmp	r3, r0
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	d1e0      	bne.n	80021a6 <_free_r+0x22>
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	4408      	add	r0, r1
 80021ec:	6010      	str	r0, [r2, #0]
 80021ee:	e7da      	b.n	80021a6 <_free_r+0x22>
 80021f0:	d902      	bls.n	80021f8 <_free_r+0x74>
 80021f2:	230c      	movs	r3, #12
 80021f4:	602b      	str	r3, [r5, #0]
 80021f6:	e7d6      	b.n	80021a6 <_free_r+0x22>
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	1821      	adds	r1, r4, r0
 80021fc:	428b      	cmp	r3, r1
 80021fe:	bf04      	itt	eq
 8002200:	6819      	ldreq	r1, [r3, #0]
 8002202:	685b      	ldreq	r3, [r3, #4]
 8002204:	6063      	str	r3, [r4, #4]
 8002206:	bf04      	itt	eq
 8002208:	1809      	addeq	r1, r1, r0
 800220a:	6021      	streq	r1, [r4, #0]
 800220c:	6054      	str	r4, [r2, #4]
 800220e:	e7ca      	b.n	80021a6 <_free_r+0x22>
 8002210:	bd38      	pop	{r3, r4, r5, pc}
 8002212:	bf00      	nop
 8002214:	200001d8 	.word	0x200001d8

08002218 <sbrk_aligned>:
 8002218:	b570      	push	{r4, r5, r6, lr}
 800221a:	4e0f      	ldr	r6, [pc, #60]	@ (8002258 <sbrk_aligned+0x40>)
 800221c:	460c      	mov	r4, r1
 800221e:	6831      	ldr	r1, [r6, #0]
 8002220:	4605      	mov	r5, r0
 8002222:	b911      	cbnz	r1, 800222a <sbrk_aligned+0x12>
 8002224:	f000 f9d6 	bl	80025d4 <_sbrk_r>
 8002228:	6030      	str	r0, [r6, #0]
 800222a:	4621      	mov	r1, r4
 800222c:	4628      	mov	r0, r5
 800222e:	f000 f9d1 	bl	80025d4 <_sbrk_r>
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	d103      	bne.n	800223e <sbrk_aligned+0x26>
 8002236:	f04f 34ff 	mov.w	r4, #4294967295
 800223a:	4620      	mov	r0, r4
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	1cc4      	adds	r4, r0, #3
 8002240:	f024 0403 	bic.w	r4, r4, #3
 8002244:	42a0      	cmp	r0, r4
 8002246:	d0f8      	beq.n	800223a <sbrk_aligned+0x22>
 8002248:	1a21      	subs	r1, r4, r0
 800224a:	4628      	mov	r0, r5
 800224c:	f000 f9c2 	bl	80025d4 <_sbrk_r>
 8002250:	3001      	adds	r0, #1
 8002252:	d1f2      	bne.n	800223a <sbrk_aligned+0x22>
 8002254:	e7ef      	b.n	8002236 <sbrk_aligned+0x1e>
 8002256:	bf00      	nop
 8002258:	200001d4 	.word	0x200001d4

0800225c <_malloc_r>:
 800225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002260:	1ccd      	adds	r5, r1, #3
 8002262:	f025 0503 	bic.w	r5, r5, #3
 8002266:	3508      	adds	r5, #8
 8002268:	2d0c      	cmp	r5, #12
 800226a:	bf38      	it	cc
 800226c:	250c      	movcc	r5, #12
 800226e:	2d00      	cmp	r5, #0
 8002270:	4606      	mov	r6, r0
 8002272:	db01      	blt.n	8002278 <_malloc_r+0x1c>
 8002274:	42a9      	cmp	r1, r5
 8002276:	d904      	bls.n	8002282 <_malloc_r+0x26>
 8002278:	230c      	movs	r3, #12
 800227a:	6033      	str	r3, [r6, #0]
 800227c:	2000      	movs	r0, #0
 800227e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002358 <_malloc_r+0xfc>
 8002286:	f000 f869 	bl	800235c <__malloc_lock>
 800228a:	f8d8 3000 	ldr.w	r3, [r8]
 800228e:	461c      	mov	r4, r3
 8002290:	bb44      	cbnz	r4, 80022e4 <_malloc_r+0x88>
 8002292:	4629      	mov	r1, r5
 8002294:	4630      	mov	r0, r6
 8002296:	f7ff ffbf 	bl	8002218 <sbrk_aligned>
 800229a:	1c43      	adds	r3, r0, #1
 800229c:	4604      	mov	r4, r0
 800229e:	d158      	bne.n	8002352 <_malloc_r+0xf6>
 80022a0:	f8d8 4000 	ldr.w	r4, [r8]
 80022a4:	4627      	mov	r7, r4
 80022a6:	2f00      	cmp	r7, #0
 80022a8:	d143      	bne.n	8002332 <_malloc_r+0xd6>
 80022aa:	2c00      	cmp	r4, #0
 80022ac:	d04b      	beq.n	8002346 <_malloc_r+0xea>
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	4639      	mov	r1, r7
 80022b2:	4630      	mov	r0, r6
 80022b4:	eb04 0903 	add.w	r9, r4, r3
 80022b8:	f000 f98c 	bl	80025d4 <_sbrk_r>
 80022bc:	4581      	cmp	r9, r0
 80022be:	d142      	bne.n	8002346 <_malloc_r+0xea>
 80022c0:	6821      	ldr	r1, [r4, #0]
 80022c2:	1a6d      	subs	r5, r5, r1
 80022c4:	4629      	mov	r1, r5
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff ffa6 	bl	8002218 <sbrk_aligned>
 80022cc:	3001      	adds	r0, #1
 80022ce:	d03a      	beq.n	8002346 <_malloc_r+0xea>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	442b      	add	r3, r5
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	f8d8 3000 	ldr.w	r3, [r8]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	bb62      	cbnz	r2, 8002338 <_malloc_r+0xdc>
 80022de:	f8c8 7000 	str.w	r7, [r8]
 80022e2:	e00f      	b.n	8002304 <_malloc_r+0xa8>
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	1b52      	subs	r2, r2, r5
 80022e8:	d420      	bmi.n	800232c <_malloc_r+0xd0>
 80022ea:	2a0b      	cmp	r2, #11
 80022ec:	d917      	bls.n	800231e <_malloc_r+0xc2>
 80022ee:	1961      	adds	r1, r4, r5
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	6025      	str	r5, [r4, #0]
 80022f4:	bf18      	it	ne
 80022f6:	6059      	strne	r1, [r3, #4]
 80022f8:	6863      	ldr	r3, [r4, #4]
 80022fa:	bf08      	it	eq
 80022fc:	f8c8 1000 	streq.w	r1, [r8]
 8002300:	5162      	str	r2, [r4, r5]
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	4630      	mov	r0, r6
 8002306:	f000 f82f 	bl	8002368 <__malloc_unlock>
 800230a:	f104 000b 	add.w	r0, r4, #11
 800230e:	1d23      	adds	r3, r4, #4
 8002310:	f020 0007 	bic.w	r0, r0, #7
 8002314:	1ac2      	subs	r2, r0, r3
 8002316:	bf1c      	itt	ne
 8002318:	1a1b      	subne	r3, r3, r0
 800231a:	50a3      	strne	r3, [r4, r2]
 800231c:	e7af      	b.n	800227e <_malloc_r+0x22>
 800231e:	6862      	ldr	r2, [r4, #4]
 8002320:	42a3      	cmp	r3, r4
 8002322:	bf0c      	ite	eq
 8002324:	f8c8 2000 	streq.w	r2, [r8]
 8002328:	605a      	strne	r2, [r3, #4]
 800232a:	e7eb      	b.n	8002304 <_malloc_r+0xa8>
 800232c:	4623      	mov	r3, r4
 800232e:	6864      	ldr	r4, [r4, #4]
 8002330:	e7ae      	b.n	8002290 <_malloc_r+0x34>
 8002332:	463c      	mov	r4, r7
 8002334:	687f      	ldr	r7, [r7, #4]
 8002336:	e7b6      	b.n	80022a6 <_malloc_r+0x4a>
 8002338:	461a      	mov	r2, r3
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	42a3      	cmp	r3, r4
 800233e:	d1fb      	bne.n	8002338 <_malloc_r+0xdc>
 8002340:	2300      	movs	r3, #0
 8002342:	6053      	str	r3, [r2, #4]
 8002344:	e7de      	b.n	8002304 <_malloc_r+0xa8>
 8002346:	230c      	movs	r3, #12
 8002348:	6033      	str	r3, [r6, #0]
 800234a:	4630      	mov	r0, r6
 800234c:	f000 f80c 	bl	8002368 <__malloc_unlock>
 8002350:	e794      	b.n	800227c <_malloc_r+0x20>
 8002352:	6005      	str	r5, [r0, #0]
 8002354:	e7d6      	b.n	8002304 <_malloc_r+0xa8>
 8002356:	bf00      	nop
 8002358:	200001d8 	.word	0x200001d8

0800235c <__malloc_lock>:
 800235c:	4801      	ldr	r0, [pc, #4]	@ (8002364 <__malloc_lock+0x8>)
 800235e:	f7ff bf0e 	b.w	800217e <__retarget_lock_acquire_recursive>
 8002362:	bf00      	nop
 8002364:	200001d0 	.word	0x200001d0

08002368 <__malloc_unlock>:
 8002368:	4801      	ldr	r0, [pc, #4]	@ (8002370 <__malloc_unlock+0x8>)
 800236a:	f7ff bf09 	b.w	8002180 <__retarget_lock_release_recursive>
 800236e:	bf00      	nop
 8002370:	200001d0 	.word	0x200001d0

08002374 <__sflush_r>:
 8002374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800237c:	0716      	lsls	r6, r2, #28
 800237e:	4605      	mov	r5, r0
 8002380:	460c      	mov	r4, r1
 8002382:	d454      	bmi.n	800242e <__sflush_r+0xba>
 8002384:	684b      	ldr	r3, [r1, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	dc02      	bgt.n	8002390 <__sflush_r+0x1c>
 800238a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800238c:	2b00      	cmp	r3, #0
 800238e:	dd48      	ble.n	8002422 <__sflush_r+0xae>
 8002390:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002392:	2e00      	cmp	r6, #0
 8002394:	d045      	beq.n	8002422 <__sflush_r+0xae>
 8002396:	2300      	movs	r3, #0
 8002398:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800239c:	682f      	ldr	r7, [r5, #0]
 800239e:	6a21      	ldr	r1, [r4, #32]
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	d030      	beq.n	8002406 <__sflush_r+0x92>
 80023a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	0759      	lsls	r1, r3, #29
 80023aa:	d505      	bpl.n	80023b8 <__sflush_r+0x44>
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023b2:	b10b      	cbz	r3, 80023b8 <__sflush_r+0x44>
 80023b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023b6:	1ad2      	subs	r2, r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023bc:	6a21      	ldr	r1, [r4, #32]
 80023be:	4628      	mov	r0, r5
 80023c0:	47b0      	blx	r6
 80023c2:	1c43      	adds	r3, r0, #1
 80023c4:	89a3      	ldrh	r3, [r4, #12]
 80023c6:	d106      	bne.n	80023d6 <__sflush_r+0x62>
 80023c8:	6829      	ldr	r1, [r5, #0]
 80023ca:	291d      	cmp	r1, #29
 80023cc:	d82b      	bhi.n	8002426 <__sflush_r+0xb2>
 80023ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002478 <__sflush_r+0x104>)
 80023d0:	410a      	asrs	r2, r1
 80023d2:	07d6      	lsls	r6, r2, #31
 80023d4:	d427      	bmi.n	8002426 <__sflush_r+0xb2>
 80023d6:	2200      	movs	r2, #0
 80023d8:	6062      	str	r2, [r4, #4]
 80023da:	04d9      	lsls	r1, r3, #19
 80023dc:	6922      	ldr	r2, [r4, #16]
 80023de:	6022      	str	r2, [r4, #0]
 80023e0:	d504      	bpl.n	80023ec <__sflush_r+0x78>
 80023e2:	1c42      	adds	r2, r0, #1
 80023e4:	d101      	bne.n	80023ea <__sflush_r+0x76>
 80023e6:	682b      	ldr	r3, [r5, #0]
 80023e8:	b903      	cbnz	r3, 80023ec <__sflush_r+0x78>
 80023ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80023ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023ee:	602f      	str	r7, [r5, #0]
 80023f0:	b1b9      	cbz	r1, 8002422 <__sflush_r+0xae>
 80023f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023f6:	4299      	cmp	r1, r3
 80023f8:	d002      	beq.n	8002400 <__sflush_r+0x8c>
 80023fa:	4628      	mov	r0, r5
 80023fc:	f7ff fec2 	bl	8002184 <_free_r>
 8002400:	2300      	movs	r3, #0
 8002402:	6363      	str	r3, [r4, #52]	@ 0x34
 8002404:	e00d      	b.n	8002422 <__sflush_r+0xae>
 8002406:	2301      	movs	r3, #1
 8002408:	4628      	mov	r0, r5
 800240a:	47b0      	blx	r6
 800240c:	4602      	mov	r2, r0
 800240e:	1c50      	adds	r0, r2, #1
 8002410:	d1c9      	bne.n	80023a6 <__sflush_r+0x32>
 8002412:	682b      	ldr	r3, [r5, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0c6      	beq.n	80023a6 <__sflush_r+0x32>
 8002418:	2b1d      	cmp	r3, #29
 800241a:	d001      	beq.n	8002420 <__sflush_r+0xac>
 800241c:	2b16      	cmp	r3, #22
 800241e:	d11e      	bne.n	800245e <__sflush_r+0xea>
 8002420:	602f      	str	r7, [r5, #0]
 8002422:	2000      	movs	r0, #0
 8002424:	e022      	b.n	800246c <__sflush_r+0xf8>
 8002426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800242a:	b21b      	sxth	r3, r3
 800242c:	e01b      	b.n	8002466 <__sflush_r+0xf2>
 800242e:	690f      	ldr	r7, [r1, #16]
 8002430:	2f00      	cmp	r7, #0
 8002432:	d0f6      	beq.n	8002422 <__sflush_r+0xae>
 8002434:	0793      	lsls	r3, r2, #30
 8002436:	680e      	ldr	r6, [r1, #0]
 8002438:	bf08      	it	eq
 800243a:	694b      	ldreq	r3, [r1, #20]
 800243c:	600f      	str	r7, [r1, #0]
 800243e:	bf18      	it	ne
 8002440:	2300      	movne	r3, #0
 8002442:	eba6 0807 	sub.w	r8, r6, r7
 8002446:	608b      	str	r3, [r1, #8]
 8002448:	f1b8 0f00 	cmp.w	r8, #0
 800244c:	dde9      	ble.n	8002422 <__sflush_r+0xae>
 800244e:	6a21      	ldr	r1, [r4, #32]
 8002450:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002452:	4643      	mov	r3, r8
 8002454:	463a      	mov	r2, r7
 8002456:	4628      	mov	r0, r5
 8002458:	47b0      	blx	r6
 800245a:	2800      	cmp	r0, #0
 800245c:	dc08      	bgt.n	8002470 <__sflush_r+0xfc>
 800245e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002466:	81a3      	strh	r3, [r4, #12]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002470:	4407      	add	r7, r0
 8002472:	eba8 0800 	sub.w	r8, r8, r0
 8002476:	e7e7      	b.n	8002448 <__sflush_r+0xd4>
 8002478:	dfbffffe 	.word	0xdfbffffe

0800247c <_fflush_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	690b      	ldr	r3, [r1, #16]
 8002480:	4605      	mov	r5, r0
 8002482:	460c      	mov	r4, r1
 8002484:	b913      	cbnz	r3, 800248c <_fflush_r+0x10>
 8002486:	2500      	movs	r5, #0
 8002488:	4628      	mov	r0, r5
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	b118      	cbz	r0, 8002496 <_fflush_r+0x1a>
 800248e:	6a03      	ldr	r3, [r0, #32]
 8002490:	b90b      	cbnz	r3, 8002496 <_fflush_r+0x1a>
 8002492:	f7ff fc8f 	bl	8001db4 <__sinit>
 8002496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f3      	beq.n	8002486 <_fflush_r+0xa>
 800249e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024a0:	07d0      	lsls	r0, r2, #31
 80024a2:	d404      	bmi.n	80024ae <_fflush_r+0x32>
 80024a4:	0599      	lsls	r1, r3, #22
 80024a6:	d402      	bmi.n	80024ae <_fflush_r+0x32>
 80024a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024aa:	f7ff fe68 	bl	800217e <__retarget_lock_acquire_recursive>
 80024ae:	4628      	mov	r0, r5
 80024b0:	4621      	mov	r1, r4
 80024b2:	f7ff ff5f 	bl	8002374 <__sflush_r>
 80024b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024b8:	07da      	lsls	r2, r3, #31
 80024ba:	4605      	mov	r5, r0
 80024bc:	d4e4      	bmi.n	8002488 <_fflush_r+0xc>
 80024be:	89a3      	ldrh	r3, [r4, #12]
 80024c0:	059b      	lsls	r3, r3, #22
 80024c2:	d4e1      	bmi.n	8002488 <_fflush_r+0xc>
 80024c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024c6:	f7ff fe5b 	bl	8002180 <__retarget_lock_release_recursive>
 80024ca:	e7dd      	b.n	8002488 <_fflush_r+0xc>

080024cc <__swhatbuf_r>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	460c      	mov	r4, r1
 80024d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d4:	2900      	cmp	r1, #0
 80024d6:	b096      	sub	sp, #88	@ 0x58
 80024d8:	4615      	mov	r5, r2
 80024da:	461e      	mov	r6, r3
 80024dc:	da0d      	bge.n	80024fa <__swhatbuf_r+0x2e>
 80024de:	89a3      	ldrh	r3, [r4, #12]
 80024e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2340      	movne	r3, #64	@ 0x40
 80024ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80024f0:	2000      	movs	r0, #0
 80024f2:	6031      	str	r1, [r6, #0]
 80024f4:	602b      	str	r3, [r5, #0]
 80024f6:	b016      	add	sp, #88	@ 0x58
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	466a      	mov	r2, sp
 80024fc:	f000 f848 	bl	8002590 <_fstat_r>
 8002500:	2800      	cmp	r0, #0
 8002502:	dbec      	blt.n	80024de <__swhatbuf_r+0x12>
 8002504:	9901      	ldr	r1, [sp, #4]
 8002506:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800250a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800250e:	4259      	negs	r1, r3
 8002510:	4159      	adcs	r1, r3
 8002512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002516:	e7eb      	b.n	80024f0 <__swhatbuf_r+0x24>

08002518 <__smakebuf_r>:
 8002518:	898b      	ldrh	r3, [r1, #12]
 800251a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800251c:	079d      	lsls	r5, r3, #30
 800251e:	4606      	mov	r6, r0
 8002520:	460c      	mov	r4, r1
 8002522:	d507      	bpl.n	8002534 <__smakebuf_r+0x1c>
 8002524:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	6123      	str	r3, [r4, #16]
 800252c:	2301      	movs	r3, #1
 800252e:	6163      	str	r3, [r4, #20]
 8002530:	b003      	add	sp, #12
 8002532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002534:	ab01      	add	r3, sp, #4
 8002536:	466a      	mov	r2, sp
 8002538:	f7ff ffc8 	bl	80024cc <__swhatbuf_r>
 800253c:	9f00      	ldr	r7, [sp, #0]
 800253e:	4605      	mov	r5, r0
 8002540:	4639      	mov	r1, r7
 8002542:	4630      	mov	r0, r6
 8002544:	f7ff fe8a 	bl	800225c <_malloc_r>
 8002548:	b948      	cbnz	r0, 800255e <__smakebuf_r+0x46>
 800254a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800254e:	059a      	lsls	r2, r3, #22
 8002550:	d4ee      	bmi.n	8002530 <__smakebuf_r+0x18>
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	f043 0302 	orr.w	r3, r3, #2
 800255a:	81a3      	strh	r3, [r4, #12]
 800255c:	e7e2      	b.n	8002524 <__smakebuf_r+0xc>
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	6020      	str	r0, [r4, #0]
 8002562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002566:	81a3      	strh	r3, [r4, #12]
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800256e:	b15b      	cbz	r3, 8002588 <__smakebuf_r+0x70>
 8002570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002574:	4630      	mov	r0, r6
 8002576:	f000 f81d 	bl	80025b4 <_isatty_r>
 800257a:	b128      	cbz	r0, 8002588 <__smakebuf_r+0x70>
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	81a3      	strh	r3, [r4, #12]
 8002588:	89a3      	ldrh	r3, [r4, #12]
 800258a:	431d      	orrs	r5, r3
 800258c:	81a5      	strh	r5, [r4, #12]
 800258e:	e7cf      	b.n	8002530 <__smakebuf_r+0x18>

08002590 <_fstat_r>:
 8002590:	b538      	push	{r3, r4, r5, lr}
 8002592:	4d07      	ldr	r5, [pc, #28]	@ (80025b0 <_fstat_r+0x20>)
 8002594:	2300      	movs	r3, #0
 8002596:	4604      	mov	r4, r0
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	f7fe fb1f 	bl	8000be0 <_fstat>
 80025a2:	1c43      	adds	r3, r0, #1
 80025a4:	d102      	bne.n	80025ac <_fstat_r+0x1c>
 80025a6:	682b      	ldr	r3, [r5, #0]
 80025a8:	b103      	cbz	r3, 80025ac <_fstat_r+0x1c>
 80025aa:	6023      	str	r3, [r4, #0]
 80025ac:	bd38      	pop	{r3, r4, r5, pc}
 80025ae:	bf00      	nop
 80025b0:	200001cc 	.word	0x200001cc

080025b4 <_isatty_r>:
 80025b4:	b538      	push	{r3, r4, r5, lr}
 80025b6:	4d06      	ldr	r5, [pc, #24]	@ (80025d0 <_isatty_r+0x1c>)
 80025b8:	2300      	movs	r3, #0
 80025ba:	4604      	mov	r4, r0
 80025bc:	4608      	mov	r0, r1
 80025be:	602b      	str	r3, [r5, #0]
 80025c0:	f7fe fb1e 	bl	8000c00 <_isatty>
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d102      	bne.n	80025ce <_isatty_r+0x1a>
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	b103      	cbz	r3, 80025ce <_isatty_r+0x1a>
 80025cc:	6023      	str	r3, [r4, #0]
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	200001cc 	.word	0x200001cc

080025d4 <_sbrk_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4d06      	ldr	r5, [pc, #24]	@ (80025f0 <_sbrk_r+0x1c>)
 80025d8:	2300      	movs	r3, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	602b      	str	r3, [r5, #0]
 80025e0:	f7fe fb26 	bl	8000c30 <_sbrk>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_sbrk_r+0x1a>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_sbrk_r+0x1a>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	200001cc 	.word	0x200001cc

080025f4 <_init>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr

08002600 <_fini>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	bf00      	nop
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr
